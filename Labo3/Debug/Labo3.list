
Labo3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002254  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080023e0  080023e0  000123e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002420  08002420  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002420  08002420  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002420  08002420  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002420  08002420  00012420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002424  08002424  00012424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002434  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002434  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a10  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001646  00000000  00000000  00029a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002b098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002bb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4e6  00000000  00000000  0002c550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c444  00000000  00000000  0004ba36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c207a  00000000  00000000  00057e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119ef4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c58  00000000  00000000  00119f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080023c8 	.word	0x080023c8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080023c8 	.word	0x080023c8

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 f9c8 	bl	8000566 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f82d 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f8cb 	bl	8000374 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001de:	f000 f86f 	bl	80002c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80001e2:	2104      	movs	r1, #4
 80001e4:	4812      	ldr	r0, [pc, #72]	; (8000230 <main+0x64>)
 80001e6:	f001 fb63 	bl	80018b0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for (int i = 0; i < 625; ++i) {
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e009      	b.n	8000204 <main+0x38>
	  	  		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,i);
 80001f0:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <main+0x64>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	639a      	str	r2, [r3, #56]	; 0x38
	  	  		HAL_Delay(3);
 80001f8:	2003      	movs	r0, #3
 80001fa:	f000 fa29 	bl	8000650 <HAL_Delay>
	  for (int i = 0; i < 625; ++i) {
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	3301      	adds	r3, #1
 8000202:	607b      	str	r3, [r7, #4]
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800020a:	ddf1      	ble.n	80001f0 <main+0x24>
	  }
	  for (int i = 625; i > 0; --i) {
 800020c:	f240 2371 	movw	r3, #625	; 0x271
 8000210:	603b      	str	r3, [r7, #0]
 8000212:	e009      	b.n	8000228 <main+0x5c>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,i);
 8000214:	4b06      	ldr	r3, [pc, #24]	; (8000230 <main+0x64>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	683a      	ldr	r2, [r7, #0]
 800021a:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(3);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 fa17 	bl	8000650 <HAL_Delay>
	  for (int i = 625; i > 0; --i) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	3b01      	subs	r3, #1
 8000226:	603b      	str	r3, [r7, #0]
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	2b00      	cmp	r3, #0
 800022c:	dcf2      	bgt.n	8000214 <main+0x48>
	  for (int i = 0; i < 625; ++i) {
 800022e:	e7dc      	b.n	80001ea <main+0x1e>
 8000230:	20000028 	.word	0x20000028

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b096      	sub	sp, #88	; 0x58
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0314 	add.w	r3, r7, #20
 800023e:	2244      	movs	r2, #68	; 0x44
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f002 f8b8 	bl	80023b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	463b      	mov	r3, r7
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000256:	f44f 7000 	mov.w	r0, #512	; 0x200
 800025a:	f000 fc7b 	bl	8000b54 <HAL_PWREx_ControlVoltageScaling>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000264:	f000 f89e 	bl	80003a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000268:	2310      	movs	r3, #16
 800026a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800026c:	2301      	movs	r3, #1
 800026e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000270:	2300      	movs	r3, #0
 8000272:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000274:	2360      	movs	r3, #96	; 0x60
 8000276:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000278:	2300      	movs	r3, #0
 800027a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fcbd 	bl	8000c00 <HAL_RCC_OscConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800028c:	f000 f88a 	bl	80003a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000290:	230f      	movs	r3, #15
 8000292:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000294:	2300      	movs	r3, #0
 8000296:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a4:	463b      	mov	r3, r7
 80002a6:	2100      	movs	r1, #0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f001 f8bd 	bl	8001428 <HAL_RCC_ClockConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002b4:	f000 f876 	bl	80003a4 <Error_Handler>
  }
}
 80002b8:	bf00      	nop
 80002ba:	3758      	adds	r7, #88	; 0x58
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08a      	sub	sp, #40	; 0x28
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c6:	f107 031c 	add.w	r3, r7, #28
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002d2:	463b      	mov	r3, r7
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
 80002e0:	615a      	str	r2, [r3, #20]
 80002e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002e4:	4b22      	ldr	r3, [pc, #136]	; (8000370 <MX_TIM2_Init+0xb0>)
 80002e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 80002ec:	4b20      	ldr	r3, [pc, #128]	; (8000370 <MX_TIM2_Init+0xb0>)
 80002ee:	227f      	movs	r2, #127	; 0x7f
 80002f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f2:	4b1f      	ldr	r3, [pc, #124]	; (8000370 <MX_TIM2_Init+0xb0>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 80002f8:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <MX_TIM2_Init+0xb0>)
 80002fa:	f240 2271 	movw	r2, #625	; 0x271
 80002fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000300:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <MX_TIM2_Init+0xb0>)
 8000302:	2200      	movs	r2, #0
 8000304:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <MX_TIM2_Init+0xb0>)
 8000308:	2200      	movs	r2, #0
 800030a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800030c:	4818      	ldr	r0, [pc, #96]	; (8000370 <MX_TIM2_Init+0xb0>)
 800030e:	f001 fa77 	bl	8001800 <HAL_TIM_PWM_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000318:	f000 f844 	bl	80003a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800031c:	2300      	movs	r3, #0
 800031e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000320:	2300      	movs	r3, #0
 8000322:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000324:	f107 031c 	add.w	r3, r7, #28
 8000328:	4619      	mov	r1, r3
 800032a:	4811      	ldr	r0, [pc, #68]	; (8000370 <MX_TIM2_Init+0xb0>)
 800032c:	f001 ffba 	bl	80022a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000336:	f000 f835 	bl	80003a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800033a:	2360      	movs	r3, #96	; 0x60
 800033c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800033e:	2300      	movs	r3, #0
 8000340:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000342:	2300      	movs	r3, #0
 8000344:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800034a:	463b      	mov	r3, r7
 800034c:	2204      	movs	r2, #4
 800034e:	4619      	mov	r1, r3
 8000350:	4807      	ldr	r0, [pc, #28]	; (8000370 <MX_TIM2_Init+0xb0>)
 8000352:	f001 fb8b 	bl	8001a6c <HAL_TIM_PWM_ConfigChannel>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800035c:	f000 f822 	bl	80003a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000360:	4803      	ldr	r0, [pc, #12]	; (8000370 <MX_TIM2_Init+0xb0>)
 8000362:	f000 f867 	bl	8000434 <HAL_TIM_MspPostInit>

}
 8000366:	bf00      	nop
 8000368:	3728      	adds	r7, #40	; 0x28
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000028 	.word	0x20000028

08000374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_GPIO_Init+0x2c>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037e:	4a08      	ldr	r2, [pc, #32]	; (80003a0 <MX_GPIO_Init+0x2c>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_GPIO_Init+0x2c>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]

}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40021000 	.word	0x40021000

080003a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ac:	e7fe      	b.n	80003ac <Error_Handler+0x8>
	...

080003b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <HAL_MspInit+0x44>)
 80003b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ba:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <HAL_MspInit+0x44>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6613      	str	r3, [r2, #96]	; 0x60
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <HAL_MspInit+0x44>)
 80003c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <HAL_MspInit+0x44>)
 80003d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003d2:	4a08      	ldr	r2, [pc, #32]	; (80003f4 <HAL_MspInit+0x44>)
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d8:	6593      	str	r3, [r2, #88]	; 0x58
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <HAL_MspInit+0x44>)
 80003dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e2:	603b      	str	r3, [r7, #0]
 80003e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000

080003f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000408:	d10b      	bne.n	8000422 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800040a:	4b09      	ldr	r3, [pc, #36]	; (8000430 <HAL_TIM_PWM_MspInit+0x38>)
 800040c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800040e:	4a08      	ldr	r2, [pc, #32]	; (8000430 <HAL_TIM_PWM_MspInit+0x38>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6593      	str	r3, [r2, #88]	; 0x58
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <HAL_TIM_PWM_MspInit+0x38>)
 8000418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000422:	bf00      	nop
 8000424:	3714      	adds	r7, #20
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000

08000434 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043c:	f107 030c 	add.w	r3, r7, #12
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
 800044a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000454:	d11c      	bne.n	8000490 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <HAL_TIM_MspPostInit+0x64>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045a:	4a0f      	ldr	r2, [pc, #60]	; (8000498 <HAL_TIM_MspPostInit+0x64>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000462:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <HAL_TIM_MspPostInit+0x64>)
 8000464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	60bb      	str	r3, [r7, #8]
 800046c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800046e:	2302      	movs	r3, #2
 8000470:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000472:	2302      	movs	r3, #2
 8000474:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800047e:	2301      	movs	r3, #1
 8000480:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000482:	f107 030c 	add.w	r3, r7, #12
 8000486:	4619      	mov	r1, r3
 8000488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048c:	f000 f9ea 	bl	8000864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000490:	bf00      	nop
 8000492:	3720      	adds	r7, #32
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40021000 	.word	0x40021000

0800049c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <NMI_Handler+0x4>

080004a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <MemManage_Handler+0x4>

080004ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <BusFault_Handler+0x4>

080004b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <UsageFault_Handler+0x4>

080004ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e8:	f000 f892 	bl	8000610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <SystemInit+0x20>)
 80004f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004fa:	4a05      	ldr	r2, [pc, #20]	; (8000510 <SystemInit+0x20>)
 80004fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	e000ed00 	.word	0xe000ed00

08000514 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800054c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000518:	f7ff ffea 	bl	80004f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800051c:	480c      	ldr	r0, [pc, #48]	; (8000550 <LoopForever+0x6>)
  ldr r1, =_edata
 800051e:	490d      	ldr	r1, [pc, #52]	; (8000554 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <LoopForever+0xe>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000524:	e002      	b.n	800052c <LoopCopyDataInit>

08000526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052a:	3304      	adds	r3, #4

0800052c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800052c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000530:	d3f9      	bcc.n	8000526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000532:	4a0a      	ldr	r2, [pc, #40]	; (800055c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000534:	4c0a      	ldr	r4, [pc, #40]	; (8000560 <LoopForever+0x16>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000538:	e001      	b.n	800053e <LoopFillZerobss>

0800053a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800053c:	3204      	adds	r2, #4

0800053e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000540:	d3fb      	bcc.n	800053a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000542:	f001 ff15 	bl	8002370 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000546:	f7ff fe41 	bl	80001cc <main>

0800054a <LoopForever>:

LoopForever:
    b LoopForever
 800054a:	e7fe      	b.n	800054a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800054c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000554:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000558:	08002428 	.word	0x08002428
  ldr r2, =_sbss
 800055c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000560:	20000078 	.word	0x20000078

08000564 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <ADC1_IRQHandler>

08000566 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b082      	sub	sp, #8
 800056a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800056c:	2300      	movs	r3, #0
 800056e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000570:	2003      	movs	r0, #3
 8000572:	f000 f943 	bl	80007fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000576:	200f      	movs	r0, #15
 8000578:	f000 f80e 	bl	8000598 <HAL_InitTick>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d002      	beq.n	8000588 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	71fb      	strb	r3, [r7, #7]
 8000586:	e001      	b.n	800058c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000588:	f7ff ff12 	bl	80003b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800058c:	79fb      	ldrb	r3, [r7, #7]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005a0:	2300      	movs	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <HAL_InitTick+0x6c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d023      	beq.n	80005f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <HAL_InitTick+0x70>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <HAL_InitTick+0x6c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4619      	mov	r1, r3
 80005b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80005be:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f941 	bl	800084a <HAL_SYSTICK_Config>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d10f      	bne.n	80005ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b0f      	cmp	r3, #15
 80005d2:	d809      	bhi.n	80005e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d4:	2200      	movs	r2, #0
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	f04f 30ff 	mov.w	r0, #4294967295
 80005dc:	f000 f919 	bl	8000812 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005e0:	4a0a      	ldr	r2, [pc, #40]	; (800060c <HAL_InitTick+0x74>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6013      	str	r3, [r2, #0]
 80005e6:	e007      	b.n	80005f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	e004      	b.n	80005f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	e001      	b.n	80005f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005f4:	2301      	movs	r3, #1
 80005f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000008 	.word	0x20000008
 8000608:	20000000 	.word	0x20000000
 800060c:	20000004 	.word	0x20000004

08000610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_IncTick+0x20>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x24>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4413      	add	r3, r2
 8000620:	4a04      	ldr	r2, [pc, #16]	; (8000634 <HAL_IncTick+0x24>)
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20000008 	.word	0x20000008
 8000634:	20000074 	.word	0x20000074

08000638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return uwTick;
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <HAL_GetTick+0x14>)
 800063e:	681b      	ldr	r3, [r3, #0]
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000074 	.word	0x20000074

08000650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000658:	f7ff ffee 	bl	8000638 <HAL_GetTick>
 800065c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000668:	d005      	beq.n	8000676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <HAL_Delay+0x44>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	461a      	mov	r2, r3
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	4413      	add	r3, r2
 8000674:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000676:	bf00      	nop
 8000678:	f7ff ffde 	bl	8000638 <HAL_GetTick>
 800067c:	4602      	mov	r2, r0
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	429a      	cmp	r2, r3
 8000686:	d8f7      	bhi.n	8000678 <HAL_Delay+0x28>
  {
  }
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000008 	.word	0x20000008

08000698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b4:	4013      	ands	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ca:	4a04      	ldr	r2, [pc, #16]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	60d3      	str	r3, [r2, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <__NVIC_GetPriorityGrouping+0x18>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	f003 0307 	and.w	r3, r3, #7
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070c:	2b00      	cmp	r3, #0
 800070e:	db0a      	blt.n	8000726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	b2da      	uxtb	r2, r3
 8000714:	490c      	ldr	r1, [pc, #48]	; (8000748 <__NVIC_SetPriority+0x4c>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	0112      	lsls	r2, r2, #4
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	440b      	add	r3, r1
 8000720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000724:	e00a      	b.n	800073c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4908      	ldr	r1, [pc, #32]	; (800074c <__NVIC_SetPriority+0x50>)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f003 030f 	and.w	r3, r3, #15
 8000732:	3b04      	subs	r3, #4
 8000734:	0112      	lsls	r2, r2, #4
 8000736:	b2d2      	uxtb	r2, r2
 8000738:	440b      	add	r3, r1
 800073a:	761a      	strb	r2, [r3, #24]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000e100 	.word	0xe000e100
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000750:	b480      	push	{r7}
 8000752:	b089      	sub	sp, #36	; 0x24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	f1c3 0307 	rsb	r3, r3, #7
 800076a:	2b04      	cmp	r3, #4
 800076c:	bf28      	it	cs
 800076e:	2304      	movcs	r3, #4
 8000770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	3304      	adds	r3, #4
 8000776:	2b06      	cmp	r3, #6
 8000778:	d902      	bls.n	8000780 <NVIC_EncodePriority+0x30>
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3b03      	subs	r3, #3
 800077e:	e000      	b.n	8000782 <NVIC_EncodePriority+0x32>
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	f04f 32ff 	mov.w	r2, #4294967295
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
 800078e:	43da      	mvns	r2, r3
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	401a      	ands	r2, r3
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000798:	f04f 31ff 	mov.w	r1, #4294967295
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
 80007a2:	43d9      	mvns	r1, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a8:	4313      	orrs	r3, r2
         );
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3724      	adds	r7, #36	; 0x24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
	...

080007b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007c8:	d301      	bcc.n	80007ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ca:	2301      	movs	r3, #1
 80007cc:	e00f      	b.n	80007ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <SysTick_Config+0x40>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007d6:	210f      	movs	r1, #15
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	f7ff ff8e 	bl	80006fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <SysTick_Config+0x40>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e6:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <SysTick_Config+0x40>)
 80007e8:	2207      	movs	r2, #7
 80007ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	e000e010 	.word	0xe000e010

080007fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ff47 	bl	8000698 <__NVIC_SetPriorityGrouping>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b086      	sub	sp, #24
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
 800081e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000824:	f7ff ff5c 	bl	80006e0 <__NVIC_GetPriorityGrouping>
 8000828:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	68b9      	ldr	r1, [r7, #8]
 800082e:	6978      	ldr	r0, [r7, #20]
 8000830:	f7ff ff8e 	bl	8000750 <NVIC_EncodePriority>
 8000834:	4602      	mov	r2, r0
 8000836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800083a:	4611      	mov	r1, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff5d 	bl	80006fc <__NVIC_SetPriority>
}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ffb0 	bl	80007b8 <SysTick_Config>
 8000858:	4603      	mov	r3, r0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000864:	b480      	push	{r7}
 8000866:	b087      	sub	sp, #28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000872:	e148      	b.n	8000b06 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	2101      	movs	r1, #1
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	fa01 f303 	lsl.w	r3, r1, r3
 8000880:	4013      	ands	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2b00      	cmp	r3, #0
 8000888:	f000 813a 	beq.w	8000b00 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	f003 0303 	and.w	r3, r3, #3
 8000894:	2b01      	cmp	r3, #1
 8000896:	d005      	beq.n	80008a4 <HAL_GPIO_Init+0x40>
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f003 0303 	and.w	r3, r3, #3
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d130      	bne.n	8000906 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	2203      	movs	r2, #3
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	43db      	mvns	r3, r3
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4013      	ands	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	68da      	ldr	r2, [r3, #12]
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008da:	2201      	movs	r2, #1
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43db      	mvns	r3, r3
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4013      	ands	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	091b      	lsrs	r3, r3, #4
 80008f0:	f003 0201 	and.w	r2, r3, #1
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f003 0303 	and.w	r3, r3, #3
 800090e:	2b03      	cmp	r3, #3
 8000910:	d017      	beq.n	8000942 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	2203      	movs	r2, #3
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43db      	mvns	r3, r3
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	4013      	ands	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	689a      	ldr	r2, [r3, #8]
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4313      	orrs	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f003 0303 	and.w	r3, r3, #3
 800094a:	2b02      	cmp	r3, #2
 800094c:	d123      	bne.n	8000996 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	08da      	lsrs	r2, r3, #3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3208      	adds	r2, #8
 8000956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800095a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	220f      	movs	r2, #15
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43db      	mvns	r3, r3
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	4013      	ands	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	691a      	ldr	r2, [r3, #16]
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	f003 0307 	and.w	r3, r3, #7
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	08da      	lsrs	r2, r3, #3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3208      	adds	r2, #8
 8000990:	6939      	ldr	r1, [r7, #16]
 8000992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	2203      	movs	r2, #3
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f003 0203 	and.w	r2, r3, #3
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 8094 	beq.w	8000b00 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d8:	4b52      	ldr	r3, [pc, #328]	; (8000b24 <HAL_GPIO_Init+0x2c0>)
 80009da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009dc:	4a51      	ldr	r2, [pc, #324]	; (8000b24 <HAL_GPIO_Init+0x2c0>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	6613      	str	r3, [r2, #96]	; 0x60
 80009e4:	4b4f      	ldr	r3, [pc, #316]	; (8000b24 <HAL_GPIO_Init+0x2c0>)
 80009e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009f0:	4a4d      	ldr	r2, [pc, #308]	; (8000b28 <HAL_GPIO_Init+0x2c4>)
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	089b      	lsrs	r3, r3, #2
 80009f6:	3302      	adds	r3, #2
 80009f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	f003 0303 	and.w	r3, r3, #3
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	220f      	movs	r2, #15
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a1a:	d00d      	beq.n	8000a38 <HAL_GPIO_Init+0x1d4>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a43      	ldr	r2, [pc, #268]	; (8000b2c <HAL_GPIO_Init+0x2c8>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d007      	beq.n	8000a34 <HAL_GPIO_Init+0x1d0>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a42      	ldr	r2, [pc, #264]	; (8000b30 <HAL_GPIO_Init+0x2cc>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d101      	bne.n	8000a30 <HAL_GPIO_Init+0x1cc>
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	e004      	b.n	8000a3a <HAL_GPIO_Init+0x1d6>
 8000a30:	2307      	movs	r3, #7
 8000a32:	e002      	b.n	8000a3a <HAL_GPIO_Init+0x1d6>
 8000a34:	2301      	movs	r3, #1
 8000a36:	e000      	b.n	8000a3a <HAL_GPIO_Init+0x1d6>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	f002 0203 	and.w	r2, r2, #3
 8000a40:	0092      	lsls	r2, r2, #2
 8000a42:	4093      	lsls	r3, r2
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a4a:	4937      	ldr	r1, [pc, #220]	; (8000b28 <HAL_GPIO_Init+0x2c4>)
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	089b      	lsrs	r3, r3, #2
 8000a50:	3302      	adds	r3, #2
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a58:	4b36      	ldr	r3, [pc, #216]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a7c:	4a2d      	ldr	r2, [pc, #180]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a82:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000aa6:	4a23      	ldr	r2, [pc, #140]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000aac:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d003      	beq.n	8000ad0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ad0:	4a18      	ldr	r2, [pc, #96]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000afa:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	3301      	adds	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	f47f aeaf 	bne.w	8000874 <HAL_GPIO_Init+0x10>
  }
}
 8000b16:	bf00      	nop
 8000b18:	bf00      	nop
 8000b1a:	371c      	adds	r7, #28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40010000 	.word	0x40010000
 8000b2c:	48000400 	.word	0x48000400
 8000b30:	48000800 	.word	0x48000800
 8000b34:	40010400 	.word	0x40010400

08000b38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40007000 	.word	0x40007000

08000b54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b62:	d130      	bne.n	8000bc6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b64:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b70:	d038      	beq.n	8000be4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b7a:	4a1e      	ldr	r2, [pc, #120]	; (8000bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000b82:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2232      	movs	r2, #50	; 0x32
 8000b88:	fb02 f303 	mul.w	r3, r2, r3
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	0c9b      	lsrs	r3, r3, #18
 8000b94:	3301      	adds	r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b98:	e002      	b.n	8000ba0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bac:	d102      	bne.n	8000bb4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1f2      	bne.n	8000b9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bc0:	d110      	bne.n	8000be4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	e00f      	b.n	8000be6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bd2:	d007      	beq.n	8000be4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bdc:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40007000 	.word	0x40007000
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	431bde83 	.word	0x431bde83

08000c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	f000 bc02 	b.w	8001418 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c14:	4b96      	ldr	r3, [pc, #600]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	f003 030c 	and.w	r3, r3, #12
 8000c1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c1e:	4b94      	ldr	r3, [pc, #592]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f003 0310 	and.w	r3, r3, #16
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f000 80e4 	beq.w	8000dfe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d007      	beq.n	8000c4c <HAL_RCC_OscConfig+0x4c>
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	2b0c      	cmp	r3, #12
 8000c40:	f040 808b 	bne.w	8000d5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	f040 8087 	bne.w	8000d5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c4c:	4b88      	ldr	r3, [pc, #544]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d005      	beq.n	8000c64 <HAL_RCC_OscConfig+0x64>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d101      	bne.n	8000c64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e3d9      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a1a      	ldr	r2, [r3, #32]
 8000c68:	4b81      	ldr	r3, [pc, #516]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 0308 	and.w	r3, r3, #8
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d004      	beq.n	8000c7e <HAL_RCC_OscConfig+0x7e>
 8000c74:	4b7e      	ldr	r3, [pc, #504]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c7c:	e005      	b.n	8000c8a <HAL_RCC_OscConfig+0x8a>
 8000c7e:	4b7c      	ldr	r3, [pc, #496]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c84:	091b      	lsrs	r3, r3, #4
 8000c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d223      	bcs.n	8000cd6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a1b      	ldr	r3, [r3, #32]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fd54 	bl	8001740 <RCC_SetFlashLatencyFromMSIRange>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e3ba      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ca2:	4b73      	ldr	r3, [pc, #460]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a72      	ldr	r2, [pc, #456]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	4b70      	ldr	r3, [pc, #448]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a1b      	ldr	r3, [r3, #32]
 8000cba:	496d      	ldr	r1, [pc, #436]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cc0:	4b6b      	ldr	r3, [pc, #428]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	69db      	ldr	r3, [r3, #28]
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	4968      	ldr	r1, [pc, #416]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	604b      	str	r3, [r1, #4]
 8000cd4:	e025      	b.n	8000d22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cd6:	4b66      	ldr	r3, [pc, #408]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a65      	ldr	r2, [pc, #404]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	4b63      	ldr	r3, [pc, #396]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a1b      	ldr	r3, [r3, #32]
 8000cee:	4960      	ldr	r1, [pc, #384]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cf4:	4b5e      	ldr	r3, [pc, #376]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	495b      	ldr	r1, [pc, #364]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000d04:	4313      	orrs	r3, r2
 8000d06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d109      	bne.n	8000d22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6a1b      	ldr	r3, [r3, #32]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fd14 	bl	8001740 <RCC_SetFlashLatencyFromMSIRange>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e37a      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d22:	f000 fc81 	bl	8001628 <HAL_RCC_GetSysClockFreq>
 8000d26:	4602      	mov	r2, r0
 8000d28:	4b51      	ldr	r3, [pc, #324]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	091b      	lsrs	r3, r3, #4
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	4950      	ldr	r1, [pc, #320]	; (8000e74 <HAL_RCC_OscConfig+0x274>)
 8000d34:	5ccb      	ldrb	r3, [r1, r3]
 8000d36:	f003 031f 	and.w	r3, r3, #31
 8000d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d3e:	4a4e      	ldr	r2, [pc, #312]	; (8000e78 <HAL_RCC_OscConfig+0x278>)
 8000d40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d42:	4b4e      	ldr	r3, [pc, #312]	; (8000e7c <HAL_RCC_OscConfig+0x27c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fc26 	bl	8000598 <HAL_InitTick>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d052      	beq.n	8000dfc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	e35e      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d032      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d62:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a42      	ldr	r2, [pc, #264]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d6e:	f7ff fc63 	bl	8000638 <HAL_GetTick>
 8000d72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d74:	e008      	b.n	8000d88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d76:	f7ff fc5f 	bl	8000638 <HAL_GetTick>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d901      	bls.n	8000d88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e347      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d88:	4b39      	ldr	r3, [pc, #228]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0f0      	beq.n	8000d76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d94:	4b36      	ldr	r3, [pc, #216]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a35      	ldr	r2, [pc, #212]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	4b33      	ldr	r3, [pc, #204]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	4930      	ldr	r1, [pc, #192]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000dae:	4313      	orrs	r3, r2
 8000db0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000db2:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	492b      	ldr	r1, [pc, #172]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	604b      	str	r3, [r1, #4]
 8000dc6:	e01a      	b.n	8000dfe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000dc8:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a28      	ldr	r2, [pc, #160]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000dce:	f023 0301 	bic.w	r3, r3, #1
 8000dd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fc30 	bl	8000638 <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ddc:	f7ff fc2c 	bl	8000638 <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e314      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f0      	bne.n	8000ddc <HAL_RCC_OscConfig+0x1dc>
 8000dfa:	e000      	b.n	8000dfe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000dfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d073      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	2b08      	cmp	r3, #8
 8000e0e:	d005      	beq.n	8000e1c <HAL_RCC_OscConfig+0x21c>
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	2b0c      	cmp	r3, #12
 8000e14:	d10e      	bne.n	8000e34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d10b      	bne.n	8000e34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d063      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x2f0>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d15f      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e2f1      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e3c:	d106      	bne.n	8000e4c <HAL_RCC_OscConfig+0x24c>
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e025      	b.n	8000e98 <HAL_RCC_OscConfig+0x298>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e54:	d114      	bne.n	8000e80 <HAL_RCC_OscConfig+0x280>
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a02      	ldr	r2, [pc, #8]	; (8000e70 <HAL_RCC_OscConfig+0x270>)
 8000e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e013      	b.n	8000e98 <HAL_RCC_OscConfig+0x298>
 8000e70:	40021000 	.word	0x40021000
 8000e74:	080023e0 	.word	0x080023e0
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000004 	.word	0x20000004
 8000e80:	4ba0      	ldr	r3, [pc, #640]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a9f      	ldr	r2, [pc, #636]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	4b9d      	ldr	r3, [pc, #628]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a9c      	ldr	r2, [pc, #624]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d013      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fbca 	bl	8000638 <HAL_GetTick>
 8000ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea8:	f7ff fbc6 	bl	8000638 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b64      	cmp	r3, #100	; 0x64
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e2ae      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eba:	4b92      	ldr	r3, [pc, #584]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f0      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x2a8>
 8000ec6:	e014      	b.n	8000ef2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fbb6 	bl	8000638 <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ed0:	f7ff fbb2 	bl	8000638 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b64      	cmp	r3, #100	; 0x64
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e29a      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ee2:	4b88      	ldr	r3, [pc, #544]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1f0      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x2d0>
 8000eee:	e000      	b.n	8000ef2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d060      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d005      	beq.n	8000f10 <HAL_RCC_OscConfig+0x310>
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	2b0c      	cmp	r3, #12
 8000f08:	d119      	bne.n	8000f3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d116      	bne.n	8000f3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f10:	4b7c      	ldr	r3, [pc, #496]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d005      	beq.n	8000f28 <HAL_RCC_OscConfig+0x328>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e277      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f28:	4b76      	ldr	r3, [pc, #472]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	061b      	lsls	r3, r3, #24
 8000f36:	4973      	ldr	r1, [pc, #460]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f3c:	e040      	b.n	8000fc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d023      	beq.n	8000f8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f46:	4b6f      	ldr	r3, [pc, #444]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a6e      	ldr	r2, [pc, #440]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f52:	f7ff fb71 	bl	8000638 <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f5a:	f7ff fb6d 	bl	8000638 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e255      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f6c:	4b65      	ldr	r3, [pc, #404]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f0      	beq.n	8000f5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f78:	4b62      	ldr	r3, [pc, #392]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	061b      	lsls	r3, r3, #24
 8000f86:	495f      	ldr	r1, [pc, #380]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	604b      	str	r3, [r1, #4]
 8000f8c:	e018      	b.n	8000fc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f8e:	4b5d      	ldr	r3, [pc, #372]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a5c      	ldr	r2, [pc, #368]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fb4d 	bl	8000638 <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fa2:	f7ff fb49 	bl	8000638 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e231      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fb4:	4b53      	ldr	r3, [pc, #332]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1f0      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0308 	and.w	r3, r3, #8
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d03c      	beq.n	8001046 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d01c      	beq.n	800100e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fd4:	4b4b      	ldr	r3, [pc, #300]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fda:	4a4a      	ldr	r2, [pc, #296]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fe4:	f7ff fb28 	bl	8000638 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fec:	f7ff fb24 	bl	8000638 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e20c      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ffe:	4b41      	ldr	r3, [pc, #260]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8001000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0ef      	beq.n	8000fec <HAL_RCC_OscConfig+0x3ec>
 800100c:	e01b      	b.n	8001046 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800100e:	4b3d      	ldr	r3, [pc, #244]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8001010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001014:	4a3b      	ldr	r2, [pc, #236]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8001016:	f023 0301 	bic.w	r3, r3, #1
 800101a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800101e:	f7ff fb0b 	bl	8000638 <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001026:	f7ff fb07 	bl	8000638 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e1ef      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001038:	4b32      	ldr	r3, [pc, #200]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 800103a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1ef      	bne.n	8001026 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 80a6 	beq.w	80011a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001058:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 800105a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10d      	bne.n	8001080 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	4b27      	ldr	r3, [pc, #156]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8001066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001068:	4a26      	ldr	r2, [pc, #152]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106e:	6593      	str	r3, [r2, #88]	; 0x58
 8001070:	4b24      	ldr	r3, [pc, #144]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 8001072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800107c:	2301      	movs	r3, #1
 800107e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001080:	4b21      	ldr	r3, [pc, #132]	; (8001108 <HAL_RCC_OscConfig+0x508>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001088:	2b00      	cmp	r3, #0
 800108a:	d118      	bne.n	80010be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800108c:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <HAL_RCC_OscConfig+0x508>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a1d      	ldr	r2, [pc, #116]	; (8001108 <HAL_RCC_OscConfig+0x508>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001096:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001098:	f7ff face 	bl	8000638 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010a0:	f7ff faca 	bl	8000638 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e1b2      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_RCC_OscConfig+0x508>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f0      	beq.n	80010a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d108      	bne.n	80010d8 <HAL_RCC_OscConfig+0x4d8>
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 80010c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010d6:	e029      	b.n	800112c <HAL_RCC_OscConfig+0x52c>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2b05      	cmp	r3, #5
 80010de:	d115      	bne.n	800110c <HAL_RCC_OscConfig+0x50c>
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 80010e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010e6:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 80010f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010f6:	4a03      	ldr	r2, [pc, #12]	; (8001104 <HAL_RCC_OscConfig+0x504>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001100:	e014      	b.n	800112c <HAL_RCC_OscConfig+0x52c>
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000
 8001108:	40007000 	.word	0x40007000
 800110c:	4b9a      	ldr	r3, [pc, #616]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 800110e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001112:	4a99      	ldr	r2, [pc, #612]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 8001114:	f023 0301 	bic.w	r3, r3, #1
 8001118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800111c:	4b96      	ldr	r3, [pc, #600]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 800111e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001122:	4a95      	ldr	r2, [pc, #596]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 8001124:	f023 0304 	bic.w	r3, r3, #4
 8001128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d016      	beq.n	8001162 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001134:	f7ff fa80 	bl	8000638 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800113a:	e00a      	b.n	8001152 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113c:	f7ff fa7c 	bl	8000638 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	f241 3288 	movw	r2, #5000	; 0x1388
 800114a:	4293      	cmp	r3, r2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e162      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001152:	4b89      	ldr	r3, [pc, #548]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 8001154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0ed      	beq.n	800113c <HAL_RCC_OscConfig+0x53c>
 8001160:	e015      	b.n	800118e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001162:	f7ff fa69 	bl	8000638 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001168:	e00a      	b.n	8001180 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800116a:	f7ff fa65 	bl	8000638 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	f241 3288 	movw	r2, #5000	; 0x1388
 8001178:	4293      	cmp	r3, r2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e14b      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001180:	4b7d      	ldr	r3, [pc, #500]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 8001182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1ed      	bne.n	800116a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800118e:	7ffb      	ldrb	r3, [r7, #31]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d105      	bne.n	80011a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001194:	4b78      	ldr	r3, [pc, #480]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 8001196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001198:	4a77      	ldr	r2, [pc, #476]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 800119a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800119e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0320 	and.w	r3, r3, #32
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d03c      	beq.n	8001226 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d01c      	beq.n	80011ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011b4:	4b70      	ldr	r3, [pc, #448]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 80011b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011ba:	4a6f      	ldr	r2, [pc, #444]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c4:	f7ff fa38 	bl	8000638 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011cc:	f7ff fa34 	bl	8000638 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e11c      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011de:	4b66      	ldr	r3, [pc, #408]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 80011e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0ef      	beq.n	80011cc <HAL_RCC_OscConfig+0x5cc>
 80011ec:	e01b      	b.n	8001226 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80011ee:	4b62      	ldr	r3, [pc, #392]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 80011f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011f4:	4a60      	ldr	r2, [pc, #384]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 80011f6:	f023 0301 	bic.w	r3, r3, #1
 80011fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011fe:	f7ff fa1b 	bl	8000638 <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001206:	f7ff fa17 	bl	8000638 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e0ff      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001218:	4b57      	ldr	r3, [pc, #348]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 800121a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1ef      	bne.n	8001206 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 80f3 	beq.w	8001416 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001234:	2b02      	cmp	r3, #2
 8001236:	f040 80c9 	bne.w	80013cc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800123a:	4b4f      	ldr	r3, [pc, #316]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	f003 0203 	and.w	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124a:	429a      	cmp	r2, r3
 800124c:	d12c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	3b01      	subs	r3, #1
 800125a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800125c:	429a      	cmp	r2, r3
 800125e:	d123      	bne.n	80012a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800126c:	429a      	cmp	r2, r3
 800126e:	d11b      	bne.n	80012a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800127c:	429a      	cmp	r2, r3
 800127e:	d113      	bne.n	80012a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800128a:	085b      	lsrs	r3, r3, #1
 800128c:	3b01      	subs	r3, #1
 800128e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001290:	429a      	cmp	r2, r3
 8001292:	d109      	bne.n	80012a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	085b      	lsrs	r3, r3, #1
 80012a0:	3b01      	subs	r3, #1
 80012a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d06b      	beq.n	8001380 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	2b0c      	cmp	r3, #12
 80012ac:	d062      	beq.n	8001374 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012ae:	4b32      	ldr	r3, [pc, #200]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e0ac      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012be:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a2d      	ldr	r2, [pc, #180]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 80012c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012ca:	f7ff f9b5 	bl	8000638 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d2:	f7ff f9b1 	bl	8000638 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e099      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012e4:	4b24      	ldr	r3, [pc, #144]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f0      	bne.n	80012d2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012f0:	4b21      	ldr	r3, [pc, #132]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	4b21      	ldr	r3, [pc, #132]	; (800137c <HAL_RCC_OscConfig+0x77c>)
 80012f6:	4013      	ands	r3, r2
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001300:	3a01      	subs	r2, #1
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	4311      	orrs	r1, r2
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800130a:	0212      	lsls	r2, r2, #8
 800130c:	4311      	orrs	r1, r2
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001312:	0852      	lsrs	r2, r2, #1
 8001314:	3a01      	subs	r2, #1
 8001316:	0552      	lsls	r2, r2, #21
 8001318:	4311      	orrs	r1, r2
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800131e:	0852      	lsrs	r2, r2, #1
 8001320:	3a01      	subs	r2, #1
 8001322:	0652      	lsls	r2, r2, #25
 8001324:	4311      	orrs	r1, r2
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800132a:	06d2      	lsls	r2, r2, #27
 800132c:	430a      	orrs	r2, r1
 800132e:	4912      	ldr	r1, [pc, #72]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 8001330:	4313      	orrs	r3, r2
 8001332:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 800133a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800133e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	4a0c      	ldr	r2, [pc, #48]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 8001346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800134a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800134c:	f7ff f974 	bl	8000638 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001354:	f7ff f970 	bl	8000638 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e058      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <HAL_RCC_OscConfig+0x778>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001372:	e050      	b.n	8001416 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e04f      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
 8001378:	40021000 	.word	0x40021000
 800137c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001380:	4b27      	ldr	r3, [pc, #156]	; (8001420 <HAL_RCC_OscConfig+0x820>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d144      	bne.n	8001416 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <HAL_RCC_OscConfig+0x820>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a23      	ldr	r2, [pc, #140]	; (8001420 <HAL_RCC_OscConfig+0x820>)
 8001392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001396:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <HAL_RCC_OscConfig+0x820>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	4a20      	ldr	r2, [pc, #128]	; (8001420 <HAL_RCC_OscConfig+0x820>)
 800139e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013a4:	f7ff f948 	bl	8000638 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff f944 	bl	8000638 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e02c      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <HAL_RCC_OscConfig+0x820>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x7ac>
 80013ca:	e024      	b.n	8001416 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	d01f      	beq.n	8001412 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <HAL_RCC_OscConfig+0x820>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a12      	ldr	r2, [pc, #72]	; (8001420 <HAL_RCC_OscConfig+0x820>)
 80013d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013de:	f7ff f92b 	bl	8000638 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e6:	f7ff f927 	bl	8000638 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e00f      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_RCC_OscConfig+0x820>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f0      	bne.n	80013e6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_RCC_OscConfig+0x820>)
 8001406:	68da      	ldr	r2, [r3, #12]
 8001408:	4905      	ldr	r1, [pc, #20]	; (8001420 <HAL_RCC_OscConfig+0x820>)
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_RCC_OscConfig+0x824>)
 800140c:	4013      	ands	r3, r2
 800140e:	60cb      	str	r3, [r1, #12]
 8001410:	e001      	b.n	8001416 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3720      	adds	r7, #32
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40021000 	.word	0x40021000
 8001424:	feeefffc 	.word	0xfeeefffc

08001428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0e7      	b.n	800160c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800143c:	4b75      	ldr	r3, [pc, #468]	; (8001614 <HAL_RCC_ClockConfig+0x1ec>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	d910      	bls.n	800146c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144a:	4b72      	ldr	r3, [pc, #456]	; (8001614 <HAL_RCC_ClockConfig+0x1ec>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 0207 	bic.w	r2, r3, #7
 8001452:	4970      	ldr	r1, [pc, #448]	; (8001614 <HAL_RCC_ClockConfig+0x1ec>)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800145a:	4b6e      	ldr	r3, [pc, #440]	; (8001614 <HAL_RCC_ClockConfig+0x1ec>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	d001      	beq.n	800146c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0cf      	b.n	800160c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d010      	beq.n	800149a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	4b66      	ldr	r3, [pc, #408]	; (8001618 <HAL_RCC_ClockConfig+0x1f0>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001484:	429a      	cmp	r2, r3
 8001486:	d908      	bls.n	800149a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001488:	4b63      	ldr	r3, [pc, #396]	; (8001618 <HAL_RCC_ClockConfig+0x1f0>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4960      	ldr	r1, [pc, #384]	; (8001618 <HAL_RCC_ClockConfig+0x1f0>)
 8001496:	4313      	orrs	r3, r2
 8001498:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d04c      	beq.n	8001540 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d107      	bne.n	80014be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ae:	4b5a      	ldr	r3, [pc, #360]	; (8001618 <HAL_RCC_ClockConfig+0x1f0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d121      	bne.n	80014fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e0a6      	b.n	800160c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d107      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c6:	4b54      	ldr	r3, [pc, #336]	; (8001618 <HAL_RCC_ClockConfig+0x1f0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d115      	bne.n	80014fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e09a      	b.n	800160c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d107      	bne.n	80014ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014de:	4b4e      	ldr	r3, [pc, #312]	; (8001618 <HAL_RCC_ClockConfig+0x1f0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d109      	bne.n	80014fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e08e      	b.n	800160c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ee:	4b4a      	ldr	r3, [pc, #296]	; (8001618 <HAL_RCC_ClockConfig+0x1f0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e086      	b.n	800160c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014fe:	4b46      	ldr	r3, [pc, #280]	; (8001618 <HAL_RCC_ClockConfig+0x1f0>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f023 0203 	bic.w	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4943      	ldr	r1, [pc, #268]	; (8001618 <HAL_RCC_ClockConfig+0x1f0>)
 800150c:	4313      	orrs	r3, r2
 800150e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001510:	f7ff f892 	bl	8000638 <HAL_GetTick>
 8001514:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001516:	e00a      	b.n	800152e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001518:	f7ff f88e 	bl	8000638 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f241 3288 	movw	r2, #5000	; 0x1388
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e06e      	b.n	800160c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152e:	4b3a      	ldr	r3, [pc, #232]	; (8001618 <HAL_RCC_ClockConfig+0x1f0>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 020c 	and.w	r2, r3, #12
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	429a      	cmp	r2, r3
 800153e:	d1eb      	bne.n	8001518 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d010      	beq.n	800156e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	4b31      	ldr	r3, [pc, #196]	; (8001618 <HAL_RCC_ClockConfig+0x1f0>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001558:	429a      	cmp	r2, r3
 800155a:	d208      	bcs.n	800156e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800155c:	4b2e      	ldr	r3, [pc, #184]	; (8001618 <HAL_RCC_ClockConfig+0x1f0>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	492b      	ldr	r1, [pc, #172]	; (8001618 <HAL_RCC_ClockConfig+0x1f0>)
 800156a:	4313      	orrs	r3, r2
 800156c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800156e:	4b29      	ldr	r3, [pc, #164]	; (8001614 <HAL_RCC_ClockConfig+0x1ec>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d210      	bcs.n	800159e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <HAL_RCC_ClockConfig+0x1ec>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f023 0207 	bic.w	r2, r3, #7
 8001584:	4923      	ldr	r1, [pc, #140]	; (8001614 <HAL_RCC_ClockConfig+0x1ec>)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	4313      	orrs	r3, r2
 800158a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158c:	4b21      	ldr	r3, [pc, #132]	; (8001614 <HAL_RCC_ClockConfig+0x1ec>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d001      	beq.n	800159e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e036      	b.n	800160c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d008      	beq.n	80015bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <HAL_RCC_ClockConfig+0x1f0>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	4918      	ldr	r1, [pc, #96]	; (8001618 <HAL_RCC_ClockConfig+0x1f0>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d009      	beq.n	80015dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_RCC_ClockConfig+0x1f0>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	4910      	ldr	r1, [pc, #64]	; (8001618 <HAL_RCC_ClockConfig+0x1f0>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015dc:	f000 f824 	bl	8001628 <HAL_RCC_GetSysClockFreq>
 80015e0:	4602      	mov	r2, r0
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <HAL_RCC_ClockConfig+0x1f0>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	091b      	lsrs	r3, r3, #4
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	490b      	ldr	r1, [pc, #44]	; (800161c <HAL_RCC_ClockConfig+0x1f4>)
 80015ee:	5ccb      	ldrb	r3, [r1, r3]
 80015f0:	f003 031f 	and.w	r3, r3, #31
 80015f4:	fa22 f303 	lsr.w	r3, r2, r3
 80015f8:	4a09      	ldr	r2, [pc, #36]	; (8001620 <HAL_RCC_ClockConfig+0x1f8>)
 80015fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_RCC_ClockConfig+0x1fc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ffc9 	bl	8000598 <HAL_InitTick>
 8001606:	4603      	mov	r3, r0
 8001608:	72fb      	strb	r3, [r7, #11]

  return status;
 800160a:	7afb      	ldrb	r3, [r7, #11]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40022000 	.word	0x40022000
 8001618:	40021000 	.word	0x40021000
 800161c:	080023e0 	.word	0x080023e0
 8001620:	20000000 	.word	0x20000000
 8001624:	20000004 	.word	0x20000004

08001628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001636:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <HAL_RCC_GetSysClockFreq+0x108>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001640:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <HAL_RCC_GetSysClockFreq+0x108>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x34>
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	2b0c      	cmp	r3, #12
 8001654:	d121      	bne.n	800169a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d11e      	bne.n	800169a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800165c:	4b34      	ldr	r3, [pc, #208]	; (8001730 <HAL_RCC_GetSysClockFreq+0x108>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b00      	cmp	r3, #0
 8001666:	d107      	bne.n	8001678 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001668:	4b31      	ldr	r3, [pc, #196]	; (8001730 <HAL_RCC_GetSysClockFreq+0x108>)
 800166a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166e:	0a1b      	lsrs	r3, r3, #8
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	e005      	b.n	8001684 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001678:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <HAL_RCC_GetSysClockFreq+0x108>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001684:	4a2b      	ldr	r2, [pc, #172]	; (8001734 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10d      	bne.n	80016b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001698:	e00a      	b.n	80016b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	2b04      	cmp	r3, #4
 800169e:	d102      	bne.n	80016a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <HAL_RCC_GetSysClockFreq+0x110>)
 80016a2:	61bb      	str	r3, [r7, #24]
 80016a4:	e004      	b.n	80016b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016ac:	4b23      	ldr	r3, [pc, #140]	; (800173c <HAL_RCC_GetSysClockFreq+0x114>)
 80016ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	2b0c      	cmp	r3, #12
 80016b4:	d134      	bne.n	8001720 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <HAL_RCC_GetSysClockFreq+0x108>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d003      	beq.n	80016ce <HAL_RCC_GetSysClockFreq+0xa6>
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d003      	beq.n	80016d4 <HAL_RCC_GetSysClockFreq+0xac>
 80016cc:	e005      	b.n	80016da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <HAL_RCC_GetSysClockFreq+0x110>)
 80016d0:	617b      	str	r3, [r7, #20]
      break;
 80016d2:	e005      	b.n	80016e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_RCC_GetSysClockFreq+0x114>)
 80016d6:	617b      	str	r3, [r7, #20]
      break;
 80016d8:	e002      	b.n	80016e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	617b      	str	r3, [r7, #20]
      break;
 80016de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <HAL_RCC_GetSysClockFreq+0x108>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	3301      	adds	r3, #1
 80016ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_RCC_GetSysClockFreq+0x108>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	0a1b      	lsrs	r3, r3, #8
 80016f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	fb03 f202 	mul.w	r2, r3, r2
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	fbb2 f3f3 	udiv	r3, r2, r3
 8001704:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_RCC_GetSysClockFreq+0x108>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	0e5b      	lsrs	r3, r3, #25
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	3301      	adds	r3, #1
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001720:	69bb      	ldr	r3, [r7, #24]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3724      	adds	r7, #36	; 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	080023f0 	.word	0x080023f0
 8001738:	00f42400 	.word	0x00f42400
 800173c:	007a1200 	.word	0x007a1200

08001740 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800174c:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800174e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001758:	f7ff f9ee 	bl	8000b38 <HAL_PWREx_GetVoltageRange>
 800175c:	6178      	str	r0, [r7, #20]
 800175e:	e014      	b.n	800178a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001760:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001764:	4a24      	ldr	r2, [pc, #144]	; (80017f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176a:	6593      	str	r3, [r2, #88]	; 0x58
 800176c:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001778:	f7ff f9de 	bl	8000b38 <HAL_PWREx_GetVoltageRange>
 800177c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001788:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001790:	d10b      	bne.n	80017aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b80      	cmp	r3, #128	; 0x80
 8001796:	d919      	bls.n	80017cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2ba0      	cmp	r3, #160	; 0xa0
 800179c:	d902      	bls.n	80017a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800179e:	2302      	movs	r3, #2
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	e013      	b.n	80017cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017a4:	2301      	movs	r3, #1
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	e010      	b.n	80017cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b80      	cmp	r3, #128	; 0x80
 80017ae:	d902      	bls.n	80017b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017b0:	2303      	movs	r3, #3
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	e00a      	b.n	80017cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b80      	cmp	r3, #128	; 0x80
 80017ba:	d102      	bne.n	80017c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017bc:	2302      	movs	r3, #2
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	e004      	b.n	80017cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b70      	cmp	r3, #112	; 0x70
 80017c6:	d101      	bne.n	80017cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017c8:	2301      	movs	r3, #1
 80017ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f023 0207 	bic.w	r2, r3, #7
 80017d4:	4909      	ldr	r1, [pc, #36]	; (80017fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d001      	beq.n	80017ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40022000 	.word	0x40022000

08001800 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e049      	b.n	80018a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d106      	bne.n	800182c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7fe fde6 	bl	80003f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2202      	movs	r2, #2
 8001830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3304      	adds	r3, #4
 800183c:	4619      	mov	r1, r3
 800183e:	4610      	mov	r0, r2
 8001840:	f000 fa28 	bl	8001c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <HAL_TIM_PWM_Start+0x24>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	bf14      	ite	ne
 80018cc:	2301      	movne	r3, #1
 80018ce:	2300      	moveq	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	e03c      	b.n	800194e <HAL_TIM_PWM_Start+0x9e>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d109      	bne.n	80018ee <HAL_TIM_PWM_Start+0x3e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	bf14      	ite	ne
 80018e6:	2301      	movne	r3, #1
 80018e8:	2300      	moveq	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	e02f      	b.n	800194e <HAL_TIM_PWM_Start+0x9e>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d109      	bne.n	8001908 <HAL_TIM_PWM_Start+0x58>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	bf14      	ite	ne
 8001900:	2301      	movne	r3, #1
 8001902:	2300      	moveq	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	e022      	b.n	800194e <HAL_TIM_PWM_Start+0x9e>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	2b0c      	cmp	r3, #12
 800190c:	d109      	bne.n	8001922 <HAL_TIM_PWM_Start+0x72>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b01      	cmp	r3, #1
 8001918:	bf14      	ite	ne
 800191a:	2301      	movne	r3, #1
 800191c:	2300      	moveq	r3, #0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	e015      	b.n	800194e <HAL_TIM_PWM_Start+0x9e>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b10      	cmp	r3, #16
 8001926:	d109      	bne.n	800193c <HAL_TIM_PWM_Start+0x8c>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b01      	cmp	r3, #1
 8001932:	bf14      	ite	ne
 8001934:	2301      	movne	r3, #1
 8001936:	2300      	moveq	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	e008      	b.n	800194e <HAL_TIM_PWM_Start+0x9e>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b01      	cmp	r3, #1
 8001946:	bf14      	ite	ne
 8001948:	2301      	movne	r3, #1
 800194a:	2300      	moveq	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e07e      	b.n	8001a54 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d104      	bne.n	8001966 <HAL_TIM_PWM_Start+0xb6>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001964:	e023      	b.n	80019ae <HAL_TIM_PWM_Start+0xfe>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	2b04      	cmp	r3, #4
 800196a:	d104      	bne.n	8001976 <HAL_TIM_PWM_Start+0xc6>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001974:	e01b      	b.n	80019ae <HAL_TIM_PWM_Start+0xfe>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2b08      	cmp	r3, #8
 800197a:	d104      	bne.n	8001986 <HAL_TIM_PWM_Start+0xd6>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001984:	e013      	b.n	80019ae <HAL_TIM_PWM_Start+0xfe>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2b0c      	cmp	r3, #12
 800198a:	d104      	bne.n	8001996 <HAL_TIM_PWM_Start+0xe6>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001994:	e00b      	b.n	80019ae <HAL_TIM_PWM_Start+0xfe>
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	2b10      	cmp	r3, #16
 800199a:	d104      	bne.n	80019a6 <HAL_TIM_PWM_Start+0xf6>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2202      	movs	r2, #2
 80019a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019a4:	e003      	b.n	80019ae <HAL_TIM_PWM_Start+0xfe>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2202      	movs	r2, #2
 80019aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2201      	movs	r2, #1
 80019b4:	6839      	ldr	r1, [r7, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fc4e 	bl	8002258 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <HAL_TIM_PWM_Start+0x1ac>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d009      	beq.n	80019da <HAL_TIM_PWM_Start+0x12a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a25      	ldr	r2, [pc, #148]	; (8001a60 <HAL_TIM_PWM_Start+0x1b0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d004      	beq.n	80019da <HAL_TIM_PWM_Start+0x12a>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <HAL_TIM_PWM_Start+0x1b4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_TIM_PWM_Start+0x12e>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <HAL_TIM_PWM_Start+0x130>
 80019de:	2300      	movs	r3, #0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d007      	beq.n	80019f4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a18      	ldr	r2, [pc, #96]	; (8001a5c <HAL_TIM_PWM_Start+0x1ac>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d009      	beq.n	8001a12 <HAL_TIM_PWM_Start+0x162>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a06:	d004      	beq.n	8001a12 <HAL_TIM_PWM_Start+0x162>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a14      	ldr	r2, [pc, #80]	; (8001a60 <HAL_TIM_PWM_Start+0x1b0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d115      	bne.n	8001a3e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_TIM_PWM_Start+0x1b8>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b06      	cmp	r3, #6
 8001a22:	d015      	beq.n	8001a50 <HAL_TIM_PWM_Start+0x1a0>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2a:	d011      	beq.n	8001a50 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a3c:	e008      	b.n	8001a50 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0201 	orr.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e000      	b.n	8001a52 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40012c00 	.word	0x40012c00
 8001a60:	40014000 	.word	0x40014000
 8001a64:	40014400 	.word	0x40014400
 8001a68:	00010007 	.word	0x00010007

08001a6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e0ff      	b.n	8001c8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b14      	cmp	r3, #20
 8001a96:	f200 80f0 	bhi.w	8001c7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001a9a:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa0:	08001af5 	.word	0x08001af5
 8001aa4:	08001c7b 	.word	0x08001c7b
 8001aa8:	08001c7b 	.word	0x08001c7b
 8001aac:	08001c7b 	.word	0x08001c7b
 8001ab0:	08001b35 	.word	0x08001b35
 8001ab4:	08001c7b 	.word	0x08001c7b
 8001ab8:	08001c7b 	.word	0x08001c7b
 8001abc:	08001c7b 	.word	0x08001c7b
 8001ac0:	08001b77 	.word	0x08001b77
 8001ac4:	08001c7b 	.word	0x08001c7b
 8001ac8:	08001c7b 	.word	0x08001c7b
 8001acc:	08001c7b 	.word	0x08001c7b
 8001ad0:	08001bb7 	.word	0x08001bb7
 8001ad4:	08001c7b 	.word	0x08001c7b
 8001ad8:	08001c7b 	.word	0x08001c7b
 8001adc:	08001c7b 	.word	0x08001c7b
 8001ae0:	08001bf9 	.word	0x08001bf9
 8001ae4:	08001c7b 	.word	0x08001c7b
 8001ae8:	08001c7b 	.word	0x08001c7b
 8001aec:	08001c7b 	.word	0x08001c7b
 8001af0:	08001c39 	.word	0x08001c39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 f92e 	bl	8001d5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0208 	orr.w	r2, r2, #8
 8001b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	699a      	ldr	r2, [r3, #24]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0204 	bic.w	r2, r2, #4
 8001b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6999      	ldr	r1, [r3, #24]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	619a      	str	r2, [r3, #24]
      break;
 8001b32:	e0a5      	b.n	8001c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f98a 	bl	8001e54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699a      	ldr	r2, [r3, #24]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699a      	ldr	r2, [r3, #24]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6999      	ldr	r1, [r3, #24]
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	021a      	lsls	r2, r3, #8
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	619a      	str	r2, [r3, #24]
      break;
 8001b74:	e084      	b.n	8001c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68b9      	ldr	r1, [r7, #8]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 f9e3 	bl	8001f48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	69da      	ldr	r2, [r3, #28]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0208 	orr.w	r2, r2, #8
 8001b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	69da      	ldr	r2, [r3, #28]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0204 	bic.w	r2, r2, #4
 8001ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	69d9      	ldr	r1, [r3, #28]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	61da      	str	r2, [r3, #28]
      break;
 8001bb4:	e064      	b.n	8001c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68b9      	ldr	r1, [r7, #8]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f000 fa3b 	bl	8002038 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	69da      	ldr	r2, [r3, #28]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	69da      	ldr	r2, [r3, #28]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	69d9      	ldr	r1, [r3, #28]
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	021a      	lsls	r2, r3, #8
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	61da      	str	r2, [r3, #28]
      break;
 8001bf6:	e043      	b.n	8001c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 fa78 	bl	80020f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0208 	orr.w	r2, r2, #8
 8001c12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0204 	bic.w	r2, r2, #4
 8001c22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	691a      	ldr	r2, [r3, #16]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001c36:	e023      	b.n	8001c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 fab0 	bl	80021a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	021a      	lsls	r2, r3, #8
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001c78:	e002      	b.n	8001c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8001c7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop

08001c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a2a      	ldr	r2, [pc, #168]	; (8001d50 <TIM_Base_SetConfig+0xbc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d003      	beq.n	8001cb4 <TIM_Base_SetConfig+0x20>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb2:	d108      	bne.n	8001cc6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a21      	ldr	r2, [pc, #132]	; (8001d50 <TIM_Base_SetConfig+0xbc>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00b      	beq.n	8001ce6 <TIM_Base_SetConfig+0x52>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd4:	d007      	beq.n	8001ce6 <TIM_Base_SetConfig+0x52>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <TIM_Base_SetConfig+0xc0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d003      	beq.n	8001ce6 <TIM_Base_SetConfig+0x52>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a1d      	ldr	r2, [pc, #116]	; (8001d58 <TIM_Base_SetConfig+0xc4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d108      	bne.n	8001cf8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a0c      	ldr	r2, [pc, #48]	; (8001d50 <TIM_Base_SetConfig+0xbc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d007      	beq.n	8001d34 <TIM_Base_SetConfig+0xa0>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <TIM_Base_SetConfig+0xc0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d003      	beq.n	8001d34 <TIM_Base_SetConfig+0xa0>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <TIM_Base_SetConfig+0xc4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d103      	bne.n	8001d3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	615a      	str	r2, [r3, #20]
}
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40012c00 	.word	0x40012c00
 8001d54:	40014000 	.word	0x40014000
 8001d58:	40014400 	.word	0x40014400

08001d5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	f023 0201 	bic.w	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f023 0303 	bic.w	r3, r3, #3
 8001d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f023 0302 	bic.w	r3, r3, #2
 8001da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a24      	ldr	r2, [pc, #144]	; (8001e48 <TIM_OC1_SetConfig+0xec>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d007      	beq.n	8001dcc <TIM_OC1_SetConfig+0x70>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a23      	ldr	r2, [pc, #140]	; (8001e4c <TIM_OC1_SetConfig+0xf0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d003      	beq.n	8001dcc <TIM_OC1_SetConfig+0x70>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <TIM_OC1_SetConfig+0xf4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d10c      	bne.n	8001de6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f023 0308 	bic.w	r3, r3, #8
 8001dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f023 0304 	bic.w	r3, r3, #4
 8001de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <TIM_OC1_SetConfig+0xec>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d007      	beq.n	8001dfe <TIM_OC1_SetConfig+0xa2>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a16      	ldr	r2, [pc, #88]	; (8001e4c <TIM_OC1_SetConfig+0xf0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d003      	beq.n	8001dfe <TIM_OC1_SetConfig+0xa2>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <TIM_OC1_SetConfig+0xf4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d111      	bne.n	8001e22 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	621a      	str	r2, [r3, #32]
}
 8001e3c:	bf00      	nop
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	40012c00 	.word	0x40012c00
 8001e4c:	40014000 	.word	0x40014000
 8001e50:	40014400 	.word	0x40014400

08001e54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	f023 0210 	bic.w	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f023 0320 	bic.w	r3, r3, #32
 8001ea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a22      	ldr	r2, [pc, #136]	; (8001f3c <TIM_OC2_SetConfig+0xe8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d10d      	bne.n	8001ed4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ed2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <TIM_OC2_SetConfig+0xe8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d007      	beq.n	8001eec <TIM_OC2_SetConfig+0x98>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <TIM_OC2_SetConfig+0xec>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d003      	beq.n	8001eec <TIM_OC2_SetConfig+0x98>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a17      	ldr	r2, [pc, #92]	; (8001f44 <TIM_OC2_SetConfig+0xf0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d113      	bne.n	8001f14 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	621a      	str	r2, [r3, #32]
}
 8001f2e:	bf00      	nop
 8001f30:	371c      	adds	r7, #28
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40012c00 	.word	0x40012c00
 8001f40:	40014000 	.word	0x40014000
 8001f44:	40014400 	.word	0x40014400

08001f48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 0303 	bic.w	r3, r3, #3
 8001f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a21      	ldr	r2, [pc, #132]	; (800202c <TIM_OC3_SetConfig+0xe4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d10d      	bne.n	8001fc6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a18      	ldr	r2, [pc, #96]	; (800202c <TIM_OC3_SetConfig+0xe4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d007      	beq.n	8001fde <TIM_OC3_SetConfig+0x96>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a17      	ldr	r2, [pc, #92]	; (8002030 <TIM_OC3_SetConfig+0xe8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d003      	beq.n	8001fde <TIM_OC3_SetConfig+0x96>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a16      	ldr	r2, [pc, #88]	; (8002034 <TIM_OC3_SetConfig+0xec>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d113      	bne.n	8002006 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	621a      	str	r2, [r3, #32]
}
 8002020:	bf00      	nop
 8002022:	371c      	adds	r7, #28
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	40012c00 	.word	0x40012c00
 8002030:	40014000 	.word	0x40014000
 8002034:	40014400 	.word	0x40014400

08002038 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800206a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	021b      	lsls	r3, r3, #8
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	031b      	lsls	r3, r3, #12
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <TIM_OC4_SetConfig+0xb0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d007      	beq.n	80020ac <TIM_OC4_SetConfig+0x74>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a13      	ldr	r2, [pc, #76]	; (80020ec <TIM_OC4_SetConfig+0xb4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d003      	beq.n	80020ac <TIM_OC4_SetConfig+0x74>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <TIM_OC4_SetConfig+0xb8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d109      	bne.n	80020c0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	019b      	lsls	r3, r3, #6
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4313      	orrs	r3, r2
 80020be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	621a      	str	r2, [r3, #32]
}
 80020da:	bf00      	nop
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40012c00 	.word	0x40012c00
 80020ec:	40014000 	.word	0x40014000
 80020f0:	40014400 	.word	0x40014400

080020f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002138:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	041b      	lsls	r3, r3, #16
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a13      	ldr	r2, [pc, #76]	; (8002198 <TIM_OC5_SetConfig+0xa4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d007      	beq.n	800215e <TIM_OC5_SetConfig+0x6a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a12      	ldr	r2, [pc, #72]	; (800219c <TIM_OC5_SetConfig+0xa8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d003      	beq.n	800215e <TIM_OC5_SetConfig+0x6a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a11      	ldr	r2, [pc, #68]	; (80021a0 <TIM_OC5_SetConfig+0xac>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d109      	bne.n	8002172 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002164:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	4313      	orrs	r3, r2
 8002170:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	621a      	str	r2, [r3, #32]
}
 800218c:	bf00      	nop
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	40012c00 	.word	0x40012c00
 800219c:	40014000 	.word	0x40014000
 80021a0:	40014400 	.word	0x40014400

080021a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	051b      	lsls	r3, r3, #20
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a14      	ldr	r2, [pc, #80]	; (800224c <TIM_OC6_SetConfig+0xa8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d007      	beq.n	8002210 <TIM_OC6_SetConfig+0x6c>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a13      	ldr	r2, [pc, #76]	; (8002250 <TIM_OC6_SetConfig+0xac>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d003      	beq.n	8002210 <TIM_OC6_SetConfig+0x6c>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a12      	ldr	r2, [pc, #72]	; (8002254 <TIM_OC6_SetConfig+0xb0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d109      	bne.n	8002224 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002216:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	029b      	lsls	r3, r3, #10
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4313      	orrs	r3, r2
 8002222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	621a      	str	r2, [r3, #32]
}
 800223e:	bf00      	nop
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40012c00 	.word	0x40012c00
 8002250:	40014000 	.word	0x40014000
 8002254:	40014400 	.word	0x40014400

08002258 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2201      	movs	r2, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a1a      	ldr	r2, [r3, #32]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	43db      	mvns	r3, r3
 800227a:	401a      	ands	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a1a      	ldr	r2, [r3, #32]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	431a      	orrs	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	621a      	str	r2, [r3, #32]
}
 8002296:	bf00      	nop
 8002298:	371c      	adds	r7, #28
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e04f      	b.n	800235c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a21      	ldr	r2, [pc, #132]	; (8002368 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d108      	bne.n	80022f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80022ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a14      	ldr	r2, [pc, #80]	; (8002368 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d009      	beq.n	8002330 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002324:	d004      	beq.n	8002330 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a10      	ldr	r2, [pc, #64]	; (800236c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d10c      	bne.n	800234a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002336:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	4313      	orrs	r3, r2
 8002340:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	40012c00 	.word	0x40012c00
 800236c:	40014000 	.word	0x40014000

08002370 <__libc_init_array>:
 8002370:	b570      	push	{r4, r5, r6, lr}
 8002372:	4d0d      	ldr	r5, [pc, #52]	; (80023a8 <__libc_init_array+0x38>)
 8002374:	4c0d      	ldr	r4, [pc, #52]	; (80023ac <__libc_init_array+0x3c>)
 8002376:	1b64      	subs	r4, r4, r5
 8002378:	10a4      	asrs	r4, r4, #2
 800237a:	2600      	movs	r6, #0
 800237c:	42a6      	cmp	r6, r4
 800237e:	d109      	bne.n	8002394 <__libc_init_array+0x24>
 8002380:	4d0b      	ldr	r5, [pc, #44]	; (80023b0 <__libc_init_array+0x40>)
 8002382:	4c0c      	ldr	r4, [pc, #48]	; (80023b4 <__libc_init_array+0x44>)
 8002384:	f000 f820 	bl	80023c8 <_init>
 8002388:	1b64      	subs	r4, r4, r5
 800238a:	10a4      	asrs	r4, r4, #2
 800238c:	2600      	movs	r6, #0
 800238e:	42a6      	cmp	r6, r4
 8002390:	d105      	bne.n	800239e <__libc_init_array+0x2e>
 8002392:	bd70      	pop	{r4, r5, r6, pc}
 8002394:	f855 3b04 	ldr.w	r3, [r5], #4
 8002398:	4798      	blx	r3
 800239a:	3601      	adds	r6, #1
 800239c:	e7ee      	b.n	800237c <__libc_init_array+0xc>
 800239e:	f855 3b04 	ldr.w	r3, [r5], #4
 80023a2:	4798      	blx	r3
 80023a4:	3601      	adds	r6, #1
 80023a6:	e7f2      	b.n	800238e <__libc_init_array+0x1e>
 80023a8:	08002420 	.word	0x08002420
 80023ac:	08002420 	.word	0x08002420
 80023b0:	08002420 	.word	0x08002420
 80023b4:	08002424 	.word	0x08002424

080023b8 <memset>:
 80023b8:	4402      	add	r2, r0
 80023ba:	4603      	mov	r3, r0
 80023bc:	4293      	cmp	r3, r2
 80023be:	d100      	bne.n	80023c2 <memset+0xa>
 80023c0:	4770      	bx	lr
 80023c2:	f803 1b01 	strb.w	r1, [r3], #1
 80023c6:	e7f9      	b.n	80023bc <memset+0x4>

080023c8 <_init>:
 80023c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ca:	bf00      	nop
 80023cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ce:	bc08      	pop	{r3}
 80023d0:	469e      	mov	lr, r3
 80023d2:	4770      	bx	lr

080023d4 <_fini>:
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d6:	bf00      	nop
 80023d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023da:	bc08      	pop	{r3}
 80023dc:	469e      	mov	lr, r3
 80023de:	4770      	bx	lr
