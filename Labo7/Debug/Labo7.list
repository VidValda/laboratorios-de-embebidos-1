
Labo7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035f4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003780  08003780  00013780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f8  080037f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080037f8  080037f8  000137f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003800  08003800  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003800  08003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003804  08003804  00013804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08003814  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003814  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae9a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000196a  00000000  00000000  0002aed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002c840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  0002d148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f94b  00000000  00000000  0002d9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c316  00000000  00000000  0004d303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bfcb3  00000000  00000000  00059619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001192cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002408  00000000  00000000  0011931c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003768 	.word	0x08003768

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003768 	.word	0x08003768

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fa3d 	bl	8000952 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f81c 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8b6 	bl	800064c <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 f88e 	bl	8000600 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f85c 	bl	80005a0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_DMA(&huart2, data, 4);
 80004e8:	2204      	movs	r2, #4
 80004ea:	4907      	ldr	r1, [pc, #28]	; (8000508 <main+0x38>)
 80004ec:	4807      	ldr	r0, [pc, #28]	; (800050c <main+0x3c>)
 80004ee:	f002 fa33 	bl	8002958 <HAL_UART_Receive_DMA>
 // while(!dataArrived);
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Gaby, Vid lleguen temprano por fa!!!\n\r", strlen("Gaby, Vid lleguen temprano por fa!!!\n\r"));
 80004f2:	2226      	movs	r2, #38	; 0x26
 80004f4:	4906      	ldr	r1, [pc, #24]	; (8000510 <main+0x40>)
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <main+0x3c>)
 80004f8:	f002 f99e 	bl	8002838 <HAL_UART_Transmit_DMA>
	  HAL_Delay(1000);
 80004fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000500:	f000 fa9c 	bl	8000a3c <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Gaby, Vid lleguen temprano por fa!!!\n\r", strlen("Gaby, Vid lleguen temprano por fa!!!\n\r"));
 8000504:	e7f5      	b.n	80004f2 <main+0x22>
 8000506:	bf00      	nop
 8000508:	2000013c 	.word	0x2000013c
 800050c:	20000028 	.word	0x20000028
 8000510:	08003780 	.word	0x08003780

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b096      	sub	sp, #88	; 0x58
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	2244      	movs	r2, #68	; 0x44
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f003 f918 	bl	8003758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000536:	f44f 7000 	mov.w	r0, #512	; 0x200
 800053a:	f000 ff25 	bl	8001388 <HAL_PWREx_ControlVoltageScaling>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000544:	f000 f8ae 	bl	80006a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000548:	2310      	movs	r3, #16
 800054a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800054c:	2301      	movs	r3, #1
 800054e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000554:	2360      	movs	r3, #96	; 0x60
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000558:	2300      	movs	r3, #0
 800055a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	4618      	mov	r0, r3
 8000562:	f000 ff67 	bl	8001434 <HAL_RCC_OscConfig>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800056c:	f000 f89a 	bl	80006a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	230f      	movs	r3, #15
 8000572:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f001 fb67 	bl	8001c5c <HAL_RCC_ClockConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000594:	f000 f886 	bl	80006a4 <Error_Handler>
  }
}
 8000598:	bf00      	nop
 800059a:	3758      	adds	r7, #88	; 0x58
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005a6:	4a15      	ldr	r2, [pc, #84]	; (80005fc <MX_USART2_UART_Init+0x5c>)
 80005a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005c6:	220c      	movs	r2, #12
 80005c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005de:	2200      	movs	r2, #0
 80005e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005e4:	f002 f846 	bl	8002674 <HAL_UART_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005ee:	f000 f859 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000028 	.word	0x20000028
 80005fc:	40004400 	.word	0x40004400

08000600 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_DMA_Init+0x48>)
 8000608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800060a:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <MX_DMA_Init+0x48>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6493      	str	r3, [r2, #72]	; 0x48
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <MX_DMA_Init+0x48>)
 8000614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2100      	movs	r1, #0
 8000622:	2010      	movs	r0, #16
 8000624:	f000 fb09 	bl	8000c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000628:	2010      	movs	r0, #16
 800062a:	f000 fb22 	bl	8000c72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	2011      	movs	r0, #17
 8000634:	f000 fb01 	bl	8000c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000638:	2011      	movs	r0, #17
 800063a:	f000 fb1a 	bl	8000c72 <HAL_NVIC_EnableIRQ>

}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_GPIO_Init+0x2c>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	4a08      	ldr	r2, [pc, #32]	; (8000678 <MX_GPIO_Init+0x2c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_GPIO_Init+0x2c>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40021000 	.word	0x40021000

0800067c <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)"hola", strlen("hola"), HAL_MAX_DELAY);
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
 8000688:	2204      	movs	r2, #4
 800068a:	4904      	ldr	r1, [pc, #16]	; (800069c <HAL_UART_RxHalfCpltCallback+0x20>)
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <HAL_UART_RxHalfCpltCallback+0x24>)
 800068e:	f002 f83f 	bl	8002710 <HAL_UART_Transmit>
	//HAL_UART_Transmit_IT(&huart2, (uint8_t*)"mundo\n\r", strlen("mundo\n\r"));
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	080037a8 	.word	0x080037a8
 80006a0:	20000028 	.word	0x20000028

080006a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_MspInit+0x44>)
 80006bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006be:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <HAL_MspInit+0x44>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6613      	str	r3, [r2, #96]	; 0x60
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <HAL_MspInit+0x44>)
 80006c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_MspInit+0x44>)
 80006d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <HAL_MspInit+0x44>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	6593      	str	r3, [r2, #88]	; 0x58
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_MspInit+0x44>)
 80006e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000

080006fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b09e      	sub	sp, #120	; 0x78
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	2254      	movs	r2, #84	; 0x54
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f003 f81b 	bl	8003758 <memset>
  if(huart->Instance==USART2)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a48      	ldr	r2, [pc, #288]	; (8000848 <HAL_UART_MspInit+0x14c>)
 8000728:	4293      	cmp	r3, r2
 800072a:	f040 8089 	bne.w	8000840 <HAL_UART_MspInit+0x144>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800072e:	2302      	movs	r3, #2
 8000730:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000732:	2300      	movs	r3, #0
 8000734:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fcb2 	bl	80020a4 <HAL_RCCEx_PeriphCLKConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000746:	f7ff ffad 	bl	80006a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800074a:	4b40      	ldr	r3, [pc, #256]	; (800084c <HAL_UART_MspInit+0x150>)
 800074c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074e:	4a3f      	ldr	r2, [pc, #252]	; (800084c <HAL_UART_MspInit+0x150>)
 8000750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000754:	6593      	str	r3, [r2, #88]	; 0x58
 8000756:	4b3d      	ldr	r3, [pc, #244]	; (800084c <HAL_UART_MspInit+0x150>)
 8000758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800075a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b3a      	ldr	r3, [pc, #232]	; (800084c <HAL_UART_MspInit+0x150>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a39      	ldr	r2, [pc, #228]	; (800084c <HAL_UART_MspInit+0x150>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b37      	ldr	r3, [pc, #220]	; (800084c <HAL_UART_MspInit+0x150>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800077a:	230c      	movs	r3, #12
 800077c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800078a:	2307      	movs	r3, #7
 800078c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000792:	4619      	mov	r1, r3
 8000794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000798:	f000 fc7e 	bl	8001098 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800079c:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <HAL_UART_MspInit+0x154>)
 800079e:	4a2d      	ldr	r2, [pc, #180]	; (8000854 <HAL_UART_MspInit+0x158>)
 80007a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80007a2:	4b2b      	ldr	r3, [pc, #172]	; (8000850 <HAL_UART_MspInit+0x154>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <HAL_UART_MspInit+0x154>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ae:	4b28      	ldr	r3, [pc, #160]	; (8000850 <HAL_UART_MspInit+0x154>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007b4:	4b26      	ldr	r3, [pc, #152]	; (8000850 <HAL_UART_MspInit+0x154>)
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <HAL_UART_MspInit+0x154>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007c0:	4b23      	ldr	r3, [pc, #140]	; (8000850 <HAL_UART_MspInit+0x154>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80007c6:	4b22      	ldr	r3, [pc, #136]	; (8000850 <HAL_UART_MspInit+0x154>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007cc:	4b20      	ldr	r3, [pc, #128]	; (8000850 <HAL_UART_MspInit+0x154>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80007d2:	481f      	ldr	r0, [pc, #124]	; (8000850 <HAL_UART_MspInit+0x154>)
 80007d4:	f000 fa68 	bl	8000ca8 <HAL_DMA_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80007de:	f7ff ff61 	bl	80006a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a1a      	ldr	r2, [pc, #104]	; (8000850 <HAL_UART_MspInit+0x154>)
 80007e6:	671a      	str	r2, [r3, #112]	; 0x70
 80007e8:	4a19      	ldr	r2, [pc, #100]	; (8000850 <HAL_UART_MspInit+0x154>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <HAL_UART_MspInit+0x15c>)
 80007f0:	4a1a      	ldr	r2, [pc, #104]	; (800085c <HAL_UART_MspInit+0x160>)
 80007f2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <HAL_UART_MspInit+0x15c>)
 80007f6:	2202      	movs	r2, #2
 80007f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <HAL_UART_MspInit+0x15c>)
 80007fc:	2210      	movs	r2, #16
 80007fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <HAL_UART_MspInit+0x15c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <HAL_UART_MspInit+0x15c>)
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_UART_MspInit+0x15c>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <HAL_UART_MspInit+0x15c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <HAL_UART_MspInit+0x15c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <HAL_UART_MspInit+0x15c>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <HAL_UART_MspInit+0x15c>)
 8000826:	f000 fa3f 	bl	8000ca8 <HAL_DMA_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8000830:	f7ff ff38 	bl	80006a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_UART_MspInit+0x15c>)
 8000838:	66da      	str	r2, [r3, #108]	; 0x6c
 800083a:	4a07      	ldr	r2, [pc, #28]	; (8000858 <HAL_UART_MspInit+0x15c>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000840:	bf00      	nop
 8000842:	3778      	adds	r7, #120	; 0x78
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40004400 	.word	0x40004400
 800084c:	40021000 	.word	0x40021000
 8000850:	200000ac 	.word	0x200000ac
 8000854:	4002006c 	.word	0x4002006c
 8000858:	200000f4 	.word	0x200000f4
 800085c:	40020080 	.word	0x40020080

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <NMI_Handler+0x4>

08000866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <MemManage_Handler+0x4>

08000872 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <UsageFault_Handler+0x4>

0800087e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ac:	f000 f8a6 	bl	80009fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <DMA1_Channel6_IRQHandler+0x10>)
 80008ba:	f000 fb0d 	bl	8000ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000ac 	.word	0x200000ac

080008c8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <DMA1_Channel7_IRQHandler+0x10>)
 80008ce:	f000 fb03 	bl	8000ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000f4 	.word	0x200000f4

080008dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <SystemInit+0x20>)
 80008e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <SystemInit+0x20>)
 80008e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000938 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000904:	f7ff ffea 	bl	80008dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <LoopForever+0x6>)
  ldr r1, =_edata
 800090a:	490d      	ldr	r1, [pc, #52]	; (8000940 <LoopForever+0xa>)
  ldr r2, =_sidata
 800090c:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <LoopForever+0xe>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000920:	4c0a      	ldr	r4, [pc, #40]	; (800094c <LoopForever+0x16>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092e:	f002 feef 	bl	8003710 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000932:	f7ff fdcd 	bl	80004d0 <main>

08000936 <LoopForever>:

LoopForever:
    b LoopForever
 8000936:	e7fe      	b.n	8000936 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000938:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800093c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000940:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000944:	08003808 	.word	0x08003808
  ldr r2, =_sbss
 8000948:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800094c:	20000144 	.word	0x20000144

08000950 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000950:	e7fe      	b.n	8000950 <ADC1_IRQHandler>

08000952 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000958:	2300      	movs	r3, #0
 800095a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095c:	2003      	movs	r0, #3
 800095e:	f000 f961 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000962:	200f      	movs	r0, #15
 8000964:	f000 f80e 	bl	8000984 <HAL_InitTick>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d002      	beq.n	8000974 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	71fb      	strb	r3, [r7, #7]
 8000972:	e001      	b.n	8000978 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000974:	f7ff fe9e 	bl	80006b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000978:	79fb      	ldrb	r3, [r7, #7]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800098c:	2300      	movs	r3, #0
 800098e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <HAL_InitTick+0x6c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d023      	beq.n	80009e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <HAL_InitTick+0x70>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <HAL_InitTick+0x6c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f96d 	bl	8000c8e <HAL_SYSTICK_Config>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d10f      	bne.n	80009da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d809      	bhi.n	80009d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c0:	2200      	movs	r2, #0
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f000 f937 	bl	8000c3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_InitTick+0x74>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	e007      	b.n	80009e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	e004      	b.n	80009e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	73fb      	strb	r3, [r7, #15]
 80009de:	e001      	b.n	80009e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000004 	.word	0x20000004

080009fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_IncTick+0x20>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_IncTick+0x24>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_IncTick+0x24>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000140 	.word	0x20000140

08000a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <HAL_GetTick+0x14>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000140 	.word	0x20000140

08000a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a44:	f7ff ffee 	bl	8000a24 <HAL_GetTick>
 8000a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a54:	d005      	beq.n	8000a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <HAL_Delay+0x44>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4413      	add	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a62:	bf00      	nop
 8000a64:	f7ff ffde 	bl	8000a24 <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d8f7      	bhi.n	8000a64 <HAL_Delay+0x28>
  {
  }
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000008 	.word	0x20000008

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db0b      	blt.n	8000b12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	4907      	ldr	r1, [pc, #28]	; (8000b20 <__NVIC_EnableIRQ+0x38>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	210f      	movs	r1, #15
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f7ff ff8e 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff29 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c4c:	f7ff ff3e 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	6978      	ldr	r0, [r7, #20]
 8000c58:	f7ff ff8e 	bl	8000b78 <NVIC_EncodePriority>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff5d 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff31 	bl	8000ae8 <__NVIC_EnableIRQ>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ffa2 	bl	8000be0 <SysTick_Config>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e098      	b.n	8000dec <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b4d      	ldr	r3, [pc, #308]	; (8000df8 <HAL_DMA_Init+0x150>)
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d80f      	bhi.n	8000ce6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4b4b      	ldr	r3, [pc, #300]	; (8000dfc <HAL_DMA_Init+0x154>)
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a4b      	ldr	r2, [pc, #300]	; (8000e00 <HAL_DMA_Init+0x158>)
 8000cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	009a      	lsls	r2, r3, #2
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a48      	ldr	r2, [pc, #288]	; (8000e04 <HAL_DMA_Init+0x15c>)
 8000ce2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ce4:	e00e      	b.n	8000d04 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b46      	ldr	r3, [pc, #280]	; (8000e08 <HAL_DMA_Init+0x160>)
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a43      	ldr	r2, [pc, #268]	; (8000e00 <HAL_DMA_Init+0x158>)
 8000cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf6:	091b      	lsrs	r3, r3, #4
 8000cf8:	009a      	lsls	r2, r3, #2
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a42      	ldr	r2, [pc, #264]	; (8000e0c <HAL_DMA_Init+0x164>)
 8000d02:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2202      	movs	r2, #2
 8000d08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a1b      	ldr	r3, [r3, #32]
 8000d46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d5e:	d039      	beq.n	8000dd4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	4a27      	ldr	r2, [pc, #156]	; (8000e04 <HAL_DMA_Init+0x15c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d11a      	bne.n	8000da0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000d6a:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <HAL_DMA_Init+0x168>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f003 031c 	and.w	r3, r3, #28
 8000d76:	210f      	movs	r1, #15
 8000d78:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	4924      	ldr	r1, [pc, #144]	; (8000e10 <HAL_DMA_Init+0x168>)
 8000d80:	4013      	ands	r3, r2
 8000d82:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000d84:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <HAL_DMA_Init+0x168>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6859      	ldr	r1, [r3, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d90:	f003 031c 	and.w	r3, r3, #28
 8000d94:	fa01 f303 	lsl.w	r3, r1, r3
 8000d98:	491d      	ldr	r1, [pc, #116]	; (8000e10 <HAL_DMA_Init+0x168>)
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	600b      	str	r3, [r1, #0]
 8000d9e:	e019      	b.n	8000dd4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000da0:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <HAL_DMA_Init+0x16c>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da8:	f003 031c 	and.w	r3, r3, #28
 8000dac:	210f      	movs	r1, #15
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	4917      	ldr	r1, [pc, #92]	; (8000e14 <HAL_DMA_Init+0x16c>)
 8000db6:	4013      	ands	r3, r2
 8000db8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000dba:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <HAL_DMA_Init+0x16c>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6859      	ldr	r1, [r3, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	f003 031c 	and.w	r3, r3, #28
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	4911      	ldr	r1, [pc, #68]	; (8000e14 <HAL_DMA_Init+0x16c>)
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	40020407 	.word	0x40020407
 8000dfc:	bffdfff8 	.word	0xbffdfff8
 8000e00:	cccccccd 	.word	0xcccccccd
 8000e04:	40020000 	.word	0x40020000
 8000e08:	bffdfbf8 	.word	0xbffdfbf8
 8000e0c:	40020400 	.word	0x40020400
 8000e10:	400200a8 	.word	0x400200a8
 8000e14:	400204a8 	.word	0x400204a8

08000e18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d101      	bne.n	8000e38 <HAL_DMA_Start_IT+0x20>
 8000e34:	2302      	movs	r3, #2
 8000e36:	e04b      	b.n	8000ed0 <HAL_DMA_Start_IT+0xb8>
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d13a      	bne.n	8000ec2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2202      	movs	r2, #2
 8000e50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2200      	movs	r2, #0
 8000e58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 0201 	bic.w	r2, r2, #1
 8000e68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	68b9      	ldr	r1, [r7, #8]
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f000 f8e0 	bl	8001036 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d008      	beq.n	8000e90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f042 020e 	orr.w	r2, r2, #14
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	e00f      	b.n	8000eb0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0204 	bic.w	r2, r2, #4
 8000e9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 020a 	orr.w	r2, r2, #10
 8000eae:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f042 0201 	orr.w	r2, r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	e005      	b.n	8000ece <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef4:	f003 031c 	and.w	r3, r3, #28
 8000ef8:	2204      	movs	r2, #4
 8000efa:	409a      	lsls	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4013      	ands	r3, r2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d026      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x7a>
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d021      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0320 	and.w	r3, r3, #32
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d107      	bne.n	8000f2c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0204 	bic.w	r2, r2, #4
 8000f2a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f30:	f003 021c 	and.w	r2, r3, #28
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	2104      	movs	r1, #4
 8000f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d071      	beq.n	800102c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000f50:	e06c      	b.n	800102c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f003 031c 	and.w	r3, r3, #28
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	409a      	lsls	r2, r3
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4013      	ands	r3, r2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d02e      	beq.n	8000fc4 <HAL_DMA_IRQHandler+0xec>
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d029      	beq.n	8000fc4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0320 	and.w	r3, r3, #32
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10b      	bne.n	8000f96 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 020a 	bic.w	r2, r2, #10
 8000f8c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2201      	movs	r2, #1
 8000f92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	f003 021c 	and.w	r2, r3, #28
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	2102      	movs	r1, #2
 8000fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d038      	beq.n	800102c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fc2:	e033      	b.n	800102c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc8:	f003 031c 	and.w	r3, r3, #28
 8000fcc:	2208      	movs	r2, #8
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d02a      	beq.n	800102e <HAL_DMA_IRQHandler+0x156>
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d025      	beq.n	800102e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 020e 	bic.w	r2, r2, #14
 8000ff0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f003 021c 	and.w	r2, r3, #28
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	2101      	movs	r1, #1
 8001000:	fa01 f202 	lsl.w	r2, r1, r2
 8001004:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2201      	movs	r2, #1
 8001010:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800102c:	bf00      	nop
 800102e:	bf00      	nop
}
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001036:	b480      	push	{r7}
 8001038:	b085      	sub	sp, #20
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001048:	f003 021c 	and.w	r2, r3, #28
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	2101      	movs	r1, #1
 8001052:	fa01 f202 	lsl.w	r2, r1, r2
 8001056:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	2b10      	cmp	r3, #16
 8001066:	d108      	bne.n	800107a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001078:	e007      	b.n	800108a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	60da      	str	r2, [r3, #12]
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a6:	e148      	b.n	800133a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	4013      	ands	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 813a 	beq.w	8001334 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d005      	beq.n	80010d8 <HAL_GPIO_Init+0x40>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d130      	bne.n	800113a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	68da      	ldr	r2, [r3, #12]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800110e:	2201      	movs	r2, #1
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	091b      	lsrs	r3, r3, #4
 8001124:	f003 0201 	and.w	r2, r3, #1
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b03      	cmp	r3, #3
 8001144:	d017      	beq.n	8001176 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d123      	bne.n	80011ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3208      	adds	r2, #8
 800118a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	08da      	lsrs	r2, r3, #3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3208      	adds	r2, #8
 80011c4:	6939      	ldr	r1, [r7, #16]
 80011c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	2203      	movs	r2, #3
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0203 	and.w	r2, r3, #3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 8094 	beq.w	8001334 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120c:	4b52      	ldr	r3, [pc, #328]	; (8001358 <HAL_GPIO_Init+0x2c0>)
 800120e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001210:	4a51      	ldr	r2, [pc, #324]	; (8001358 <HAL_GPIO_Init+0x2c0>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6613      	str	r3, [r2, #96]	; 0x60
 8001218:	4b4f      	ldr	r3, [pc, #316]	; (8001358 <HAL_GPIO_Init+0x2c0>)
 800121a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001224:	4a4d      	ldr	r2, [pc, #308]	; (800135c <HAL_GPIO_Init+0x2c4>)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	220f      	movs	r2, #15
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800124e:	d00d      	beq.n	800126c <HAL_GPIO_Init+0x1d4>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a43      	ldr	r2, [pc, #268]	; (8001360 <HAL_GPIO_Init+0x2c8>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d007      	beq.n	8001268 <HAL_GPIO_Init+0x1d0>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a42      	ldr	r2, [pc, #264]	; (8001364 <HAL_GPIO_Init+0x2cc>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d101      	bne.n	8001264 <HAL_GPIO_Init+0x1cc>
 8001260:	2302      	movs	r3, #2
 8001262:	e004      	b.n	800126e <HAL_GPIO_Init+0x1d6>
 8001264:	2307      	movs	r3, #7
 8001266:	e002      	b.n	800126e <HAL_GPIO_Init+0x1d6>
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <HAL_GPIO_Init+0x1d6>
 800126c:	2300      	movs	r3, #0
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	f002 0203 	and.w	r2, r2, #3
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	4093      	lsls	r3, r2
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800127e:	4937      	ldr	r1, [pc, #220]	; (800135c <HAL_GPIO_Init+0x2c4>)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3302      	adds	r3, #2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43db      	mvns	r3, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012b0:	4a2d      	ldr	r2, [pc, #180]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012b6:	4b2c      	ldr	r3, [pc, #176]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012da:	4a23      	ldr	r2, [pc, #140]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001304:	4a18      	ldr	r2, [pc, #96]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	3301      	adds	r3, #1
 8001338:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	f47f aeaf 	bne.w	80010a8 <HAL_GPIO_Init+0x10>
  }
}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000
 8001360:	48000400 	.word	0x48000400
 8001364:	48000800 	.word	0x48000800
 8001368:	40010400 	.word	0x40010400

0800136c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_PWREx_GetVoltageRange+0x18>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40007000 	.word	0x40007000

08001388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001396:	d130      	bne.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001398:	4b23      	ldr	r3, [pc, #140]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a4:	d038      	beq.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013ae:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2232      	movs	r2, #50	; 0x32
 80013bc:	fb02 f303 	mul.w	r3, r2, r3
 80013c0:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0c9b      	lsrs	r3, r3, #18
 80013c8:	3301      	adds	r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013cc:	e002      	b.n	80013d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e0:	d102      	bne.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f2      	bne.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f4:	d110      	bne.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e00f      	b.n	800141a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001406:	d007      	beq.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001410:	4a05      	ldr	r2, [pc, #20]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001416:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40007000 	.word	0x40007000
 800142c:	20000000 	.word	0x20000000
 8001430:	431bde83 	.word	0x431bde83

08001434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	f000 bc02 	b.w	8001c4c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001448:	4b96      	ldr	r3, [pc, #600]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001452:	4b94      	ldr	r3, [pc, #592]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80e4 	beq.w	8001632 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d007      	beq.n	8001480 <HAL_RCC_OscConfig+0x4c>
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2b0c      	cmp	r3, #12
 8001474:	f040 808b 	bne.w	800158e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b01      	cmp	r3, #1
 800147c:	f040 8087 	bne.w	800158e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001480:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_OscConfig+0x64>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e3d9      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1a      	ldr	r2, [r3, #32]
 800149c:	4b81      	ldr	r3, [pc, #516]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d004      	beq.n	80014b2 <HAL_RCC_OscConfig+0x7e>
 80014a8:	4b7e      	ldr	r3, [pc, #504]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014b0:	e005      	b.n	80014be <HAL_RCC_OscConfig+0x8a>
 80014b2:	4b7c      	ldr	r3, [pc, #496]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014be:	4293      	cmp	r3, r2
 80014c0:	d223      	bcs.n	800150a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fd8c 	bl	8001fe4 <RCC_SetFlashLatencyFromMSIRange>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e3ba      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d6:	4b73      	ldr	r3, [pc, #460]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a72      	ldr	r2, [pc, #456]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b70      	ldr	r3, [pc, #448]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	496d      	ldr	r1, [pc, #436]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f4:	4b6b      	ldr	r3, [pc, #428]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	4968      	ldr	r1, [pc, #416]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
 8001508:	e025      	b.n	8001556 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800150a:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a65      	ldr	r2, [pc, #404]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b63      	ldr	r3, [pc, #396]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4960      	ldr	r1, [pc, #384]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001528:	4b5e      	ldr	r3, [pc, #376]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	495b      	ldr	r1, [pc, #364]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d109      	bne.n	8001556 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fd4c 	bl	8001fe4 <RCC_SetFlashLatencyFromMSIRange>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e37a      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001556:	f000 fc81 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 800155a:	4602      	mov	r2, r0
 800155c:	4b51      	ldr	r3, [pc, #324]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	4950      	ldr	r1, [pc, #320]	; (80016a8 <HAL_RCC_OscConfig+0x274>)
 8001568:	5ccb      	ldrb	r3, [r1, r3]
 800156a:	f003 031f 	and.w	r3, r3, #31
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a4e      	ldr	r2, [pc, #312]	; (80016ac <HAL_RCC_OscConfig+0x278>)
 8001574:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001576:	4b4e      	ldr	r3, [pc, #312]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fa02 	bl	8000984 <HAL_InitTick>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d052      	beq.n	8001630 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	e35e      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d032      	beq.n	80015fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001596:	4b43      	ldr	r3, [pc, #268]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a42      	ldr	r2, [pc, #264]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fa3f 	bl	8000a24 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015aa:	f7ff fa3b 	bl	8000a24 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e347      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015bc:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c8:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a35      	ldr	r2, [pc, #212]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4930      	ldr	r1, [pc, #192]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e6:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	492b      	ldr	r1, [pc, #172]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
 80015fa:	e01a      	b.n	8001632 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015fc:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a28      	ldr	r2, [pc, #160]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001608:	f7ff fa0c 	bl	8000a24 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001610:	f7ff fa08 	bl	8000a24 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e314      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x1dc>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001630:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d073      	beq.n	8001726 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2b08      	cmp	r3, #8
 8001642:	d005      	beq.n	8001650 <HAL_RCC_OscConfig+0x21c>
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2b0c      	cmp	r3, #12
 8001648:	d10e      	bne.n	8001668 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b03      	cmp	r3, #3
 800164e:	d10b      	bne.n	8001668 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d063      	beq.n	8001724 <HAL_RCC_OscConfig+0x2f0>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d15f      	bne.n	8001724 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e2f1      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001670:	d106      	bne.n	8001680 <HAL_RCC_OscConfig+0x24c>
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e025      	b.n	80016cc <HAL_RCC_OscConfig+0x298>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001688:	d114      	bne.n	80016b4 <HAL_RCC_OscConfig+0x280>
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a02      	ldr	r2, [pc, #8]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e013      	b.n	80016cc <HAL_RCC_OscConfig+0x298>
 80016a4:	40021000 	.word	0x40021000
 80016a8:	080037b0 	.word	0x080037b0
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000004 	.word	0x20000004
 80016b4:	4ba0      	ldr	r3, [pc, #640]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a9f      	ldr	r2, [pc, #636]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b9d      	ldr	r3, [pc, #628]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a9c      	ldr	r2, [pc, #624]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff f9a6 	bl	8000a24 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff f9a2 	bl	8000a24 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e2ae      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ee:	4b92      	ldr	r3, [pc, #584]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x2a8>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff f992 	bl	8000a24 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff f98e 	bl	8000a24 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e29a      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001716:	4b88      	ldr	r3, [pc, #544]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x2d0>
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d060      	beq.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	2b04      	cmp	r3, #4
 8001736:	d005      	beq.n	8001744 <HAL_RCC_OscConfig+0x310>
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d119      	bne.n	8001772 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d116      	bne.n	8001772 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001744:	4b7c      	ldr	r3, [pc, #496]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x328>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e277      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b76      	ldr	r3, [pc, #472]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	4973      	ldr	r1, [pc, #460]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001770:	e040      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d023      	beq.n	80017c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177a:	4b6f      	ldr	r3, [pc, #444]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a6e      	ldr	r2, [pc, #440]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff f94d 	bl	8000a24 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff f949 	bl	8000a24 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e255      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a0:	4b65      	ldr	r3, [pc, #404]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ac:	4b62      	ldr	r3, [pc, #392]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	061b      	lsls	r3, r3, #24
 80017ba:	495f      	ldr	r1, [pc, #380]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
 80017c0:	e018      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c2:	4b5d      	ldr	r3, [pc, #372]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5c      	ldr	r2, [pc, #368]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff f929 	bl	8000a24 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d6:	f7ff f925 	bl	8000a24 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e231      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e8:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d03c      	beq.n	800187a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d01c      	beq.n	8001842 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001808:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800180a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800180e:	4a4a      	ldr	r2, [pc, #296]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff f904 	bl	8000a24 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff f900 	bl	8000a24 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e20c      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0ef      	beq.n	8001820 <HAL_RCC_OscConfig+0x3ec>
 8001840:	e01b      	b.n	800187a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001842:	4b3d      	ldr	r3, [pc, #244]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001848:	4a3b      	ldr	r2, [pc, #236]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff f8e7 	bl	8000a24 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff f8e3 	bl	8000a24 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e1ef      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800186c:	4b32      	ldr	r3, [pc, #200]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800186e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ef      	bne.n	800185a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80a6 	beq.w	80019d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10d      	bne.n	80018b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	4a26      	ldr	r2, [pc, #152]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800189e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a2:	6593      	str	r3, [r2, #88]	; 0x58
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b0:	2301      	movs	r3, #1
 80018b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b4:	4b21      	ldr	r3, [pc, #132]	; (800193c <HAL_RCC_OscConfig+0x508>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d118      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <HAL_RCC_OscConfig+0x508>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_RCC_OscConfig+0x508>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018cc:	f7ff f8aa 	bl	8000a24 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d4:	f7ff f8a6 	bl	8000a24 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e1b2      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_RCC_OscConfig+0x508>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d108      	bne.n	800190c <HAL_RCC_OscConfig+0x4d8>
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80018fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001900:	4a0d      	ldr	r2, [pc, #52]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800190a:	e029      	b.n	8001960 <HAL_RCC_OscConfig+0x52c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b05      	cmp	r3, #5
 8001912:	d115      	bne.n	8001940 <HAL_RCC_OscConfig+0x50c>
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191a:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192a:	4a03      	ldr	r2, [pc, #12]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001934:	e014      	b.n	8001960 <HAL_RCC_OscConfig+0x52c>
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	40007000 	.word	0x40007000
 8001940:	4b9a      	ldr	r3, [pc, #616]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001946:	4a99      	ldr	r2, [pc, #612]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001950:	4b96      	ldr	r3, [pc, #600]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001956:	4a95      	ldr	r2, [pc, #596]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001958:	f023 0304 	bic.w	r3, r3, #4
 800195c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d016      	beq.n	8001996 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001968:	f7ff f85c 	bl	8000a24 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800196e:	e00a      	b.n	8001986 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001970:	f7ff f858 	bl	8000a24 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	; 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e162      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001986:	4b89      	ldr	r3, [pc, #548]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0ed      	beq.n	8001970 <HAL_RCC_OscConfig+0x53c>
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001996:	f7ff f845 	bl	8000a24 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7ff f841 	bl	8000a24 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e14b      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b4:	4b7d      	ldr	r3, [pc, #500]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1ed      	bne.n	800199e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c2:	7ffb      	ldrb	r3, [r7, #31]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c8:	4b78      	ldr	r3, [pc, #480]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019cc:	4a77      	ldr	r2, [pc, #476]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 80019ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d03c      	beq.n	8001a5a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01c      	beq.n	8001a22 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019e8:	4b70      	ldr	r3, [pc, #448]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 80019ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ee:	4a6f      	ldr	r2, [pc, #444]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f8:	f7ff f814 	bl	8000a24 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a00:	f7ff f810 	bl	8000a24 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e11c      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a12:	4b66      	ldr	r3, [pc, #408]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ef      	beq.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
 8001a20:	e01b      	b.n	8001a5a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a22:	4b62      	ldr	r3, [pc, #392]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a28:	4a60      	ldr	r2, [pc, #384]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a2a:	f023 0301 	bic.w	r3, r3, #1
 8001a2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a32:	f7fe fff7 	bl	8000a24 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a3a:	f7fe fff3 	bl	8000a24 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e0ff      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a4c:	4b57      	ldr	r3, [pc, #348]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ef      	bne.n	8001a3a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80f3 	beq.w	8001c4a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	f040 80c9 	bne.w	8001c00 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a6e:	4b4f      	ldr	r3, [pc, #316]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 0203 	and.w	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d12c      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d123      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d11b      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d113      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abe:	085b      	lsrs	r3, r3, #1
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d109      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	085b      	lsrs	r3, r3, #1
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d06b      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d062      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ae2:	4b32      	ldr	r3, [pc, #200]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e0ac      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001af2:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a2d      	ldr	r2, [pc, #180]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001af8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001afc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001afe:	f7fe ff91 	bl	8000a24 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b06:	f7fe ff8d 	bl	8000a24 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e099      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b18:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b24:	4b21      	ldr	r3, [pc, #132]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_RCC_OscConfig+0x77c>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b34:	3a01      	subs	r2, #1
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	4311      	orrs	r1, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b3e:	0212      	lsls	r2, r2, #8
 8001b40:	4311      	orrs	r1, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b46:	0852      	lsrs	r2, r2, #1
 8001b48:	3a01      	subs	r2, #1
 8001b4a:	0552      	lsls	r2, r2, #21
 8001b4c:	4311      	orrs	r1, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b52:	0852      	lsrs	r2, r2, #1
 8001b54:	3a01      	subs	r2, #1
 8001b56:	0652      	lsls	r2, r2, #25
 8001b58:	4311      	orrs	r1, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b5e:	06d2      	lsls	r2, r2, #27
 8001b60:	430a      	orrs	r2, r1
 8001b62:	4912      	ldr	r1, [pc, #72]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b68:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4a0c      	ldr	r2, [pc, #48]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b80:	f7fe ff50 	bl	8000a24 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b88:	f7fe ff4c 	bl	8000a24 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e058      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ba6:	e050      	b.n	8001c4a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e04f      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d144      	bne.n	8001c4a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bd8:	f7fe ff24 	bl	8000a24 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be0:	f7fe ff20 	bl	8000a24 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e02c      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x7ac>
 8001bfe:	e024      	b.n	8001c4a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2b0c      	cmp	r3, #12
 8001c04:	d01f      	beq.n	8001c46 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7fe ff07 	bl	8000a24 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7fe ff03 	bl	8000a24 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e00f      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	4905      	ldr	r1, [pc, #20]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_RCC_OscConfig+0x824>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	60cb      	str	r3, [r1, #12]
 8001c44:	e001      	b.n	8001c4a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3720      	adds	r7, #32
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000
 8001c58:	feeefffc 	.word	0xfeeefffc

08001c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0e7      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c70:	4b75      	ldr	r3, [pc, #468]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d910      	bls.n	8001ca0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b72      	ldr	r3, [pc, #456]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 0207 	bic.w	r2, r3, #7
 8001c86:	4970      	ldr	r1, [pc, #448]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	4b6e      	ldr	r3, [pc, #440]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0cf      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d010      	beq.n	8001cce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	4b66      	ldr	r3, [pc, #408]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d908      	bls.n	8001cce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cbc:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4960      	ldr	r1, [pc, #384]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d04c      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d121      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0a6      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cfa:	4b54      	ldr	r3, [pc, #336]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d115      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e09a      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d12:	4b4e      	ldr	r3, [pc, #312]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e08e      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d22:	4b4a      	ldr	r3, [pc, #296]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e086      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d32:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f023 0203 	bic.w	r2, r3, #3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4943      	ldr	r1, [pc, #268]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d44:	f7fe fe6e 	bl	8000a24 <HAL_GetTick>
 8001d48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4c:	f7fe fe6a 	bl	8000a24 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e06e      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d62:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 020c 	and.w	r2, r3, #12
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d1eb      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d010      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d208      	bcs.n	8001da2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d90:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	492b      	ldr	r1, [pc, #172]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da2:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d210      	bcs.n	8001dd2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db0:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f023 0207 	bic.w	r2, r3, #7
 8001db8:	4923      	ldr	r1, [pc, #140]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc0:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d001      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e036      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d008      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	4918      	ldr	r1, [pc, #96]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d009      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4910      	ldr	r1, [pc, #64]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e10:	f000 f824 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	490b      	ldr	r1, [pc, #44]	; (8001e50 <HAL_RCC_ClockConfig+0x1f4>)
 8001e22:	5ccb      	ldrb	r3, [r1, r3]
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2c:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_RCC_ClockConfig+0x1fc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fda5 	bl	8000984 <HAL_InitTick>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e3e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40022000 	.word	0x40022000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	080037b0 	.word	0x080037b0
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000004 	.word	0x20000004

08001e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e6a:	4b3e      	ldr	r3, [pc, #248]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e74:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x34>
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b0c      	cmp	r3, #12
 8001e88:	d121      	bne.n	8001ece <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d11e      	bne.n	8001ece <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e90:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d107      	bne.n	8001eac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e9c:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	e005      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001eac:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001eb8:	4a2b      	ldr	r2, [pc, #172]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10d      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d102      	bne.n	8001eda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ed6:	61bb      	str	r3, [r7, #24]
 8001ed8:	e004      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ee0:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ee2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d134      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eea:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d003      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0xa6>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d003      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0xac>
 8001f00:	e005      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001f04:	617b      	str	r3, [r7, #20]
      break;
 8001f06:	e005      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f0a:	617b      	str	r3, [r7, #20]
      break;
 8001f0c:	e002      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	617b      	str	r3, [r7, #20]
      break;
 8001f12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	3301      	adds	r3, #1
 8001f20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	fb03 f202 	mul.w	r2, r3, r2
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	0e5b      	lsrs	r3, r3, #25
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	3301      	adds	r3, #1
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f54:	69bb      	ldr	r3, [r7, #24]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3724      	adds	r7, #36	; 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	080037c8 	.word	0x080037c8
 8001f6c:	00f42400 	.word	0x00f42400
 8001f70:	007a1200 	.word	0x007a1200

08001f74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000000 	.word	0x20000000

08001f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f90:	f7ff fff0 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	4904      	ldr	r1, [pc, #16]	; (8001fb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	080037c0 	.word	0x080037c0

08001fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fbc:	f7ff ffda 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	0adb      	lsrs	r3, r3, #11
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	4904      	ldr	r1, [pc, #16]	; (8001fe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fce:	5ccb      	ldrb	r3, [r1, r3]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	080037c0 	.word	0x080037c0

08001fe4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ffc:	f7ff f9b6 	bl	800136c <HAL_PWREx_GetVoltageRange>
 8002000:	6178      	str	r0, [r7, #20]
 8002002:	e014      	b.n	800202e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002004:	4b25      	ldr	r3, [pc, #148]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	4a24      	ldr	r2, [pc, #144]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200e:	6593      	str	r3, [r2, #88]	; 0x58
 8002010:	4b22      	ldr	r3, [pc, #136]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800201c:	f7ff f9a6 	bl	800136c <HAL_PWREx_GetVoltageRange>
 8002020:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002022:	4b1e      	ldr	r3, [pc, #120]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	4a1d      	ldr	r2, [pc, #116]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002034:	d10b      	bne.n	800204e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b80      	cmp	r3, #128	; 0x80
 800203a:	d919      	bls.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2ba0      	cmp	r3, #160	; 0xa0
 8002040:	d902      	bls.n	8002048 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002042:	2302      	movs	r3, #2
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	e013      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002048:	2301      	movs	r3, #1
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	e010      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b80      	cmp	r3, #128	; 0x80
 8002052:	d902      	bls.n	800205a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002054:	2303      	movs	r3, #3
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	e00a      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b80      	cmp	r3, #128	; 0x80
 800205e:	d102      	bne.n	8002066 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002060:	2302      	movs	r3, #2
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	e004      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b70      	cmp	r3, #112	; 0x70
 800206a:	d101      	bne.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800206c:	2301      	movs	r3, #1
 800206e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 0207 	bic.w	r2, r3, #7
 8002078:	4909      	ldr	r1, [pc, #36]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	429a      	cmp	r2, r3
 800208c:	d001      	beq.n	8002092 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	40022000 	.word	0x40022000

080020a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020ac:	2300      	movs	r3, #0
 80020ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020b0:	2300      	movs	r3, #0
 80020b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d031      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020c8:	d01a      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80020ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020ce:	d814      	bhi.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020d8:	d10f      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80020da:	4b5d      	ldr	r3, [pc, #372]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	4a5c      	ldr	r2, [pc, #368]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020e6:	e00c      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f9ce 	bl	8002490 <RCCEx_PLLSAI1_Config>
 80020f4:	4603      	mov	r3, r0
 80020f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020f8:	e003      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	74fb      	strb	r3, [r7, #19]
      break;
 80020fe:	e000      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002102:	7cfb      	ldrb	r3, [r7, #19]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10b      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002108:	4b51      	ldr	r3, [pc, #324]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002116:	494e      	ldr	r1, [pc, #312]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800211e:	e001      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002120:	7cfb      	ldrb	r3, [r7, #19]
 8002122:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 809e 	beq.w	800226e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002136:	4b46      	ldr	r3, [pc, #280]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002146:	2300      	movs	r3, #0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00d      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214c:	4b40      	ldr	r3, [pc, #256]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800214e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002150:	4a3f      	ldr	r2, [pc, #252]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002156:	6593      	str	r3, [r2, #88]	; 0x58
 8002158:	4b3d      	ldr	r3, [pc, #244]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002164:	2301      	movs	r3, #1
 8002166:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002168:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a39      	ldr	r2, [pc, #228]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002172:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002174:	f7fe fc56 	bl	8000a24 <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800217a:	e009      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217c:	f7fe fc52 	bl	8000a24 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d902      	bls.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	74fb      	strb	r3, [r7, #19]
        break;
 800218e:	e005      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002190:	4b30      	ldr	r3, [pc, #192]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ef      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d15a      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021a2:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d01e      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d019      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021ca:	4b21      	ldr	r3, [pc, #132]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d0:	4a1f      	ldr	r2, [pc, #124]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e0:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021ea:	4a19      	ldr	r2, [pc, #100]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d016      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe fc12 	bl	8000a24 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002202:	e00b      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002204:	f7fe fc0e 	bl	8000a24 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d902      	bls.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	74fb      	strb	r3, [r7, #19]
            break;
 800221a:	e006      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0ec      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800222a:	7cfb      	ldrb	r3, [r7, #19]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10b      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223e:	4904      	ldr	r1, [pc, #16]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002246:	e009      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	74bb      	strb	r3, [r7, #18]
 800224c:	e006      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000
 8002254:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800225c:	7c7b      	ldrb	r3, [r7, #17]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d105      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002262:	4b8a      	ldr	r3, [pc, #552]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002266:	4a89      	ldr	r2, [pc, #548]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800227a:	4b84      	ldr	r3, [pc, #528]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002280:	f023 0203 	bic.w	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4980      	ldr	r1, [pc, #512]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800229c:	4b7b      	ldr	r3, [pc, #492]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a2:	f023 020c 	bic.w	r2, r3, #12
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	4978      	ldr	r1, [pc, #480]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022be:	4b73      	ldr	r3, [pc, #460]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	496f      	ldr	r1, [pc, #444]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022e0:	4b6a      	ldr	r3, [pc, #424]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ee:	4967      	ldr	r1, [pc, #412]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002302:	4b62      	ldr	r3, [pc, #392]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002308:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	495e      	ldr	r1, [pc, #376]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002324:	4b59      	ldr	r3, [pc, #356]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	4956      	ldr	r1, [pc, #344]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002346:	4b51      	ldr	r3, [pc, #324]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	494d      	ldr	r1, [pc, #308]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d028      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002368:	4b48      	ldr	r3, [pc, #288]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4945      	ldr	r1, [pc, #276]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002386:	d106      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002388:	4b40      	ldr	r3, [pc, #256]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a3f      	ldr	r2, [pc, #252]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800238e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002392:	60d3      	str	r3, [r2, #12]
 8002394:	e011      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800239e:	d10c      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3304      	adds	r3, #4
 80023a4:	2101      	movs	r1, #1
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f872 	bl	8002490 <RCCEx_PLLSAI1_Config>
 80023ac:	4603      	mov	r3, r0
 80023ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d028      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023c6:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d4:	492d      	ldr	r1, [pc, #180]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023e4:	d106      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e6:	4b29      	ldr	r3, [pc, #164]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	4a28      	ldr	r2, [pc, #160]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023f0:	60d3      	str	r3, [r2, #12]
 80023f2:	e011      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023fc:	d10c      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	2101      	movs	r1, #1
 8002404:	4618      	mov	r0, r3
 8002406:	f000 f843 	bl	8002490 <RCCEx_PLLSAI1_Config>
 800240a:	4603      	mov	r3, r0
 800240c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800240e:	7cfb      	ldrb	r3, [r7, #19]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01c      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002432:	4916      	ldr	r1, [pc, #88]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002442:	d10c      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3304      	adds	r3, #4
 8002448:	2102      	movs	r1, #2
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f820 	bl	8002490 <RCCEx_PLLSAI1_Config>
 8002450:	4603      	mov	r3, r0
 8002452:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800245a:	7cfb      	ldrb	r3, [r7, #19]
 800245c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002470:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002478:	4904      	ldr	r1, [pc, #16]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002480:	7cbb      	ldrb	r3, [r7, #18]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000

08002490 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800249e:	4b74      	ldr	r3, [pc, #464]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d018      	beq.n	80024dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024aa:	4b71      	ldr	r3, [pc, #452]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0203 	and.w	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d10d      	bne.n	80024d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
       ||
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024c2:	4b6b      	ldr	r3, [pc, #428]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	091b      	lsrs	r3, r3, #4
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
       ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d047      	beq.n	8002566 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
 80024da:	e044      	b.n	8002566 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d018      	beq.n	8002516 <RCCEx_PLLSAI1_Config+0x86>
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d825      	bhi.n	8002534 <RCCEx_PLLSAI1_Config+0xa4>
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d002      	beq.n	80024f2 <RCCEx_PLLSAI1_Config+0x62>
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d009      	beq.n	8002504 <RCCEx_PLLSAI1_Config+0x74>
 80024f0:	e020      	b.n	8002534 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024f2:	4b5f      	ldr	r3, [pc, #380]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d11d      	bne.n	800253a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002502:	e01a      	b.n	800253a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002504:	4b5a      	ldr	r3, [pc, #360]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250c:	2b00      	cmp	r3, #0
 800250e:	d116      	bne.n	800253e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002514:	e013      	b.n	800253e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002516:	4b56      	ldr	r3, [pc, #344]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10f      	bne.n	8002542 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002522:	4b53      	ldr	r3, [pc, #332]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002532:	e006      	b.n	8002542 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
      break;
 8002538:	e004      	b.n	8002544 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800253a:	bf00      	nop
 800253c:	e002      	b.n	8002544 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800253e:	bf00      	nop
 8002540:	e000      	b.n	8002544 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002542:	bf00      	nop
    }

    if(status == HAL_OK)
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10d      	bne.n	8002566 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800254a:	4b49      	ldr	r3, [pc, #292]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6819      	ldr	r1, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	430b      	orrs	r3, r1
 8002560:	4943      	ldr	r1, [pc, #268]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002562:	4313      	orrs	r3, r2
 8002564:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d17c      	bne.n	8002666 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800256c:	4b40      	ldr	r3, [pc, #256]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a3f      	ldr	r2, [pc, #252]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002572:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002578:	f7fe fa54 	bl	8000a24 <HAL_GetTick>
 800257c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800257e:	e009      	b.n	8002594 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002580:	f7fe fa50 	bl	8000a24 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d902      	bls.n	8002594 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	73fb      	strb	r3, [r7, #15]
        break;
 8002592:	e005      	b.n	80025a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002594:	4b36      	ldr	r3, [pc, #216]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ef      	bne.n	8002580 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d15f      	bne.n	8002666 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d110      	bne.n	80025ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025ac:	4b30      	ldr	r3, [pc, #192]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80025b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6892      	ldr	r2, [r2, #8]
 80025bc:	0211      	lsls	r1, r2, #8
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68d2      	ldr	r2, [r2, #12]
 80025c2:	06d2      	lsls	r2, r2, #27
 80025c4:	430a      	orrs	r2, r1
 80025c6:	492a      	ldr	r1, [pc, #168]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	610b      	str	r3, [r1, #16]
 80025cc:	e027      	b.n	800261e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d112      	bne.n	80025fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025d4:	4b26      	ldr	r3, [pc, #152]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6892      	ldr	r2, [r2, #8]
 80025e4:	0211      	lsls	r1, r2, #8
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6912      	ldr	r2, [r2, #16]
 80025ea:	0852      	lsrs	r2, r2, #1
 80025ec:	3a01      	subs	r2, #1
 80025ee:	0552      	lsls	r2, r2, #21
 80025f0:	430a      	orrs	r2, r1
 80025f2:	491f      	ldr	r1, [pc, #124]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	610b      	str	r3, [r1, #16]
 80025f8:	e011      	b.n	800261e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002602:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6892      	ldr	r2, [r2, #8]
 800260a:	0211      	lsls	r1, r2, #8
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6952      	ldr	r2, [r2, #20]
 8002610:	0852      	lsrs	r2, r2, #1
 8002612:	3a01      	subs	r2, #1
 8002614:	0652      	lsls	r2, r2, #25
 8002616:	430a      	orrs	r2, r1
 8002618:	4915      	ldr	r1, [pc, #84]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 800261a:	4313      	orrs	r3, r2
 800261c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800261e:	4b14      	ldr	r3, [pc, #80]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a13      	ldr	r2, [pc, #76]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002624:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002628:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7fe f9fb 	bl	8000a24 <HAL_GetTick>
 800262e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002630:	e009      	b.n	8002646 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002632:	f7fe f9f7 	bl	8000a24 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d902      	bls.n	8002646 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	73fb      	strb	r3, [r7, #15]
          break;
 8002644:	e005      	b.n	8002652 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0ef      	beq.n	8002632 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d106      	bne.n	8002666 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	4903      	ldr	r1, [pc, #12]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002662:	4313      	orrs	r3, r2
 8002664:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000

08002674 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e040      	b.n	8002708 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe f830 	bl	80006fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2224      	movs	r2, #36	; 0x24
 80026a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0201 	bic.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f9da 	bl	8002a6c <UART_SetConfig>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e022      	b.n	8002708 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fbfa 	bl	8002ec4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fc81 	bl	8003008 <UART_CheckIdleState>
 8002706:	4603      	mov	r3, r0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002724:	2b20      	cmp	r3, #32
 8002726:	f040 8082 	bne.w	800282e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_UART_Transmit+0x26>
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e07a      	b.n	8002830 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_UART_Transmit+0x38>
 8002744:	2302      	movs	r3, #2
 8002746:	e073      	b.n	8002830 <HAL_UART_Transmit+0x120>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2221      	movs	r2, #33	; 0x21
 800275c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800275e:	f7fe f961 	bl	8000a24 <HAL_GetTick>
 8002762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	88fa      	ldrh	r2, [r7, #6]
 8002768:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	88fa      	ldrh	r2, [r7, #6]
 8002770:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277c:	d108      	bne.n	8002790 <HAL_UART_Transmit+0x80>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d104      	bne.n	8002790 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	e003      	b.n	8002798 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80027a0:	e02d      	b.n	80027fe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2200      	movs	r2, #0
 80027aa:	2180      	movs	r1, #128	; 0x80
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fc74 	bl	800309a <UART_WaitOnFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e039      	b.n	8002830 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10b      	bne.n	80027da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	881a      	ldrh	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027ce:	b292      	uxth	r2, r2
 80027d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	3302      	adds	r3, #2
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	e008      	b.n	80027ec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	781a      	ldrb	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	b292      	uxth	r2, r2
 80027e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3301      	adds	r3, #1
 80027ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1cb      	bne.n	80027a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2200      	movs	r2, #0
 8002812:	2140      	movs	r1, #64	; 0x40
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fc40 	bl	800309a <UART_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e005      	b.n	8002830 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2220      	movs	r2, #32
 8002828:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	e000      	b.n	8002830 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800282e:	2302      	movs	r3, #2
  }
}
 8002830:	4618      	mov	r0, r3
 8002832:	3720      	adds	r7, #32
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	4613      	mov	r3, r2
 8002844:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800284a:	2b20      	cmp	r3, #32
 800284c:	d178      	bne.n	8002940 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <HAL_UART_Transmit_DMA+0x22>
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e071      	b.n	8002942 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_UART_Transmit_DMA+0x34>
 8002868:	2302      	movs	r3, #2
 800286a:	e06a      	b.n	8002942 <HAL_UART_Transmit_DMA+0x10a>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	88fa      	ldrh	r2, [r7, #6]
 800287e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	88fa      	ldrh	r2, [r7, #6]
 8002886:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2221      	movs	r2, #33	; 0x21
 8002896:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d02b      	beq.n	80028f8 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028a4:	4a29      	ldr	r2, [pc, #164]	; (800294c <HAL_UART_Transmit_DMA+0x114>)
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ac:	4a28      	ldr	r2, [pc, #160]	; (8002950 <HAL_UART_Transmit_DMA+0x118>)
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b4:	4a27      	ldr	r2, [pc, #156]	; (8002954 <HAL_UART_Transmit_DMA+0x11c>)
 80028b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028bc:	2200      	movs	r2, #0
 80028be:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c8:	4619      	mov	r1, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3328      	adds	r3, #40	; 0x28
 80028d0:	461a      	mov	r2, r3
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	f7fe faa0 	bl	8000e18 <HAL_DMA_Start_IT>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00c      	beq.n	80028f8 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2210      	movs	r2, #16
 80028e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2220      	movs	r2, #32
 80028f2:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e024      	b.n	8002942 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2240      	movs	r2, #64	; 0x40
 80028fe:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3308      	adds	r3, #8
 800290e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	e853 3f00 	ldrex	r3, [r3]
 8002916:	613b      	str	r3, [r7, #16]
   return(result);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3308      	adds	r3, #8
 8002926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002928:	623a      	str	r2, [r7, #32]
 800292a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292c:	69f9      	ldr	r1, [r7, #28]
 800292e:	6a3a      	ldr	r2, [r7, #32]
 8002930:	e841 2300 	strex	r3, r2, [r1]
 8002934:	61bb      	str	r3, [r7, #24]
   return(result);
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e5      	bne.n	8002908 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	e000      	b.n	8002942 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002940:	2302      	movs	r3, #2
  }
}
 8002942:	4618      	mov	r0, r3
 8002944:	3728      	adds	r7, #40	; 0x28
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	08003483 	.word	0x08003483
 8002950:	0800351d 	.word	0x0800351d
 8002954:	08003695 	.word	0x08003695

08002958 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	4613      	mov	r3, r2
 8002964:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800296a:	2b20      	cmp	r3, #32
 800296c:	d142      	bne.n	80029f4 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HAL_UART_Receive_DMA+0x22>
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e03b      	b.n	80029f6 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_UART_Receive_DMA+0x34>
 8002988:	2302      	movs	r3, #2
 800298a:	e034      	b.n	80029f6 <HAL_UART_Receive_DMA+0x9e>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <HAL_UART_Receive_DMA+0xa8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d01f      	beq.n	80029e4 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d018      	beq.n	80029e4 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	e853 3f00 	ldrex	r3, [r3]
 80029be:	613b      	str	r3, [r7, #16]
   return(result);
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	623b      	str	r3, [r7, #32]
 80029d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d4:	69f9      	ldr	r1, [r7, #28]
 80029d6:	6a3a      	ldr	r2, [r7, #32]
 80029d8:	e841 2300 	strex	r3, r2, [r1]
 80029dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1e6      	bne.n	80029b2 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	461a      	mov	r2, r3
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fc1a 	bl	8003224 <UART_Start_Receive_DMA>
 80029f0:	4603      	mov	r3, r0
 80029f2:	e000      	b.n	80029f6 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3728      	adds	r7, #40	; 0x28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40008000 	.word	0x40008000

08002a04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a70:	b08a      	sub	sp, #40	; 0x28
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	431a      	orrs	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4bb4      	ldr	r3, [pc, #720]	; (8002d6c <UART_SetConfig+0x300>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4aa9      	ldr	r2, [pc, #676]	; (8002d70 <UART_SetConfig+0x304>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d004      	beq.n	8002ad8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4aa0      	ldr	r2, [pc, #640]	; (8002d74 <UART_SetConfig+0x308>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d126      	bne.n	8002b44 <UART_SetConfig+0xd8>
 8002af6:	4ba0      	ldr	r3, [pc, #640]	; (8002d78 <UART_SetConfig+0x30c>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d81b      	bhi.n	8002b3c <UART_SetConfig+0xd0>
 8002b04:	a201      	add	r2, pc, #4	; (adr r2, 8002b0c <UART_SetConfig+0xa0>)
 8002b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0a:	bf00      	nop
 8002b0c:	08002b1d 	.word	0x08002b1d
 8002b10:	08002b2d 	.word	0x08002b2d
 8002b14:	08002b25 	.word	0x08002b25
 8002b18:	08002b35 	.word	0x08002b35
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b22:	e080      	b.n	8002c26 <UART_SetConfig+0x1ba>
 8002b24:	2302      	movs	r3, #2
 8002b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b2a:	e07c      	b.n	8002c26 <UART_SetConfig+0x1ba>
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b32:	e078      	b.n	8002c26 <UART_SetConfig+0x1ba>
 8002b34:	2308      	movs	r3, #8
 8002b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b3a:	e074      	b.n	8002c26 <UART_SetConfig+0x1ba>
 8002b3c:	2310      	movs	r3, #16
 8002b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b42:	e070      	b.n	8002c26 <UART_SetConfig+0x1ba>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a8c      	ldr	r2, [pc, #560]	; (8002d7c <UART_SetConfig+0x310>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d138      	bne.n	8002bc0 <UART_SetConfig+0x154>
 8002b4e:	4b8a      	ldr	r3, [pc, #552]	; (8002d78 <UART_SetConfig+0x30c>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b0c      	cmp	r3, #12
 8002b5a:	d82d      	bhi.n	8002bb8 <UART_SetConfig+0x14c>
 8002b5c:	a201      	add	r2, pc, #4	; (adr r2, 8002b64 <UART_SetConfig+0xf8>)
 8002b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b62:	bf00      	nop
 8002b64:	08002b99 	.word	0x08002b99
 8002b68:	08002bb9 	.word	0x08002bb9
 8002b6c:	08002bb9 	.word	0x08002bb9
 8002b70:	08002bb9 	.word	0x08002bb9
 8002b74:	08002ba9 	.word	0x08002ba9
 8002b78:	08002bb9 	.word	0x08002bb9
 8002b7c:	08002bb9 	.word	0x08002bb9
 8002b80:	08002bb9 	.word	0x08002bb9
 8002b84:	08002ba1 	.word	0x08002ba1
 8002b88:	08002bb9 	.word	0x08002bb9
 8002b8c:	08002bb9 	.word	0x08002bb9
 8002b90:	08002bb9 	.word	0x08002bb9
 8002b94:	08002bb1 	.word	0x08002bb1
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b9e:	e042      	b.n	8002c26 <UART_SetConfig+0x1ba>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ba6:	e03e      	b.n	8002c26 <UART_SetConfig+0x1ba>
 8002ba8:	2304      	movs	r3, #4
 8002baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bae:	e03a      	b.n	8002c26 <UART_SetConfig+0x1ba>
 8002bb0:	2308      	movs	r3, #8
 8002bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bb6:	e036      	b.n	8002c26 <UART_SetConfig+0x1ba>
 8002bb8:	2310      	movs	r3, #16
 8002bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bbe:	e032      	b.n	8002c26 <UART_SetConfig+0x1ba>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a6a      	ldr	r2, [pc, #424]	; (8002d70 <UART_SetConfig+0x304>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d12a      	bne.n	8002c20 <UART_SetConfig+0x1b4>
 8002bca:	4b6b      	ldr	r3, [pc, #428]	; (8002d78 <UART_SetConfig+0x30c>)
 8002bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bd8:	d01a      	beq.n	8002c10 <UART_SetConfig+0x1a4>
 8002bda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bde:	d81b      	bhi.n	8002c18 <UART_SetConfig+0x1ac>
 8002be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002be4:	d00c      	beq.n	8002c00 <UART_SetConfig+0x194>
 8002be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bea:	d815      	bhi.n	8002c18 <UART_SetConfig+0x1ac>
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <UART_SetConfig+0x18c>
 8002bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf4:	d008      	beq.n	8002c08 <UART_SetConfig+0x19c>
 8002bf6:	e00f      	b.n	8002c18 <UART_SetConfig+0x1ac>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bfe:	e012      	b.n	8002c26 <UART_SetConfig+0x1ba>
 8002c00:	2302      	movs	r3, #2
 8002c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c06:	e00e      	b.n	8002c26 <UART_SetConfig+0x1ba>
 8002c08:	2304      	movs	r3, #4
 8002c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c0e:	e00a      	b.n	8002c26 <UART_SetConfig+0x1ba>
 8002c10:	2308      	movs	r3, #8
 8002c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c16:	e006      	b.n	8002c26 <UART_SetConfig+0x1ba>
 8002c18:	2310      	movs	r3, #16
 8002c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c1e:	e002      	b.n	8002c26 <UART_SetConfig+0x1ba>
 8002c20:	2310      	movs	r3, #16
 8002c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a51      	ldr	r2, [pc, #324]	; (8002d70 <UART_SetConfig+0x304>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d17a      	bne.n	8002d26 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d824      	bhi.n	8002c82 <UART_SetConfig+0x216>
 8002c38:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <UART_SetConfig+0x1d4>)
 8002c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3e:	bf00      	nop
 8002c40:	08002c65 	.word	0x08002c65
 8002c44:	08002c83 	.word	0x08002c83
 8002c48:	08002c6d 	.word	0x08002c6d
 8002c4c:	08002c83 	.word	0x08002c83
 8002c50:	08002c73 	.word	0x08002c73
 8002c54:	08002c83 	.word	0x08002c83
 8002c58:	08002c83 	.word	0x08002c83
 8002c5c:	08002c83 	.word	0x08002c83
 8002c60:	08002c7b 	.word	0x08002c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c64:	f7ff f992 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 8002c68:	61f8      	str	r0, [r7, #28]
        break;
 8002c6a:	e010      	b.n	8002c8e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c6c:	4b44      	ldr	r3, [pc, #272]	; (8002d80 <UART_SetConfig+0x314>)
 8002c6e:	61fb      	str	r3, [r7, #28]
        break;
 8002c70:	e00d      	b.n	8002c8e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c72:	f7ff f8f3 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8002c76:	61f8      	str	r0, [r7, #28]
        break;
 8002c78:	e009      	b.n	8002c8e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c7e:	61fb      	str	r3, [r7, #28]
        break;
 8002c80:	e005      	b.n	8002c8e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002c8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8107 	beq.w	8002ea4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4413      	add	r3, r2
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d305      	bcc.n	8002cb2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002cac:	69fa      	ldr	r2, [r7, #28]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d903      	bls.n	8002cba <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002cb8:	e0f4      	b.n	8002ea4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	461c      	mov	r4, r3
 8002cc0:	4615      	mov	r5, r2
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	022b      	lsls	r3, r5, #8
 8002ccc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002cd0:	0222      	lsls	r2, r4, #8
 8002cd2:	68f9      	ldr	r1, [r7, #12]
 8002cd4:	6849      	ldr	r1, [r1, #4]
 8002cd6:	0849      	lsrs	r1, r1, #1
 8002cd8:	2000      	movs	r0, #0
 8002cda:	4688      	mov	r8, r1
 8002cdc:	4681      	mov	r9, r0
 8002cde:	eb12 0a08 	adds.w	sl, r2, r8
 8002ce2:	eb43 0b09 	adc.w	fp, r3, r9
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cf4:	4650      	mov	r0, sl
 8002cf6:	4659      	mov	r1, fp
 8002cf8:	f7fd fa68 	bl	80001cc <__aeabi_uldivmod>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4613      	mov	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d0a:	d308      	bcc.n	8002d1e <UART_SetConfig+0x2b2>
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d12:	d204      	bcs.n	8002d1e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	60da      	str	r2, [r3, #12]
 8002d1c:	e0c2      	b.n	8002ea4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002d24:	e0be      	b.n	8002ea4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d2e:	d16a      	bne.n	8002e06 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002d30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d834      	bhi.n	8002da2 <UART_SetConfig+0x336>
 8002d38:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <UART_SetConfig+0x2d4>)
 8002d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3e:	bf00      	nop
 8002d40:	08002d65 	.word	0x08002d65
 8002d44:	08002d85 	.word	0x08002d85
 8002d48:	08002d8d 	.word	0x08002d8d
 8002d4c:	08002da3 	.word	0x08002da3
 8002d50:	08002d93 	.word	0x08002d93
 8002d54:	08002da3 	.word	0x08002da3
 8002d58:	08002da3 	.word	0x08002da3
 8002d5c:	08002da3 	.word	0x08002da3
 8002d60:	08002d9b 	.word	0x08002d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d64:	f7ff f912 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 8002d68:	61f8      	str	r0, [r7, #28]
        break;
 8002d6a:	e020      	b.n	8002dae <UART_SetConfig+0x342>
 8002d6c:	efff69f3 	.word	0xefff69f3
 8002d70:	40008000 	.word	0x40008000
 8002d74:	40013800 	.word	0x40013800
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40004400 	.word	0x40004400
 8002d80:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d84:	f7ff f918 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 8002d88:	61f8      	str	r0, [r7, #28]
        break;
 8002d8a:	e010      	b.n	8002dae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d8c:	4b4c      	ldr	r3, [pc, #304]	; (8002ec0 <UART_SetConfig+0x454>)
 8002d8e:	61fb      	str	r3, [r7, #28]
        break;
 8002d90:	e00d      	b.n	8002dae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d92:	f7ff f863 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8002d96:	61f8      	str	r0, [r7, #28]
        break;
 8002d98:	e009      	b.n	8002dae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d9e:	61fb      	str	r3, [r7, #28]
        break;
 8002da0:	e005      	b.n	8002dae <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002dac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d077      	beq.n	8002ea4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	005a      	lsls	r2, r3, #1
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	085b      	lsrs	r3, r3, #1
 8002dbe:	441a      	add	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	2b0f      	cmp	r3, #15
 8002dce:	d916      	bls.n	8002dfe <UART_SetConfig+0x392>
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd6:	d212      	bcs.n	8002dfe <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	f023 030f 	bic.w	r3, r3, #15
 8002de0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	085b      	lsrs	r3, r3, #1
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	8afb      	ldrh	r3, [r7, #22]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	8afa      	ldrh	r2, [r7, #22]
 8002dfa:	60da      	str	r2, [r3, #12]
 8002dfc:	e052      	b.n	8002ea4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e04:	e04e      	b.n	8002ea4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d827      	bhi.n	8002e5e <UART_SetConfig+0x3f2>
 8002e0e:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <UART_SetConfig+0x3a8>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e39 	.word	0x08002e39
 8002e18:	08002e41 	.word	0x08002e41
 8002e1c:	08002e49 	.word	0x08002e49
 8002e20:	08002e5f 	.word	0x08002e5f
 8002e24:	08002e4f 	.word	0x08002e4f
 8002e28:	08002e5f 	.word	0x08002e5f
 8002e2c:	08002e5f 	.word	0x08002e5f
 8002e30:	08002e5f 	.word	0x08002e5f
 8002e34:	08002e57 	.word	0x08002e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e38:	f7ff f8a8 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 8002e3c:	61f8      	str	r0, [r7, #28]
        break;
 8002e3e:	e014      	b.n	8002e6a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e40:	f7ff f8ba 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 8002e44:	61f8      	str	r0, [r7, #28]
        break;
 8002e46:	e010      	b.n	8002e6a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e48:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <UART_SetConfig+0x454>)
 8002e4a:	61fb      	str	r3, [r7, #28]
        break;
 8002e4c:	e00d      	b.n	8002e6a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e4e:	f7ff f805 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8002e52:	61f8      	str	r0, [r7, #28]
        break;
 8002e54:	e009      	b.n	8002e6a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e5a:	61fb      	str	r3, [r7, #28]
        break;
 8002e5c:	e005      	b.n	8002e6a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e68:	bf00      	nop
    }

    if (pclk != 0U)
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d019      	beq.n	8002ea4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	085a      	lsrs	r2, r3, #1
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	441a      	add	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e82:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	2b0f      	cmp	r3, #15
 8002e88:	d909      	bls.n	8002e9e <UART_SetConfig+0x432>
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e90:	d205      	bcs.n	8002e9e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60da      	str	r2, [r3, #12]
 8002e9c:	e002      	b.n	8002ea4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002eb0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3728      	adds	r7, #40	; 0x28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ebe:	bf00      	nop
 8002ec0:	00f42400 	.word	0x00f42400

08002ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01a      	beq.n	8002fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fc2:	d10a      	bne.n	8002fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	605a      	str	r2, [r3, #4]
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af02      	add	r7, sp, #8
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003018:	f7fd fd04 	bl	8000a24 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b08      	cmp	r3, #8
 800302a:	d10e      	bne.n	800304a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800302c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f82d 	bl	800309a <UART_WaitOnFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e023      	b.n	8003092 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b04      	cmp	r3, #4
 8003056:	d10e      	bne.n	8003076 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f817 	bl	800309a <UART_WaitOnFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e00d      	b.n	8003092 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2220      	movs	r2, #32
 800307a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b09c      	sub	sp, #112	; 0x70
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	603b      	str	r3, [r7, #0]
 80030a6:	4613      	mov	r3, r2
 80030a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030aa:	e0a5      	b.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b2:	f000 80a1 	beq.w	80031f8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b6:	f7fd fcb5 	bl	8000a24 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d302      	bcc.n	80030cc <UART_WaitOnFlagUntilTimeout+0x32>
 80030c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d13e      	bne.n	800314a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d4:	e853 3f00 	ldrex	r3, [r3]
 80030d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80030da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030e0:	667b      	str	r3, [r7, #100]	; 0x64
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80030f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030f2:	e841 2300 	strex	r3, r2, [r1]
 80030f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80030f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e6      	bne.n	80030cc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3308      	adds	r3, #8
 8003104:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800310e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	663b      	str	r3, [r7, #96]	; 0x60
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3308      	adds	r3, #8
 800311c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800311e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003120:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003126:	e841 2300 	strex	r3, r2, [r1]
 800312a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800312c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1e5      	bne.n	80030fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2220      	movs	r2, #32
 8003136:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e067      	b.n	800321a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d04f      	beq.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003166:	d147      	bne.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003170:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317a:	e853 3f00 	ldrex	r3, [r3]
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003186:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003190:	637b      	str	r3, [r7, #52]	; 0x34
 8003192:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003194:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003198:	e841 2300 	strex	r3, r2, [r1]
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e6      	bne.n	8003172 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3308      	adds	r3, #8
 80031aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	e853 3f00 	ldrex	r3, [r3]
 80031b2:	613b      	str	r3, [r7, #16]
   return(result);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3308      	adds	r3, #8
 80031c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80031c4:	623a      	str	r2, [r7, #32]
 80031c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	69f9      	ldr	r1, [r7, #28]
 80031ca:	6a3a      	ldr	r2, [r7, #32]
 80031cc:	e841 2300 	strex	r3, r2, [r1]
 80031d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e5      	bne.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e010      	b.n	800321a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4013      	ands	r3, r2
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	429a      	cmp	r2, r3
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	429a      	cmp	r2, r3
 8003214:	f43f af4a 	beq.w	80030ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3770      	adds	r7, #112	; 0x70
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b096      	sub	sp, #88	; 0x58
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	4613      	mov	r3, r2
 8003230:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	88fa      	ldrh	r2, [r7, #6]
 800323c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2222      	movs	r2, #34	; 0x22
 800324c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	2b00      	cmp	r3, #0
 8003254:	d02b      	beq.n	80032ae <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	4a42      	ldr	r2, [pc, #264]	; (8003364 <UART_Start_Receive_DMA+0x140>)
 800325c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	4a41      	ldr	r2, [pc, #260]	; (8003368 <UART_Start_Receive_DMA+0x144>)
 8003264:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	4a40      	ldr	r2, [pc, #256]	; (800336c <UART_Start_Receive_DMA+0x148>)
 800326c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	2200      	movs	r2, #0
 8003274:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3324      	adds	r3, #36	; 0x24
 8003280:	4619      	mov	r1, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003286:	461a      	mov	r2, r3
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	f7fd fdc5 	bl	8000e18 <HAL_DMA_Start_IT>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00c      	beq.n	80032ae <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2210      	movs	r2, #16
 8003298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e055      	b.n	800335a <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d018      	beq.n	80032f0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c6:	e853 3f00 	ldrex	r3, [r3]
 80032ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d2:	657b      	str	r3, [r7, #84]	; 0x54
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	461a      	mov	r2, r3
 80032da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80032de:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032e4:	e841 2300 	strex	r3, r2, [r1]
 80032e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80032ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1e6      	bne.n	80032be <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3308      	adds	r3, #8
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fa:	e853 3f00 	ldrex	r3, [r3]
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	653b      	str	r3, [r7, #80]	; 0x50
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3308      	adds	r3, #8
 800330e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003310:	637a      	str	r2, [r7, #52]	; 0x34
 8003312:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003314:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003318:	e841 2300 	strex	r3, r2, [r1]
 800331c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1e5      	bne.n	80032f0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3308      	adds	r3, #8
 800332a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	e853 3f00 	ldrex	r3, [r3]
 8003332:	613b      	str	r3, [r7, #16]
   return(result);
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800333a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3308      	adds	r3, #8
 8003342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003344:	623a      	str	r2, [r7, #32]
 8003346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003348:	69f9      	ldr	r1, [r7, #28]
 800334a:	6a3a      	ldr	r2, [r7, #32]
 800334c:	e841 2300 	strex	r3, r2, [r1]
 8003350:	61bb      	str	r3, [r7, #24]
   return(result);
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1e5      	bne.n	8003324 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3758      	adds	r7, #88	; 0x58
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	08003539 	.word	0x08003539
 8003368:	0800365d 	.word	0x0800365d
 800336c:	08003695 	.word	0x08003695

08003370 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003370:	b480      	push	{r7}
 8003372:	b089      	sub	sp, #36	; 0x24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	60bb      	str	r3, [r7, #8]
   return(result);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	61bb      	str	r3, [r7, #24]
 8003398:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339a:	6979      	ldr	r1, [r7, #20]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	e841 2300 	strex	r3, r2, [r1]
 80033a2:	613b      	str	r3, [r7, #16]
   return(result);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1e6      	bne.n	8003378 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	679a      	str	r2, [r3, #120]	; 0x78
}
 80033b0:	bf00      	nop
 80033b2:	3724      	adds	r7, #36	; 0x24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033bc:	b480      	push	{r7}
 80033be:	b095      	sub	sp, #84	; 0x54
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033cc:	e853 3f00 	ldrex	r3, [r3]
 80033d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e2:	643b      	str	r3, [r7, #64]	; 0x40
 80033e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033ea:	e841 2300 	strex	r3, r2, [r1]
 80033ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e6      	bne.n	80033c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3308      	adds	r3, #8
 80033fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	e853 3f00 	ldrex	r3, [r3]
 8003404:	61fb      	str	r3, [r7, #28]
   return(result);
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f023 0301 	bic.w	r3, r3, #1
 800340c:	64bb      	str	r3, [r7, #72]	; 0x48
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3308      	adds	r3, #8
 8003414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003416:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800341c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800341e:	e841 2300 	strex	r3, r2, [r1]
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1e5      	bne.n	80033f6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342e:	2b01      	cmp	r3, #1
 8003430:	d118      	bne.n	8003464 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	e853 3f00 	ldrex	r3, [r3]
 800343e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f023 0310 	bic.w	r3, r3, #16
 8003446:	647b      	str	r3, [r7, #68]	; 0x44
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003454:	6979      	ldr	r1, [r7, #20]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	e841 2300 	strex	r3, r2, [r1]
 800345c:	613b      	str	r3, [r7, #16]
   return(result);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e6      	bne.n	8003432 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003476:	bf00      	nop
 8003478:	3754      	adds	r7, #84	; 0x54
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b090      	sub	sp, #64	; 0x40
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d137      	bne.n	800350e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800349e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a0:	2200      	movs	r2, #0
 80034a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3308      	adds	r3, #8
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	e853 3f00 	ldrex	r3, [r3]
 80034b4:	623b      	str	r3, [r7, #32]
   return(result);
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80034be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3308      	adds	r3, #8
 80034c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034c6:	633a      	str	r2, [r7, #48]	; 0x30
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ce:	e841 2300 	strex	r3, r2, [r1]
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1e5      	bne.n	80034a6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ee:	637b      	str	r3, [r7, #52]	; 0x34
 80034f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	69b9      	ldr	r1, [r7, #24]
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	617b      	str	r3, [r7, #20]
   return(result);
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e6      	bne.n	80034da <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800350c:	e002      	b.n	8003514 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800350e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003510:	f7ff fa78 	bl	8002a04 <HAL_UART_TxCpltCallback>
}
 8003514:	bf00      	nop
 8003516:	3740      	adds	r7, #64	; 0x40
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f7ff fa74 	bl	8002a18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b09c      	sub	sp, #112	; 0x70
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d170      	bne.n	8003636 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8003554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003556:	2200      	movs	r2, #0
 8003558:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800355c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003564:	e853 3f00 	ldrex	r3, [r3]
 8003568:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800356a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800356c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003570:	66bb      	str	r3, [r7, #104]	; 0x68
 8003572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800357a:	65bb      	str	r3, [r7, #88]	; 0x58
 800357c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003580:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003582:	e841 2300 	strex	r3, r2, [r1]
 8003586:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e6      	bne.n	800355c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3308      	adds	r3, #8
 8003594:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003598:	e853 3f00 	ldrex	r3, [r3]
 800359c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	667b      	str	r3, [r7, #100]	; 0x64
 80035a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3308      	adds	r3, #8
 80035ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80035ae:	647a      	str	r2, [r7, #68]	; 0x44
 80035b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035b6:	e841 2300 	strex	r3, r2, [r1]
 80035ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1e5      	bne.n	800358e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3308      	adds	r3, #8
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	e853 3f00 	ldrex	r3, [r3]
 80035d0:	623b      	str	r3, [r7, #32]
   return(result);
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035d8:	663b      	str	r3, [r7, #96]	; 0x60
 80035da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3308      	adds	r3, #8
 80035e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035e2:	633a      	str	r2, [r7, #48]	; 0x30
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ea:	e841 2300 	strex	r3, r2, [r1]
 80035ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1e5      	bne.n	80035c2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f8:	2220      	movs	r2, #32
 80035fa:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003600:	2b01      	cmp	r3, #1
 8003602:	d118      	bne.n	8003636 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	60fb      	str	r3, [r7, #12]
   return(result);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f023 0310 	bic.w	r3, r3, #16
 8003618:	65fb      	str	r3, [r7, #92]	; 0x5c
 800361a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003622:	61fb      	str	r3, [r7, #28]
 8003624:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003626:	69b9      	ldr	r1, [r7, #24]
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	617b      	str	r3, [r7, #20]
   return(result);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e6      	bne.n	8003604 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363a:	2b01      	cmp	r3, #1
 800363c:	d107      	bne.n	800364e <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800363e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003640:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003644:	4619      	mov	r1, r3
 8003646:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003648:	f7ff fa04 	bl	8002a54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800364c:	e002      	b.n	8003654 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800364e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003650:	f7ff f9ec 	bl	8002a2c <HAL_UART_RxCpltCallback>
}
 8003654:	bf00      	nop
 8003656:	3770      	adds	r7, #112	; 0x70
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366e:	2b01      	cmp	r3, #1
 8003670:	d109      	bne.n	8003686 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003678:	085b      	lsrs	r3, r3, #1
 800367a:	b29b      	uxth	r3, r3
 800367c:	4619      	mov	r1, r3
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f7ff f9e8 	bl	8002a54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003684:	e002      	b.n	800368c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f7fc fff8 	bl	800067c <HAL_UART_RxHalfCpltCallback>
}
 800368c:	bf00      	nop
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b8:	2b80      	cmp	r3, #128	; 0x80
 80036ba:	d109      	bne.n	80036d0 <UART_DMAError+0x3c>
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b21      	cmp	r3, #33	; 0x21
 80036c0:	d106      	bne.n	80036d0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80036ca:	6978      	ldr	r0, [r7, #20]
 80036cc:	f7ff fe50 	bl	8003370 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	d109      	bne.n	80036f2 <UART_DMAError+0x5e>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b22      	cmp	r3, #34	; 0x22
 80036e2:	d106      	bne.n	80036f2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80036ec:	6978      	ldr	r0, [r7, #20]
 80036ee:	f7ff fe65 	bl	80033bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036f8:	f043 0210 	orr.w	r2, r3, #16
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003702:	6978      	ldr	r0, [r7, #20]
 8003704:	f7ff f99c 	bl	8002a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003708:	bf00      	nop
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <__libc_init_array>:
 8003710:	b570      	push	{r4, r5, r6, lr}
 8003712:	4d0d      	ldr	r5, [pc, #52]	; (8003748 <__libc_init_array+0x38>)
 8003714:	4c0d      	ldr	r4, [pc, #52]	; (800374c <__libc_init_array+0x3c>)
 8003716:	1b64      	subs	r4, r4, r5
 8003718:	10a4      	asrs	r4, r4, #2
 800371a:	2600      	movs	r6, #0
 800371c:	42a6      	cmp	r6, r4
 800371e:	d109      	bne.n	8003734 <__libc_init_array+0x24>
 8003720:	4d0b      	ldr	r5, [pc, #44]	; (8003750 <__libc_init_array+0x40>)
 8003722:	4c0c      	ldr	r4, [pc, #48]	; (8003754 <__libc_init_array+0x44>)
 8003724:	f000 f820 	bl	8003768 <_init>
 8003728:	1b64      	subs	r4, r4, r5
 800372a:	10a4      	asrs	r4, r4, #2
 800372c:	2600      	movs	r6, #0
 800372e:	42a6      	cmp	r6, r4
 8003730:	d105      	bne.n	800373e <__libc_init_array+0x2e>
 8003732:	bd70      	pop	{r4, r5, r6, pc}
 8003734:	f855 3b04 	ldr.w	r3, [r5], #4
 8003738:	4798      	blx	r3
 800373a:	3601      	adds	r6, #1
 800373c:	e7ee      	b.n	800371c <__libc_init_array+0xc>
 800373e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003742:	4798      	blx	r3
 8003744:	3601      	adds	r6, #1
 8003746:	e7f2      	b.n	800372e <__libc_init_array+0x1e>
 8003748:	08003800 	.word	0x08003800
 800374c:	08003800 	.word	0x08003800
 8003750:	08003800 	.word	0x08003800
 8003754:	08003804 	.word	0x08003804

08003758 <memset>:
 8003758:	4402      	add	r2, r0
 800375a:	4603      	mov	r3, r0
 800375c:	4293      	cmp	r3, r2
 800375e:	d100      	bne.n	8003762 <memset+0xa>
 8003760:	4770      	bx	lr
 8003762:	f803 1b01 	strb.w	r1, [r3], #1
 8003766:	e7f9      	b.n	800375c <memset+0x4>

08003768 <_init>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	bf00      	nop
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr

08003774 <_fini>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	bf00      	nop
 8003778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377a:	bc08      	pop	{r3}
 800377c:	469e      	mov	lr, r3
 800377e:	4770      	bx	lr
