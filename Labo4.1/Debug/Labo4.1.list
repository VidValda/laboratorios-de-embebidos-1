
Labo4.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e5c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003fe8  08003fe8  00013fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004028  08004028  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004028  08004028  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004028  08004028  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004028  08004028  00014028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800402c  0800402c  0001402c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  0800403c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  0800403c  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d316  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba1  00000000  00000000  0002d352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0002eef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  0002fcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210cd  00000000  00000000  000309c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa98  00000000  00000000  00051a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2e2e  00000000  00000000  00061525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134353  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a44  00000000  00000000  001343a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003fd0 	.word	0x08003fd0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003fd0 	.word	0x08003fd0

080001cc <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
uint16_t AD_RES=0;
int main(void){
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	AD_RES=0;
 80001d0:	4b14      	ldr	r3, [pc, #80]	; (8000224 <main+0x58>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	801a      	strh	r2, [r3, #0]
	HAL_Init();
 80001d6:	f000 faa8 	bl	800072a <HAL_Init>
	SystemClock_Config();
 80001da:	f000 f829 	bl	8000230 <SystemClock_Config>
	MX_GPIO_Init();
 80001de:	f000 f947 	bl	8000470 <MX_GPIO_Init>
	MX_ADC1_Init();
 80001e2:	f000 f86b 	bl	80002bc <MX_ADC1_Init>
	MX_TIM2_Init();
 80001e6:	f000 f8cd 	bl	8000384 <MX_TIM2_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001ea:	2100      	movs	r1, #0
 80001ec:	480e      	ldr	r0, [pc, #56]	; (8000228 <main+0x5c>)
 80001ee:	f002 ffff 	bl	80031f0 <HAL_TIM_PWM_Start>
	//HAL_ADCEx_Calibration_Start(&hadc1);

	while (1){
		HAL_ADC_Start(&hadc1);
 80001f2:	480e      	ldr	r0, [pc, #56]	; (800022c <main+0x60>)
 80001f4:	f000 fe42 	bl	8000e7c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,1);
 80001f8:	2101      	movs	r1, #1
 80001fa:	480c      	ldr	r0, [pc, #48]	; (800022c <main+0x60>)
 80001fc:	f000 fea1 	bl	8000f42 <HAL_ADC_PollForConversion>
		AD_RES = HAL_ADC_GetValue(&hadc1);
 8000200:	480a      	ldr	r0, [pc, #40]	; (800022c <main+0x60>)
 8000202:	f000 ff2d 	bl	8001060 <HAL_ADC_GetValue>
 8000206:	4603      	mov	r3, r0
 8000208:	b29a      	uxth	r2, r3
 800020a:	4b06      	ldr	r3, [pc, #24]	; (8000224 <main+0x58>)
 800020c:	801a      	strh	r2, [r3, #0]
		TIM2->CCR1 = (AD_RES<<4);
 800020e:	4b05      	ldr	r3, [pc, #20]	; (8000224 <main+0x58>)
 8000210:	881b      	ldrh	r3, [r3, #0]
 8000212:	011a      	lsls	r2, r3, #4
 8000214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000218:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(1);
 800021a:	2001      	movs	r0, #1
 800021c:	f000 fafa 	bl	8000814 <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 8000220:	e7e7      	b.n	80001f2 <main+0x26>
 8000222:	bf00      	nop
 8000224:	200000d8 	.word	0x200000d8
 8000228:	2000008c 	.word	0x2000008c
 800022c:	20000028 	.word	0x20000028

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b096      	sub	sp, #88	; 0x58
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0314 	add.w	r3, r7, #20
 800023a:	2244      	movs	r2, #68	; 0x44
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f003 febe 	bl	8003fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	463b      	mov	r3, r7
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000252:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000256:	f001 fdd5 	bl	8001e04 <HAL_PWREx_ControlVoltageScaling>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000260:	f000 f91e 	bl	80004a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000264:	2310      	movs	r3, #16
 8000266:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000268:	2301      	movs	r3, #1
 800026a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000270:	2360      	movs	r3, #96	; 0x60
 8000272:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000274:	2300      	movs	r3, #0
 8000276:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0314 	add.w	r3, r7, #20
 800027c:	4618      	mov	r0, r3
 800027e:	f001 fe17 	bl	8001eb0 <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000288:	f000 f90a 	bl	80004a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000290:	2300      	movs	r3, #0
 8000292:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a0:	463b      	mov	r3, r7
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 fa17 	bl	80026d8 <HAL_RCC_ClockConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002b0:	f000 f8f6 	bl	80004a0 <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3758      	adds	r7, #88	; 0x58
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b086      	sub	sp, #24
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002c2:	463b      	mov	r3, r7
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	611a      	str	r2, [r3, #16]
 80002d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002d2:	4b29      	ldr	r3, [pc, #164]	; (8000378 <MX_ADC1_Init+0xbc>)
 80002d4:	4a29      	ldr	r2, [pc, #164]	; (800037c <MX_ADC1_Init+0xc0>)
 80002d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002d8:	4b27      	ldr	r3, [pc, #156]	; (8000378 <MX_ADC1_Init+0xbc>)
 80002da:	2200      	movs	r2, #0
 80002dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002de:	4b26      	ldr	r3, [pc, #152]	; (8000378 <MX_ADC1_Init+0xbc>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002e4:	4b24      	ldr	r3, [pc, #144]	; (8000378 <MX_ADC1_Init+0xbc>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ea:	4b23      	ldr	r3, [pc, #140]	; (8000378 <MX_ADC1_Init+0xbc>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002f0:	4b21      	ldr	r3, [pc, #132]	; (8000378 <MX_ADC1_Init+0xbc>)
 80002f2:	2204      	movs	r2, #4
 80002f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002f6:	4b20      	ldr	r3, [pc, #128]	; (8000378 <MX_ADC1_Init+0xbc>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002fc:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <MX_ADC1_Init+0xbc>)
 80002fe:	2200      	movs	r2, #0
 8000300:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000302:	4b1d      	ldr	r3, [pc, #116]	; (8000378 <MX_ADC1_Init+0xbc>)
 8000304:	2201      	movs	r2, #1
 8000306:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000308:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <MX_ADC1_Init+0xbc>)
 800030a:	2200      	movs	r2, #0
 800030c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000310:	4b19      	ldr	r3, [pc, #100]	; (8000378 <MX_ADC1_Init+0xbc>)
 8000312:	2200      	movs	r2, #0
 8000314:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <MX_ADC1_Init+0xbc>)
 8000318:	2200      	movs	r2, #0
 800031a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800031c:	4b16      	ldr	r3, [pc, #88]	; (8000378 <MX_ADC1_Init+0xbc>)
 800031e:	2200      	movs	r2, #0
 8000320:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000324:	4b14      	ldr	r3, [pc, #80]	; (8000378 <MX_ADC1_Init+0xbc>)
 8000326:	2200      	movs	r2, #0
 8000328:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800032a:	4b13      	ldr	r3, [pc, #76]	; (8000378 <MX_ADC1_Init+0xbc>)
 800032c:	2200      	movs	r2, #0
 800032e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000332:	4811      	ldr	r0, [pc, #68]	; (8000378 <MX_ADC1_Init+0xbc>)
 8000334:	f000 fc5a 	bl	8000bec <HAL_ADC_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800033e:	f000 f8af 	bl	80004a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000342:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <MX_ADC1_Init+0xc4>)
 8000344:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000346:	2306      	movs	r3, #6
 8000348:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800034a:	2300      	movs	r3, #0
 800034c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800034e:	237f      	movs	r3, #127	; 0x7f
 8000350:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000352:	2304      	movs	r3, #4
 8000354:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800035a:	463b      	mov	r3, r7
 800035c:	4619      	mov	r1, r3
 800035e:	4806      	ldr	r0, [pc, #24]	; (8000378 <MX_ADC1_Init+0xbc>)
 8000360:	f000 fe8c 	bl	800107c <HAL_ADC_ConfigChannel>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800036a:	f000 f899 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	3718      	adds	r7, #24
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000028 	.word	0x20000028
 800037c:	50040000 	.word	0x50040000
 8000380:	19200040 	.word	0x19200040

08000384 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b08e      	sub	sp, #56	; 0x38
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800038a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000398:	f107 031c 	add.w	r3, r7, #28
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003a4:	463b      	mov	r3, r7
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
 80003b0:	611a      	str	r2, [r3, #16]
 80003b2:	615a      	str	r2, [r3, #20]
 80003b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003b6:	4b2d      	ldr	r3, [pc, #180]	; (800046c <MX_TIM2_Init+0xe8>)
 80003b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003be:	4b2b      	ldr	r3, [pc, #172]	; (800046c <MX_TIM2_Init+0xe8>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c4:	4b29      	ldr	r3, [pc, #164]	; (800046c <MX_TIM2_Init+0xe8>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80003ca:	4b28      	ldr	r3, [pc, #160]	; (800046c <MX_TIM2_Init+0xe8>)
 80003cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d2:	4b26      	ldr	r3, [pc, #152]	; (800046c <MX_TIM2_Init+0xe8>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003d8:	4b24      	ldr	r3, [pc, #144]	; (800046c <MX_TIM2_Init+0xe8>)
 80003da:	2280      	movs	r2, #128	; 0x80
 80003dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003de:	4823      	ldr	r0, [pc, #140]	; (800046c <MX_TIM2_Init+0xe8>)
 80003e0:	f002 fe4e 	bl	8003080 <HAL_TIM_Base_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80003ea:	f000 f859 	bl	80004a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003f8:	4619      	mov	r1, r3
 80003fa:	481c      	ldr	r0, [pc, #112]	; (800046c <MX_TIM2_Init+0xe8>)
 80003fc:	f003 f8ea 	bl	80035d4 <HAL_TIM_ConfigClockSource>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000406:	f000 f84b 	bl	80004a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800040a:	4818      	ldr	r0, [pc, #96]	; (800046c <MX_TIM2_Init+0xe8>)
 800040c:	f002 fe8f 	bl	800312e <HAL_TIM_PWM_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000416:	f000 f843 	bl	80004a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800041a:	2300      	movs	r3, #0
 800041c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800041e:	2300      	movs	r3, #0
 8000420:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000422:	f107 031c 	add.w	r3, r7, #28
 8000426:	4619      	mov	r1, r3
 8000428:	4810      	ldr	r0, [pc, #64]	; (800046c <MX_TIM2_Init+0xe8>)
 800042a:	f003 fd3f 	bl	8003eac <HAL_TIMEx_MasterConfigSynchronization>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000434:	f000 f834 	bl	80004a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000438:	2360      	movs	r3, #96	; 0x60
 800043a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000440:	2300      	movs	r3, #0
 8000442:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000444:	2300      	movs	r3, #0
 8000446:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000448:	463b      	mov	r3, r7
 800044a:	2200      	movs	r2, #0
 800044c:	4619      	mov	r1, r3
 800044e:	4807      	ldr	r0, [pc, #28]	; (800046c <MX_TIM2_Init+0xe8>)
 8000450:	f002 ffac 	bl	80033ac <HAL_TIM_PWM_ConfigChannel>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800045a:	f000 f821 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800045e:	4803      	ldr	r0, [pc, #12]	; (800046c <MX_TIM2_Init+0xe8>)
 8000460:	f000 f8ca 	bl	80005f8 <HAL_TIM_MspPostInit>

}
 8000464:	bf00      	nop
 8000466:	3738      	adds	r7, #56	; 0x38
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	2000008c 	.word	0x2000008c

08000470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <MX_GPIO_Init+0x2c>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047a:	4a08      	ldr	r2, [pc, #32]	; (800049c <MX_GPIO_Init+0x2c>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <MX_GPIO_Init+0x2c>)
 8000484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000

080004a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a4:	b672      	cpsid	i
}
 80004a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <Error_Handler+0x8>
	...

080004ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <HAL_MspInit+0x44>)
 80004b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004b6:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <HAL_MspInit+0x44>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6613      	str	r3, [r2, #96]	; 0x60
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <HAL_MspInit+0x44>)
 80004c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <HAL_MspInit+0x44>)
 80004cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ce:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <HAL_MspInit+0x44>)
 80004d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d4:	6593      	str	r3, [r2, #88]	; 0x58
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_MspInit+0x44>)
 80004d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000

080004f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b09e      	sub	sp, #120	; 0x78
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	2254      	movs	r2, #84	; 0x54
 8000512:	2100      	movs	r1, #0
 8000514:	4618      	mov	r0, r3
 8000516:	f003 fd53 	bl	8003fc0 <memset>
  if(hadc->Instance==ADC1)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a25      	ldr	r2, [pc, #148]	; (80005b4 <HAL_ADC_MspInit+0xc0>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d143      	bne.n	80005ac <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000524:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000528:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800052a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000530:	2301      	movs	r3, #1
 8000532:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000534:	2301      	movs	r3, #1
 8000536:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000538:	2310      	movs	r3, #16
 800053a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800053c:	2307      	movs	r3, #7
 800053e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000540:	2302      	movs	r3, #2
 8000542:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000544:	2302      	movs	r3, #2
 8000546:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800054c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	4618      	mov	r0, r3
 8000554:	f002 faac 	bl	8002ab0 <HAL_RCCEx_PeriphCLKConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800055e:	f7ff ff9f 	bl	80004a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <HAL_ADC_MspInit+0xc4>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <HAL_ADC_MspInit+0xc4>)
 8000568:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800056c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056e:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <HAL_ADC_MspInit+0xc4>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <HAL_ADC_MspInit+0xc4>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <HAL_ADC_MspInit+0xc4>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_ADC_MspInit+0xc4>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000592:	2302      	movs	r3, #2
 8000594:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000596:	230b      	movs	r3, #11
 8000598:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005a2:	4619      	mov	r1, r3
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a8:	f001 fab4 	bl	8001b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005ac:	bf00      	nop
 80005ae:	3778      	adds	r7, #120	; 0x78
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	50040000 	.word	0x50040000
 80005b8:	40021000 	.word	0x40021000

080005bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005cc:	d10b      	bne.n	80005e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <HAL_TIM_Base_MspInit+0x38>)
 80005d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d2:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <HAL_TIM_Base_MspInit+0x38>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6593      	str	r3, [r2, #88]	; 0x58
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_TIM_Base_MspInit+0x38>)
 80005dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000618:	d11c      	bne.n	8000654 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <HAL_TIM_MspPostInit+0x64>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	4a0f      	ldr	r2, [pc, #60]	; (800065c <HAL_TIM_MspPostInit+0x64>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <HAL_TIM_MspPostInit+0x64>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000632:	2301      	movs	r3, #1
 8000634:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000636:	2302      	movs	r3, #2
 8000638:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000642:	2301      	movs	r3, #1
 8000644:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	4619      	mov	r1, r3
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f001 fa60 	bl	8001b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000654:	bf00      	nop
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40021000 	.word	0x40021000

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <NMI_Handler+0x4>

08000666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <HardFault_Handler+0x4>

0800066c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <MemManage_Handler+0x4>

08000672 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <BusFault_Handler+0x4>

08000678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800067c:	e7fe      	b.n	800067c <UsageFault_Handler+0x4>

0800067e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ac:	f000 f892 	bl	80007d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <SystemInit+0x20>)
 80006ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006be:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <SystemInit+0x20>)
 80006c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000710 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006dc:	f7ff ffea 	bl	80006b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e2:	490d      	ldr	r1, [pc, #52]	; (8000718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e4:	4a0d      	ldr	r2, [pc, #52]	; (800071c <LoopForever+0xe>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e8:	e002      	b.n	80006f0 <LoopCopyDataInit>

080006ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ee:	3304      	adds	r3, #4

080006f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f4:	d3f9      	bcc.n	80006ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f6:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f8:	4c0a      	ldr	r4, [pc, #40]	; (8000724 <LoopForever+0x16>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006fc:	e001      	b.n	8000702 <LoopFillZerobss>

080006fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000700:	3204      	adds	r2, #4

08000702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000704:	d3fb      	bcc.n	80006fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000706:	f003 fc37 	bl	8003f78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800070a:	f7ff fd5f 	bl	80001cc <main>

0800070e <LoopForever>:

LoopForever:
    b LoopForever
 800070e:	e7fe      	b.n	800070e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000710:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000718:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800071c:	08004030 	.word	0x08004030
  ldr r2, =_sbss
 8000720:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000724:	200000e0 	.word	0x200000e0

08000728 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC1_IRQHandler>

0800072a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000730:	2300      	movs	r3, #0
 8000732:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000734:	2003      	movs	r0, #3
 8000736:	f001 f9b9 	bl	8001aac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800073a:	200f      	movs	r0, #15
 800073c:	f000 f80e 	bl	800075c <HAL_InitTick>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d002      	beq.n	800074c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	71fb      	strb	r3, [r7, #7]
 800074a:	e001      	b.n	8000750 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800074c:	f7ff feae 	bl	80004ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000750:	79fb      	ldrb	r3, [r7, #7]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <HAL_InitTick+0x6c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d023      	beq.n	80007b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <HAL_InitTick+0x70>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <HAL_InitTick+0x6c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000782:	fbb2 f3f3 	udiv	r3, r2, r3
 8000786:	4618      	mov	r0, r3
 8000788:	f001 f9b7 	bl	8001afa <HAL_SYSTICK_Config>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d10f      	bne.n	80007b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b0f      	cmp	r3, #15
 8000796:	d809      	bhi.n	80007ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000798:	2200      	movs	r2, #0
 800079a:	6879      	ldr	r1, [r7, #4]
 800079c:	f04f 30ff 	mov.w	r0, #4294967295
 80007a0:	f001 f98f 	bl	8001ac2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007a4:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <HAL_InitTick+0x74>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6013      	str	r3, [r2, #0]
 80007aa:	e007      	b.n	80007bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007ac:	2301      	movs	r3, #1
 80007ae:	73fb      	strb	r3, [r7, #15]
 80007b0:	e004      	b.n	80007bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	e001      	b.n	80007bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007b8:	2301      	movs	r3, #1
 80007ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000000 	.word	0x20000000
 80007d0:	20000004 	.word	0x20000004

080007d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_IncTick+0x20>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_IncTick+0x24>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <HAL_IncTick+0x24>)
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000008 	.word	0x20000008
 80007f8:	200000dc 	.word	0x200000dc

080007fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <HAL_GetTick+0x14>)
 8000802:	681b      	ldr	r3, [r3, #0]
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	200000dc 	.word	0x200000dc

08000814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800081c:	f7ff ffee 	bl	80007fc <HAL_GetTick>
 8000820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800082c:	d005      	beq.n	800083a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_Delay+0x44>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4413      	add	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800083a:	bf00      	nop
 800083c:	f7ff ffde 	bl	80007fc <HAL_GetTick>
 8000840:	4602      	mov	r2, r0
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	429a      	cmp	r2, r3
 800084a:	d8f7      	bhi.n	800083c <HAL_Delay+0x28>
  {
  }
}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000008 	.word	0x20000008

0800085c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	431a      	orrs	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	609a      	str	r2, [r3, #8]
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
 800088a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	431a      	orrs	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	609a      	str	r2, [r3, #8]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
 80008d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	3360      	adds	r3, #96	; 0x60
 80008d6:	461a      	mov	r2, r3
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	4413      	add	r3, r2
 80008de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <LL_ADC_SetOffset+0x44>)
 80008e6:	4013      	ands	r3, r2
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80008ee:	683a      	ldr	r2, [r7, #0]
 80008f0:	430a      	orrs	r2, r1
 80008f2:	4313      	orrs	r3, r2
 80008f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80008fc:	bf00      	nop
 80008fe:	371c      	adds	r7, #28
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	03fff000 	.word	0x03fff000

0800090c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3360      	adds	r3, #96	; 0x60
 800091a:	461a      	mov	r2, r3
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800092c:	4618      	mov	r0, r3
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3360      	adds	r3, #96	; 0x60
 8000948:	461a      	mov	r2, r3
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	431a      	orrs	r2, r3
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000962:	bf00      	nop
 8000964:	371c      	adds	r7, #28
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	68db      	ldr	r3, [r3, #12]
 800097a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800097e:	2b00      	cmp	r3, #0
 8000980:	d101      	bne.n	8000986 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000982:	2301      	movs	r3, #1
 8000984:	e000      	b.n	8000988 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000986:	2300      	movs	r3, #0
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000994:	b480      	push	{r7}
 8000996:	b087      	sub	sp, #28
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	3330      	adds	r3, #48	; 0x30
 80009a4:	461a      	mov	r2, r3
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	f003 030c 	and.w	r3, r3, #12
 80009b0:	4413      	add	r3, r2
 80009b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	f003 031f 	and.w	r3, r3, #31
 80009be:	211f      	movs	r1, #31
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	43db      	mvns	r3, r3
 80009c6:	401a      	ands	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	0e9b      	lsrs	r3, r3, #26
 80009cc:	f003 011f 	and.w	r1, r3, #31
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	f003 031f 	and.w	r3, r3, #31
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	431a      	orrs	r2, r3
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009e0:	bf00      	nop
 80009e2:	371c      	adds	r7, #28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b087      	sub	sp, #28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3314      	adds	r3, #20
 80009fc:	461a      	mov	r2, r3
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	0e5b      	lsrs	r3, r3, #25
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	4413      	add	r3, r2
 8000a0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	0d1b      	lsrs	r3, r3, #20
 8000a14:	f003 031f 	and.w	r3, r3, #31
 8000a18:	2107      	movs	r1, #7
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	401a      	ands	r2, r3
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	0d1b      	lsrs	r3, r3, #20
 8000a26:	f003 031f 	and.w	r3, r3, #31
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a30:	431a      	orrs	r2, r3
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000a36:	bf00      	nop
 8000a38:	371c      	adds	r7, #28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	401a      	ands	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f003 0318 	and.w	r3, r3, #24
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000a68:	40d9      	lsrs	r1, r3
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	400b      	ands	r3, r1
 8000a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a72:	431a      	orrs	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	0007ffff 	.word	0x0007ffff

08000a8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000a9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	6093      	str	r3, [r2, #8]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ac4:	d101      	bne.n	8000aca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000ae8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000aec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000b14:	d101      	bne.n	8000b1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000b16:	2301      	movs	r3, #1
 8000b18:	e000      	b.n	8000b1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b3c:	f043 0201 	orr.w	r2, r3, #1
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d101      	bne.n	8000b68 <LL_ADC_IsEnabled+0x18>
 8000b64:	2301      	movs	r3, #1
 8000b66:	e000      	b.n	8000b6a <LL_ADC_IsEnabled+0x1a>
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b8a:	f043 0204 	orr.w	r2, r3, #4
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	d101      	bne.n	8000bb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	f003 0308 	and.w	r3, r3, #8
 8000bd4:	2b08      	cmp	r3, #8
 8000bd6:	d101      	bne.n	8000bdc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e000      	b.n	8000bde <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d101      	bne.n	8000c06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e12c      	b.n	8000e60 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d109      	bne.n	8000c28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff fc6d 	bl	80004f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff3f 	bl	8000ab0 <LL_ADC_IsDeepPowerDownEnabled>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d004      	beq.n	8000c42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff25 	bl	8000a8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff5a 	bl	8000b00 <LL_ADC_IsInternalRegulatorEnabled>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d115      	bne.n	8000c7e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff3e 	bl	8000ad8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000c5c:	4b82      	ldr	r3, [pc, #520]	; (8000e68 <HAL_ADC_Init+0x27c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	099b      	lsrs	r3, r3, #6
 8000c62:	4a82      	ldr	r2, [pc, #520]	; (8000e6c <HAL_ADC_Init+0x280>)
 8000c64:	fba2 2303 	umull	r2, r3, r2, r3
 8000c68:	099b      	lsrs	r3, r3, #6
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c70:	e002      	b.n	8000c78 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f9      	bne.n	8000c72 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff ff3c 	bl	8000b00 <LL_ADC_IsInternalRegulatorEnabled>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10d      	bne.n	8000caa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c92:	f043 0210 	orr.w	r2, r3, #16
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9e:	f043 0201 	orr.w	r2, r3, #1
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff75 	bl	8000b9e <LL_ADC_REG_IsConversionOngoing>
 8000cb4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cba:	f003 0310 	and.w	r3, r3, #16
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 80c5 	bne.w	8000e4e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f040 80c1 	bne.w	8000e4e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cd0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000cd4:	f043 0202 	orr.w	r2, r3, #2
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff35 	bl	8000b50 <LL_ADC_IsEnabled>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d10b      	bne.n	8000d04 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000cec:	4860      	ldr	r0, [pc, #384]	; (8000e70 <HAL_ADC_Init+0x284>)
 8000cee:	f7ff ff2f 	bl	8000b50 <LL_ADC_IsEnabled>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d105      	bne.n	8000d04 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	485d      	ldr	r0, [pc, #372]	; (8000e74 <HAL_ADC_Init+0x288>)
 8000d00:	f7ff fdac 	bl	800085c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	7e5b      	ldrb	r3, [r3, #25]
 8000d08:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d0e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000d14:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000d1a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d22:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d106      	bne.n	8000d40 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d36:	3b01      	subs	r3, #1
 8000d38:	045b      	lsls	r3, r3, #17
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d009      	beq.n	8000d5c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	4b45      	ldr	r3, [pc, #276]	; (8000e78 <HAL_ADC_Init+0x28c>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	6812      	ldr	r2, [r2, #0]
 8000d6a:	69b9      	ldr	r1, [r7, #24]
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff12 	bl	8000b9e <LL_ADC_REG_IsConversionOngoing>
 8000d7a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff1f 	bl	8000bc4 <LL_ADC_INJ_IsConversionOngoing>
 8000d86:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d13d      	bne.n	8000e0a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d13a      	bne.n	8000e0a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d98:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000da0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000db0:	f023 0302 	bic.w	r3, r3, #2
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	6812      	ldr	r2, [r2, #0]
 8000db8:	69b9      	ldr	r1, [r7, #24]
 8000dba:	430b      	orrs	r3, r1
 8000dbc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d118      	bne.n	8000dfa <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000dd2:	f023 0304 	bic.w	r3, r3, #4
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000dde:	4311      	orrs	r1, r2
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000de4:	4311      	orrs	r1, r2
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000dea:	430a      	orrs	r2, r1
 8000dec:	431a      	orrs	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f042 0201 	orr.w	r2, r2, #1
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	e007      	b.n	8000e0a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	691a      	ldr	r2, [r3, #16]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f022 0201 	bic.w	r2, r2, #1
 8000e08:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d10c      	bne.n	8000e2c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	f023 010f 	bic.w	r1, r3, #15
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69db      	ldr	r3, [r3, #28]
 8000e20:	1e5a      	subs	r2, r3, #1
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	430a      	orrs	r2, r1
 8000e28:	631a      	str	r2, [r3, #48]	; 0x30
 8000e2a:	e007      	b.n	8000e3c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 020f 	bic.w	r2, r2, #15
 8000e3a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e40:	f023 0303 	bic.w	r3, r3, #3
 8000e44:	f043 0201 	orr.w	r2, r3, #1
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	655a      	str	r2, [r3, #84]	; 0x54
 8000e4c:	e007      	b.n	8000e5e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e52:	f043 0210 	orr.w	r2, r3, #16
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	053e2d63 	.word	0x053e2d63
 8000e70:	50040000 	.word	0x50040000
 8000e74:	50040300 	.word	0x50040300
 8000e78:	fff0c007 	.word	0xfff0c007

08000e7c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fe88 	bl	8000b9e <LL_ADC_REG_IsConversionOngoing>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d14f      	bne.n	8000f34 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d101      	bne.n	8000ea2 <HAL_ADC_Start+0x26>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e04b      	b.n	8000f3a <HAL_ADC_Start+0xbe>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 fcc6 	bl	800183c <ADC_Enable>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d137      	bne.n	8000f2a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ebe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ec2:	f023 0301 	bic.w	r3, r3, #1
 8000ec6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000eda:	d106      	bne.n	8000eea <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee0:	f023 0206 	bic.w	r2, r3, #6
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	659a      	str	r2, [r3, #88]	; 0x58
 8000ee8:	e002      	b.n	8000ef0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	221c      	movs	r2, #28
 8000ef6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d007      	beq.n	8000f1e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fe27 	bl	8000b76 <LL_ADC_REG_StartConversion>
 8000f28:	e006      	b.n	8000f38 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000f32:	e001      	b.n	8000f38 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f34:	2302      	movs	r3, #2
 8000f36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	2b08      	cmp	r3, #8
 8000f52:	d102      	bne.n	8000f5a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000f54:	2308      	movs	r3, #8
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e010      	b.n	8000f7c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d007      	beq.n	8000f78 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f6c:	f043 0220 	orr.w	r2, r3, #32
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e06f      	b.n	8001058 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8000f78:	2304      	movs	r3, #4
 8000f7a:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f7c:	f7ff fc3e 	bl	80007fc <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000f82:	e021      	b.n	8000fc8 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8a:	d01d      	beq.n	8000fc8 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000f8c:	f7ff fc36 	bl	80007fc <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d302      	bcc.n	8000fa2 <HAL_ADC_PollForConversion+0x60>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d112      	bne.n	8000fc8 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	4013      	ands	r3, r2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d10b      	bne.n	8000fc8 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fb4:	f043 0204 	orr.w	r2, r3, #4
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e047      	b.n	8001058 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0d6      	beq.n	8000f84 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fcc1 	bl	800096e <LL_ADC_REG_IsTriggerSourceSWStart>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d01c      	beq.n	800102c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7e5b      	ldrb	r3, [r3, #25]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d118      	bne.n	800102c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	2b08      	cmp	r3, #8
 8001006:	d111      	bne.n	800102c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800100c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d105      	bne.n	800102c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001024:	f043 0201 	orr.w	r2, r3, #1
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	2b08      	cmp	r3, #8
 8001038:	d104      	bne.n	8001044 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2208      	movs	r2, #8
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	e008      	b.n	8001056 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d103      	bne.n	8001056 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	220c      	movs	r2, #12
 8001054:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b0b6      	sub	sp, #216	; 0xd8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001096:	2b01      	cmp	r3, #1
 8001098:	d101      	bne.n	800109e <HAL_ADC_ConfigChannel+0x22>
 800109a:	2302      	movs	r3, #2
 800109c:	e3b9      	b.n	8001812 <HAL_ADC_ConfigChannel+0x796>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2201      	movs	r2, #1
 80010a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fd77 	bl	8000b9e <LL_ADC_REG_IsConversionOngoing>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f040 839e 	bne.w	80017f4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b05      	cmp	r3, #5
 80010be:	d824      	bhi.n	800110a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	3b02      	subs	r3, #2
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d81b      	bhi.n	8001102 <HAL_ADC_ConfigChannel+0x86>
 80010ca:	a201      	add	r2, pc, #4	; (adr r2, 80010d0 <HAL_ADC_ConfigChannel+0x54>)
 80010cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d0:	080010e1 	.word	0x080010e1
 80010d4:	080010e9 	.word	0x080010e9
 80010d8:	080010f1 	.word	0x080010f1
 80010dc:	080010f9 	.word	0x080010f9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	220c      	movs	r2, #12
 80010e4:	605a      	str	r2, [r3, #4]
          break;
 80010e6:	e011      	b.n	800110c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2212      	movs	r2, #18
 80010ec:	605a      	str	r2, [r3, #4]
          break;
 80010ee:	e00d      	b.n	800110c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2218      	movs	r2, #24
 80010f4:	605a      	str	r2, [r3, #4]
          break;
 80010f6:	e009      	b.n	800110c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010fe:	605a      	str	r2, [r3, #4]
          break;
 8001100:	e004      	b.n	800110c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2206      	movs	r2, #6
 8001106:	605a      	str	r2, [r3, #4]
          break;
 8001108:	e000      	b.n	800110c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800110a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	6859      	ldr	r1, [r3, #4]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	f7ff fc3b 	bl	8000994 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fd3b 	bl	8000b9e <LL_ADC_REG_IsConversionOngoing>
 8001128:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fd47 	bl	8000bc4 <LL_ADC_INJ_IsConversionOngoing>
 8001136:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800113a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800113e:	2b00      	cmp	r3, #0
 8001140:	f040 81a6 	bne.w	8001490 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001144:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001148:	2b00      	cmp	r3, #0
 800114a:	f040 81a1 	bne.w	8001490 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	6819      	ldr	r1, [r3, #0]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	461a      	mov	r2, r3
 800115c:	f7ff fc46 	bl	80009ec <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	695a      	ldr	r2, [r3, #20]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	08db      	lsrs	r3, r3, #3
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	2b04      	cmp	r3, #4
 8001180:	d00a      	beq.n	8001198 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	6919      	ldr	r1, [r3, #16]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001192:	f7ff fb97 	bl	80008c4 <LL_ADC_SetOffset>
 8001196:	e17b      	b.n	8001490 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fbb4 	bl	800090c <LL_ADC_GetOffsetChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10a      	bne.n	80011c4 <HAL_ADC_ConfigChannel+0x148>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fba9 	bl	800090c <LL_ADC_GetOffsetChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	0e9b      	lsrs	r3, r3, #26
 80011be:	f003 021f 	and.w	r2, r3, #31
 80011c2:	e01e      	b.n	8001202 <HAL_ADC_ConfigChannel+0x186>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fb9e 	bl	800090c <LL_ADC_GetOffsetChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80011da:	fa93 f3a3 	rbit	r3, r3
 80011de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80011ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80011f2:	2320      	movs	r3, #32
 80011f4:	e004      	b.n	8001200 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80011f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80011fa:	fab3 f383 	clz	r3, r3
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800120a:	2b00      	cmp	r3, #0
 800120c:	d105      	bne.n	800121a <HAL_ADC_ConfigChannel+0x19e>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	0e9b      	lsrs	r3, r3, #26
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	e018      	b.n	800124c <HAL_ADC_ConfigChannel+0x1d0>
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001226:	fa93 f3a3 	rbit	r3, r3
 800122a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800122e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001232:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001236:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800123e:	2320      	movs	r3, #32
 8001240:	e004      	b.n	800124c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001242:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001246:	fab3 f383 	clz	r3, r3
 800124a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800124c:	429a      	cmp	r2, r3
 800124e:	d106      	bne.n	800125e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fb6d 	bl	8000938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2101      	movs	r1, #1
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fb51 	bl	800090c <LL_ADC_GetOffsetChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10a      	bne.n	800128a <HAL_ADC_ConfigChannel+0x20e>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2101      	movs	r1, #1
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fb46 	bl	800090c <LL_ADC_GetOffsetChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	0e9b      	lsrs	r3, r3, #26
 8001284:	f003 021f 	and.w	r2, r3, #31
 8001288:	e01e      	b.n	80012c8 <HAL_ADC_ConfigChannel+0x24c>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2101      	movs	r1, #1
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fb3b 	bl	800090c <LL_ADC_GetOffsetChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80012a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80012ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80012b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80012b8:	2320      	movs	r3, #32
 80012ba:	e004      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80012bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012c0:	fab3 f383 	clz	r3, r3
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d105      	bne.n	80012e0 <HAL_ADC_ConfigChannel+0x264>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	0e9b      	lsrs	r3, r3, #26
 80012da:	f003 031f 	and.w	r3, r3, #31
 80012de:	e018      	b.n	8001312 <HAL_ADC_ConfigChannel+0x296>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012ec:	fa93 f3a3 	rbit	r3, r3
 80012f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80012f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80012fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001304:	2320      	movs	r3, #32
 8001306:	e004      	b.n	8001312 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001308:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800130c:	fab3 f383 	clz	r3, r3
 8001310:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001312:	429a      	cmp	r2, r3
 8001314:	d106      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2200      	movs	r2, #0
 800131c:	2101      	movs	r1, #1
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fb0a 	bl	8000938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2102      	movs	r1, #2
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff faee 	bl	800090c <LL_ADC_GetOffsetChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10a      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x2d4>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2102      	movs	r1, #2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fae3 	bl	800090c <LL_ADC_GetOffsetChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	0e9b      	lsrs	r3, r3, #26
 800134a:	f003 021f 	and.w	r2, r3, #31
 800134e:	e01e      	b.n	800138e <HAL_ADC_ConfigChannel+0x312>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2102      	movs	r1, #2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fad8 	bl	800090c <LL_ADC_GetOffsetChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001366:	fa93 f3a3 	rbit	r3, r3
 800136a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800136e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001372:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001376:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800137e:	2320      	movs	r3, #32
 8001380:	e004      	b.n	800138c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001382:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001386:	fab3 f383 	clz	r3, r3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001396:	2b00      	cmp	r3, #0
 8001398:	d105      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0x32a>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	0e9b      	lsrs	r3, r3, #26
 80013a0:	f003 031f 	and.w	r3, r3, #31
 80013a4:	e016      	b.n	80013d4 <HAL_ADC_ConfigChannel+0x358>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013b2:	fa93 f3a3 	rbit	r3, r3
 80013b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80013b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80013be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80013c6:	2320      	movs	r3, #32
 80013c8:	e004      	b.n	80013d4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80013ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013ce:	fab3 f383 	clz	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d106      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2200      	movs	r2, #0
 80013de:	2102      	movs	r1, #2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff faa9 	bl	8000938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2103      	movs	r1, #3
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fa8d 	bl	800090c <LL_ADC_GetOffsetChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d10a      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x396>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2103      	movs	r1, #3
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fa82 	bl	800090c <LL_ADC_GetOffsetChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	0e9b      	lsrs	r3, r3, #26
 800140c:	f003 021f 	and.w	r2, r3, #31
 8001410:	e017      	b.n	8001442 <HAL_ADC_ConfigChannel+0x3c6>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2103      	movs	r1, #3
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fa77 	bl	800090c <LL_ADC_GetOffsetChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001424:	fa93 f3a3 	rbit	r3, r3
 8001428:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800142a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800142c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800142e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001434:	2320      	movs	r3, #32
 8001436:	e003      	b.n	8001440 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800143a:	fab3 f383 	clz	r3, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800144a:	2b00      	cmp	r3, #0
 800144c:	d105      	bne.n	800145a <HAL_ADC_ConfigChannel+0x3de>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	0e9b      	lsrs	r3, r3, #26
 8001454:	f003 031f 	and.w	r3, r3, #31
 8001458:	e011      	b.n	800147e <HAL_ADC_ConfigChannel+0x402>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001462:	fa93 f3a3 	rbit	r3, r3
 8001466:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800146a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800146c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001472:	2320      	movs	r3, #32
 8001474:	e003      	b.n	800147e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001478:	fab3 f383 	clz	r3, r3
 800147c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800147e:	429a      	cmp	r2, r3
 8001480:	d106      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2200      	movs	r2, #0
 8001488:	2103      	movs	r1, #3
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fa54 	bl	8000938 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fb5b 	bl	8000b50 <LL_ADC_IsEnabled>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	f040 813f 	bne.w	8001720 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	6819      	ldr	r1, [r3, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	461a      	mov	r2, r3
 80014b0:	f7ff fac8 	bl	8000a44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	4a8e      	ldr	r2, [pc, #568]	; (80016f4 <HAL_ADC_ConfigChannel+0x678>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	f040 8130 	bne.w	8001720 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10b      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x46c>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	0e9b      	lsrs	r3, r3, #26
 80014d6:	3301      	adds	r3, #1
 80014d8:	f003 031f 	and.w	r3, r3, #31
 80014dc:	2b09      	cmp	r3, #9
 80014de:	bf94      	ite	ls
 80014e0:	2301      	movls	r3, #1
 80014e2:	2300      	movhi	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	e019      	b.n	800151c <HAL_ADC_ConfigChannel+0x4a0>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014f0:	fa93 f3a3 	rbit	r3, r3
 80014f4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80014f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014f8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80014fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001500:	2320      	movs	r3, #32
 8001502:	e003      	b.n	800150c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001504:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	3301      	adds	r3, #1
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	2b09      	cmp	r3, #9
 8001514:	bf94      	ite	ls
 8001516:	2301      	movls	r3, #1
 8001518:	2300      	movhi	r3, #0
 800151a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800151c:	2b00      	cmp	r3, #0
 800151e:	d079      	beq.n	8001614 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001528:	2b00      	cmp	r3, #0
 800152a:	d107      	bne.n	800153c <HAL_ADC_ConfigChannel+0x4c0>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	0e9b      	lsrs	r3, r3, #26
 8001532:	3301      	adds	r3, #1
 8001534:	069b      	lsls	r3, r3, #26
 8001536:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800153a:	e015      	b.n	8001568 <HAL_ADC_ConfigChannel+0x4ec>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001544:	fa93 f3a3 	rbit	r3, r3
 8001548:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800154a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800154c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800154e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001554:	2320      	movs	r3, #32
 8001556:	e003      	b.n	8001560 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800155a:	fab3 f383 	clz	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	3301      	adds	r3, #1
 8001562:	069b      	lsls	r3, r3, #26
 8001564:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001570:	2b00      	cmp	r3, #0
 8001572:	d109      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x50c>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	0e9b      	lsrs	r3, r3, #26
 800157a:	3301      	adds	r3, #1
 800157c:	f003 031f 	and.w	r3, r3, #31
 8001580:	2101      	movs	r1, #1
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	e017      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x53c>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001590:	fa93 f3a3 	rbit	r3, r3
 8001594:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001598:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800159a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80015a0:	2320      	movs	r3, #32
 80015a2:	e003      	b.n	80015ac <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80015a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015a6:	fab3 f383 	clz	r3, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	3301      	adds	r3, #1
 80015ae:	f003 031f 	and.w	r3, r3, #31
 80015b2:	2101      	movs	r1, #1
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	ea42 0103 	orr.w	r1, r2, r3
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10a      	bne.n	80015de <HAL_ADC_ConfigChannel+0x562>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	0e9b      	lsrs	r3, r3, #26
 80015ce:	3301      	adds	r3, #1
 80015d0:	f003 021f 	and.w	r2, r3, #31
 80015d4:	4613      	mov	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4413      	add	r3, r2
 80015da:	051b      	lsls	r3, r3, #20
 80015dc:	e018      	b.n	8001610 <HAL_ADC_ConfigChannel+0x594>
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015e6:	fa93 f3a3 	rbit	r3, r3
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80015ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80015f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80015f6:	2320      	movs	r3, #32
 80015f8:	e003      	b.n	8001602 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80015fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015fc:	fab3 f383 	clz	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	3301      	adds	r3, #1
 8001604:	f003 021f 	and.w	r2, r3, #31
 8001608:	4613      	mov	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001610:	430b      	orrs	r3, r1
 8001612:	e080      	b.n	8001716 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800161c:	2b00      	cmp	r3, #0
 800161e:	d107      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x5b4>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0e9b      	lsrs	r3, r3, #26
 8001626:	3301      	adds	r3, #1
 8001628:	069b      	lsls	r3, r3, #26
 800162a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800162e:	e015      	b.n	800165c <HAL_ADC_ConfigChannel+0x5e0>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001638:	fa93 f3a3 	rbit	r3, r3
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800163e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001640:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001648:	2320      	movs	r3, #32
 800164a:	e003      	b.n	8001654 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800164c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164e:	fab3 f383 	clz	r3, r3
 8001652:	b2db      	uxtb	r3, r3
 8001654:	3301      	adds	r3, #1
 8001656:	069b      	lsls	r3, r3, #26
 8001658:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001664:	2b00      	cmp	r3, #0
 8001666:	d109      	bne.n	800167c <HAL_ADC_ConfigChannel+0x600>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	0e9b      	lsrs	r3, r3, #26
 800166e:	3301      	adds	r3, #1
 8001670:	f003 031f 	and.w	r3, r3, #31
 8001674:	2101      	movs	r1, #1
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	e017      	b.n	80016ac <HAL_ADC_ConfigChannel+0x630>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	fa93 f3a3 	rbit	r3, r3
 8001688:	61fb      	str	r3, [r7, #28]
  return result;
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001694:	2320      	movs	r3, #32
 8001696:	e003      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	fab3 f383 	clz	r3, r3
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	3301      	adds	r3, #1
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	2101      	movs	r1, #1
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	ea42 0103 	orr.w	r1, r2, r3
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10d      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x65c>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0e9b      	lsrs	r3, r3, #26
 80016c2:	3301      	adds	r3, #1
 80016c4:	f003 021f 	and.w	r2, r3, #31
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	3b1e      	subs	r3, #30
 80016d0:	051b      	lsls	r3, r3, #20
 80016d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016d6:	e01d      	b.n	8001714 <HAL_ADC_ConfigChannel+0x698>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa93 f3a3 	rbit	r3, r3
 80016e4:	613b      	str	r3, [r7, #16]
  return result;
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d103      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80016f0:	2320      	movs	r3, #32
 80016f2:	e005      	b.n	8001700 <HAL_ADC_ConfigChannel+0x684>
 80016f4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	fab3 f383 	clz	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	3301      	adds	r3, #1
 8001702:	f003 021f 	and.w	r2, r3, #31
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	3b1e      	subs	r3, #30
 800170e:	051b      	lsls	r3, r3, #20
 8001710:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001714:	430b      	orrs	r3, r1
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	6892      	ldr	r2, [r2, #8]
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff f966 	bl	80009ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b3d      	ldr	r3, [pc, #244]	; (800181c <HAL_ADC_ConfigChannel+0x7a0>)
 8001726:	4013      	ands	r3, r2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d06c      	beq.n	8001806 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800172c:	483c      	ldr	r0, [pc, #240]	; (8001820 <HAL_ADC_ConfigChannel+0x7a4>)
 800172e:	f7ff f8bb 	bl	80008a8 <LL_ADC_GetCommonPathInternalCh>
 8001732:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a3a      	ldr	r2, [pc, #232]	; (8001824 <HAL_ADC_ConfigChannel+0x7a8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d127      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001740:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001744:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d121      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a35      	ldr	r2, [pc, #212]	; (8001828 <HAL_ADC_ConfigChannel+0x7ac>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d157      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001756:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800175a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800175e:	4619      	mov	r1, r3
 8001760:	482f      	ldr	r0, [pc, #188]	; (8001820 <HAL_ADC_ConfigChannel+0x7a4>)
 8001762:	f7ff f88e 	bl	8000882 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001766:	4b31      	ldr	r3, [pc, #196]	; (800182c <HAL_ADC_ConfigChannel+0x7b0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	099b      	lsrs	r3, r3, #6
 800176c:	4a30      	ldr	r2, [pc, #192]	; (8001830 <HAL_ADC_ConfigChannel+0x7b4>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	099b      	lsrs	r3, r3, #6
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001780:	e002      	b.n	8001788 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3b01      	subs	r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f9      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800178e:	e03a      	b.n	8001806 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a27      	ldr	r2, [pc, #156]	; (8001834 <HAL_ADC_ConfigChannel+0x7b8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d113      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x746>
 800179a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800179e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10d      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a1f      	ldr	r2, [pc, #124]	; (8001828 <HAL_ADC_ConfigChannel+0x7ac>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d12a      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017b8:	4619      	mov	r1, r3
 80017ba:	4819      	ldr	r0, [pc, #100]	; (8001820 <HAL_ADC_ConfigChannel+0x7a4>)
 80017bc:	f7ff f861 	bl	8000882 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017c0:	e021      	b.n	8001806 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <HAL_ADC_ConfigChannel+0x7bc>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d11c      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80017cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d116      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a12      	ldr	r2, [pc, #72]	; (8001828 <HAL_ADC_ConfigChannel+0x7ac>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d111      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017ea:	4619      	mov	r1, r3
 80017ec:	480c      	ldr	r0, [pc, #48]	; (8001820 <HAL_ADC_ConfigChannel+0x7a4>)
 80017ee:	f7ff f848 	bl	8000882 <LL_ADC_SetCommonPathInternalCh>
 80017f2:	e008      	b.n	8001806 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f8:	f043 0220 	orr.w	r2, r3, #32
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800180e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001812:	4618      	mov	r0, r3
 8001814:	37d8      	adds	r7, #216	; 0xd8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	80080000 	.word	0x80080000
 8001820:	50040300 	.word	0x50040300
 8001824:	c7520000 	.word	0xc7520000
 8001828:	50040000 	.word	0x50040000
 800182c:	20000000 	.word	0x20000000
 8001830:	053e2d63 	.word	0x053e2d63
 8001834:	cb840000 	.word	0xcb840000
 8001838:	80000001 	.word	0x80000001

0800183c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff f97f 	bl	8000b50 <LL_ADC_IsEnabled>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d169      	bne.n	800192c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	4b36      	ldr	r3, [pc, #216]	; (8001938 <ADC_Enable+0xfc>)
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00d      	beq.n	8001882 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186a:	f043 0210 	orr.w	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	f043 0201 	orr.w	r2, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e055      	b.n	800192e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f94e 	bl	8000b28 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800188c:	482b      	ldr	r0, [pc, #172]	; (800193c <ADC_Enable+0x100>)
 800188e:	f7ff f80b 	bl	80008a8 <LL_ADC_GetCommonPathInternalCh>
 8001892:	4603      	mov	r3, r0
 8001894:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800189c:	4b28      	ldr	r3, [pc, #160]	; (8001940 <ADC_Enable+0x104>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	099b      	lsrs	r3, r3, #6
 80018a2:	4a28      	ldr	r2, [pc, #160]	; (8001944 <ADC_Enable+0x108>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	099b      	lsrs	r3, r3, #6
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	4613      	mov	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80018b6:	e002      	b.n	80018be <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f9      	bne.n	80018b8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80018c4:	f7fe ff9a 	bl	80007fc <HAL_GetTick>
 80018c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018ca:	e028      	b.n	800191e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff f93d 	bl	8000b50 <LL_ADC_IsEnabled>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d104      	bne.n	80018e6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff f921 	bl	8000b28 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018e6:	f7fe ff89 	bl	80007fc <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d914      	bls.n	800191e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d00d      	beq.n	800191e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001906:	f043 0210 	orr.w	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e007      	b.n	800192e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	d1cf      	bne.n	80018cc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	8000003f 	.word	0x8000003f
 800193c:	50040300 	.word	0x50040300
 8001940:	20000000 	.word	0x20000000
 8001944:	053e2d63 	.word	0x053e2d63

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db0a      	blt.n	80019d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	490c      	ldr	r1, [pc, #48]	; (80019f8 <__NVIC_SetPriority+0x4c>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	440b      	add	r3, r1
 80019d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d4:	e00a      	b.n	80019ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4908      	ldr	r1, [pc, #32]	; (80019fc <__NVIC_SetPriority+0x50>)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	3b04      	subs	r3, #4
 80019e4:	0112      	lsls	r2, r2, #4
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	440b      	add	r3, r1
 80019ea:	761a      	strb	r2, [r3, #24]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f1c3 0307 	rsb	r3, r3, #7
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	bf28      	it	cs
 8001a1e:	2304      	movcs	r3, #4
 8001a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3304      	adds	r3, #4
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d902      	bls.n	8001a30 <NVIC_EncodePriority+0x30>
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3b03      	subs	r3, #3
 8001a2e:	e000      	b.n	8001a32 <NVIC_EncodePriority+0x32>
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	401a      	ands	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a48:	f04f 31ff 	mov.w	r1, #4294967295
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	43d9      	mvns	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	4313      	orrs	r3, r2
         );
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a78:	d301      	bcc.n	8001a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00f      	b.n	8001a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <SysTick_Config+0x40>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a86:	210f      	movs	r1, #15
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f7ff ff8e 	bl	80019ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <SysTick_Config+0x40>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a96:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <SysTick_Config+0x40>)
 8001a98:	2207      	movs	r2, #7
 8001a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	e000e010 	.word	0xe000e010

08001aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff47 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad4:	f7ff ff5c 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001ad8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f7ff ff8e 	bl	8001a00 <NVIC_EncodePriority>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff5d 	bl	80019ac <__NVIC_SetPriority>
}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ffb0 	bl	8001a68 <SysTick_Config>
 8001b08:	4603      	mov	r3, r0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b22:	e148      	b.n	8001db6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2101      	movs	r1, #1
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	4013      	ands	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 813a 	beq.w	8001db0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d005      	beq.n	8001b54 <HAL_GPIO_Init+0x40>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d130      	bne.n	8001bb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	f003 0201 	and.w	r2, r3, #1
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d017      	beq.n	8001bf2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	2203      	movs	r2, #3
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d123      	bne.n	8001c46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	08da      	lsrs	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3208      	adds	r2, #8
 8001c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	220f      	movs	r2, #15
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	08da      	lsrs	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3208      	adds	r2, #8
 8001c40:	6939      	ldr	r1, [r7, #16]
 8001c42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0203 	and.w	r2, r3, #3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8094 	beq.w	8001db0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c88:	4b52      	ldr	r3, [pc, #328]	; (8001dd4 <HAL_GPIO_Init+0x2c0>)
 8001c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8c:	4a51      	ldr	r2, [pc, #324]	; (8001dd4 <HAL_GPIO_Init+0x2c0>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6613      	str	r3, [r2, #96]	; 0x60
 8001c94:	4b4f      	ldr	r3, [pc, #316]	; (8001dd4 <HAL_GPIO_Init+0x2c0>)
 8001c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ca0:	4a4d      	ldr	r2, [pc, #308]	; (8001dd8 <HAL_GPIO_Init+0x2c4>)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cca:	d00d      	beq.n	8001ce8 <HAL_GPIO_Init+0x1d4>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a43      	ldr	r2, [pc, #268]	; (8001ddc <HAL_GPIO_Init+0x2c8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d007      	beq.n	8001ce4 <HAL_GPIO_Init+0x1d0>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a42      	ldr	r2, [pc, #264]	; (8001de0 <HAL_GPIO_Init+0x2cc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d101      	bne.n	8001ce0 <HAL_GPIO_Init+0x1cc>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e004      	b.n	8001cea <HAL_GPIO_Init+0x1d6>
 8001ce0:	2307      	movs	r3, #7
 8001ce2:	e002      	b.n	8001cea <HAL_GPIO_Init+0x1d6>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <HAL_GPIO_Init+0x1d6>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	f002 0203 	and.w	r2, r2, #3
 8001cf0:	0092      	lsls	r2, r2, #2
 8001cf2:	4093      	lsls	r3, r2
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cfa:	4937      	ldr	r1, [pc, #220]	; (8001dd8 <HAL_GPIO_Init+0x2c4>)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	3302      	adds	r3, #2
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d08:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d2c:	4a2d      	ldr	r2, [pc, #180]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d32:	4b2c      	ldr	r3, [pc, #176]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d56:	4a23      	ldr	r2, [pc, #140]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d5c:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d80:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d86:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001daa:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <HAL_GPIO_Init+0x2d0>)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3301      	adds	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f47f aeaf 	bne.w	8001b24 <HAL_GPIO_Init+0x10>
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	bf00      	nop
 8001dca:	371c      	adds	r7, #28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	48000400 	.word	0x48000400
 8001de0:	48000800 	.word	0x48000800
 8001de4:	40010400 	.word	0x40010400

08001de8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <HAL_PWREx_GetVoltageRange+0x18>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40007000 	.word	0x40007000

08001e04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e12:	d130      	bne.n	8001e76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e14:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e20:	d038      	beq.n	8001e94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e22:	4b20      	ldr	r3, [pc, #128]	; (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e32:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2232      	movs	r2, #50	; 0x32
 8001e38:	fb02 f303 	mul.w	r3, r2, r3
 8001e3c:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	0c9b      	lsrs	r3, r3, #18
 8001e44:	3301      	adds	r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e48:	e002      	b.n	8001e50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e5c:	d102      	bne.n	8001e64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f2      	bne.n	8001e4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e70:	d110      	bne.n	8001e94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e00f      	b.n	8001e96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e82:	d007      	beq.n	8001e94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e8c:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40007000 	.word	0x40007000
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	431bde83 	.word	0x431bde83

08001eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	f000 bc02 	b.w	80026c8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ec4:	4b96      	ldr	r3, [pc, #600]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ece:	4b94      	ldr	r3, [pc, #592]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0310 	and.w	r3, r3, #16
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80e4 	beq.w	80020ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d007      	beq.n	8001efc <HAL_RCC_OscConfig+0x4c>
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	f040 808b 	bne.w	800200a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	f040 8087 	bne.w	800200a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001efc:	4b88      	ldr	r3, [pc, #544]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_OscConfig+0x64>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e3d9      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1a      	ldr	r2, [r3, #32]
 8001f18:	4b81      	ldr	r3, [pc, #516]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d004      	beq.n	8001f2e <HAL_RCC_OscConfig+0x7e>
 8001f24:	4b7e      	ldr	r3, [pc, #504]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f2c:	e005      	b.n	8001f3a <HAL_RCC_OscConfig+0x8a>
 8001f2e:	4b7c      	ldr	r3, [pc, #496]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d223      	bcs.n	8001f86 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fd54 	bl	80029f0 <RCC_SetFlashLatencyFromMSIRange>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e3ba      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f52:	4b73      	ldr	r3, [pc, #460]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a72      	ldr	r2, [pc, #456]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f58:	f043 0308 	orr.w	r3, r3, #8
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	4b70      	ldr	r3, [pc, #448]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	496d      	ldr	r1, [pc, #436]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f70:	4b6b      	ldr	r3, [pc, #428]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	4968      	ldr	r1, [pc, #416]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
 8001f84:	e025      	b.n	8001fd2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f86:	4b66      	ldr	r3, [pc, #408]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a65      	ldr	r2, [pc, #404]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f8c:	f043 0308 	orr.w	r3, r3, #8
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b63      	ldr	r3, [pc, #396]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4960      	ldr	r1, [pc, #384]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa4:	4b5e      	ldr	r3, [pc, #376]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	495b      	ldr	r1, [pc, #364]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d109      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 fd14 	bl	80029f0 <RCC_SetFlashLatencyFromMSIRange>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e37a      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fd2:	f000 fc81 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	4b51      	ldr	r3, [pc, #324]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	4950      	ldr	r1, [pc, #320]	; (8002124 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	5ccb      	ldrb	r3, [r1, r3]
 8001fe6:	f003 031f 	and.w	r3, r3, #31
 8001fea:	fa22 f303 	lsr.w	r3, r2, r3
 8001fee:	4a4e      	ldr	r2, [pc, #312]	; (8002128 <HAL_RCC_OscConfig+0x278>)
 8001ff0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ff2:	4b4e      	ldr	r3, [pc, #312]	; (800212c <HAL_RCC_OscConfig+0x27c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fbb0 	bl	800075c <HAL_InitTick>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d052      	beq.n	80020ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	e35e      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d032      	beq.n	8002078 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002012:	4b43      	ldr	r3, [pc, #268]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a42      	ldr	r2, [pc, #264]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800201e:	f7fe fbed 	bl	80007fc <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002026:	f7fe fbe9 	bl	80007fc <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e347      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002038:	4b39      	ldr	r3, [pc, #228]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002044:	4b36      	ldr	r3, [pc, #216]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a35      	ldr	r2, [pc, #212]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 800204a:	f043 0308 	orr.w	r3, r3, #8
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b33      	ldr	r3, [pc, #204]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4930      	ldr	r1, [pc, #192]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002062:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	021b      	lsls	r3, r3, #8
 8002070:	492b      	ldr	r1, [pc, #172]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8002072:	4313      	orrs	r3, r2
 8002074:	604b      	str	r3, [r1, #4]
 8002076:	e01a      	b.n	80020ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002078:	4b29      	ldr	r3, [pc, #164]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a28      	ldr	r2, [pc, #160]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002084:	f7fe fbba 	bl	80007fc <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800208c:	f7fe fbb6 	bl	80007fc <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e314      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x1dc>
 80020aa:	e000      	b.n	80020ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d073      	beq.n	80021a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d005      	beq.n	80020cc <HAL_RCC_OscConfig+0x21c>
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d10e      	bne.n	80020e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d10b      	bne.n	80020e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020cc:	4b14      	ldr	r3, [pc, #80]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d063      	beq.n	80021a0 <HAL_RCC_OscConfig+0x2f0>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d15f      	bne.n	80021a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e2f1      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ec:	d106      	bne.n	80020fc <HAL_RCC_OscConfig+0x24c>
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a0b      	ldr	r2, [pc, #44]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e025      	b.n	8002148 <HAL_RCC_OscConfig+0x298>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002104:	d114      	bne.n	8002130 <HAL_RCC_OscConfig+0x280>
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a05      	ldr	r2, [pc, #20]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 800210c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a02      	ldr	r2, [pc, #8]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e013      	b.n	8002148 <HAL_RCC_OscConfig+0x298>
 8002120:	40021000 	.word	0x40021000
 8002124:	08003fe8 	.word	0x08003fe8
 8002128:	20000000 	.word	0x20000000
 800212c:	20000004 	.word	0x20000004
 8002130:	4ba0      	ldr	r3, [pc, #640]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a9f      	ldr	r2, [pc, #636]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b9d      	ldr	r3, [pc, #628]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a9c      	ldr	r2, [pc, #624]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d013      	beq.n	8002178 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7fe fb54 	bl	80007fc <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002158:	f7fe fb50 	bl	80007fc <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	; 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e2ae      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800216a:	4b92      	ldr	r3, [pc, #584]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x2a8>
 8002176:	e014      	b.n	80021a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7fe fb40 	bl	80007fc <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002180:	f7fe fb3c 	bl	80007fc <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b64      	cmp	r3, #100	; 0x64
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e29a      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002192:	4b88      	ldr	r3, [pc, #544]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x2d0>
 800219e:	e000      	b.n	80021a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d060      	beq.n	8002270 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_OscConfig+0x310>
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d119      	bne.n	80021ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d116      	bne.n	80021ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021c0:	4b7c      	ldr	r3, [pc, #496]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_OscConfig+0x328>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e277      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d8:	4b76      	ldr	r3, [pc, #472]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	061b      	lsls	r3, r3, #24
 80021e6:	4973      	ldr	r1, [pc, #460]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021ec:	e040      	b.n	8002270 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d023      	beq.n	800223e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f6:	4b6f      	ldr	r3, [pc, #444]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a6e      	ldr	r2, [pc, #440]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7fe fafb 	bl	80007fc <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220a:	f7fe faf7 	bl	80007fc <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e255      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800221c:	4b65      	ldr	r3, [pc, #404]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002228:	4b62      	ldr	r3, [pc, #392]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	061b      	lsls	r3, r3, #24
 8002236:	495f      	ldr	r1, [pc, #380]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
 800223c:	e018      	b.n	8002270 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223e:	4b5d      	ldr	r3, [pc, #372]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a5c      	ldr	r2, [pc, #368]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224a:	f7fe fad7 	bl	80007fc <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002252:	f7fe fad3 	bl	80007fc <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e231      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002264:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f0      	bne.n	8002252 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d03c      	beq.n	80022f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01c      	beq.n	80022be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002284:	4b4b      	ldr	r3, [pc, #300]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228a:	4a4a      	ldr	r2, [pc, #296]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002294:	f7fe fab2 	bl	80007fc <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229c:	f7fe faae 	bl	80007fc <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e20c      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ae:	4b41      	ldr	r3, [pc, #260]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 80022b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0ef      	beq.n	800229c <HAL_RCC_OscConfig+0x3ec>
 80022bc:	e01b      	b.n	80022f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022be:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 80022c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c4:	4a3b      	ldr	r2, [pc, #236]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 80022c6:	f023 0301 	bic.w	r3, r3, #1
 80022ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ce:	f7fe fa95 	bl	80007fc <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d6:	f7fe fa91 	bl	80007fc <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e1ef      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e8:	4b32      	ldr	r3, [pc, #200]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 80022ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1ef      	bne.n	80022d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80a6 	beq.w	8002450 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002304:	2300      	movs	r3, #0
 8002306:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002308:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10d      	bne.n	8002330 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002314:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002318:	4a26      	ldr	r2, [pc, #152]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 800231a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231e:	6593      	str	r3, [r2, #88]	; 0x58
 8002320:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232c:	2301      	movs	r3, #1
 800232e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002330:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <HAL_RCC_OscConfig+0x508>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d118      	bne.n	800236e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800233c:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <HAL_RCC_OscConfig+0x508>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1d      	ldr	r2, [pc, #116]	; (80023b8 <HAL_RCC_OscConfig+0x508>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002346:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002348:	f7fe fa58 	bl	80007fc <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002350:	f7fe fa54 	bl	80007fc <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1b2      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002362:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <HAL_RCC_OscConfig+0x508>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d108      	bne.n	8002388 <HAL_RCC_OscConfig+0x4d8>
 8002376:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237c:	4a0d      	ldr	r2, [pc, #52]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002386:	e029      	b.n	80023dc <HAL_RCC_OscConfig+0x52c>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b05      	cmp	r3, #5
 800238e:	d115      	bne.n	80023bc <HAL_RCC_OscConfig+0x50c>
 8002390:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002396:	4a07      	ldr	r2, [pc, #28]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002398:	f043 0304 	orr.w	r3, r3, #4
 800239c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a6:	4a03      	ldr	r2, [pc, #12]	; (80023b4 <HAL_RCC_OscConfig+0x504>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023b0:	e014      	b.n	80023dc <HAL_RCC_OscConfig+0x52c>
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40007000 	.word	0x40007000
 80023bc:	4b9a      	ldr	r3, [pc, #616]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 80023be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c2:	4a99      	ldr	r2, [pc, #612]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023cc:	4b96      	ldr	r3, [pc, #600]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d2:	4a95      	ldr	r2, [pc, #596]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 80023d4:	f023 0304 	bic.w	r3, r3, #4
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d016      	beq.n	8002412 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e4:	f7fe fa0a 	bl	80007fc <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ec:	f7fe fa06 	bl	80007fc <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e162      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002402:	4b89      	ldr	r3, [pc, #548]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 8002404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0ed      	beq.n	80023ec <HAL_RCC_OscConfig+0x53c>
 8002410:	e015      	b.n	800243e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002412:	f7fe f9f3 	bl	80007fc <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002418:	e00a      	b.n	8002430 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7fe f9ef 	bl	80007fc <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f241 3288 	movw	r2, #5000	; 0x1388
 8002428:	4293      	cmp	r3, r2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e14b      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002430:	4b7d      	ldr	r3, [pc, #500]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 8002432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1ed      	bne.n	800241a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800243e:	7ffb      	ldrb	r3, [r7, #31]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d105      	bne.n	8002450 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002444:	4b78      	ldr	r3, [pc, #480]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	4a77      	ldr	r2, [pc, #476]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 800244a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d03c      	beq.n	80024d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	2b00      	cmp	r3, #0
 8002462:	d01c      	beq.n	800249e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002464:	4b70      	ldr	r3, [pc, #448]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 8002466:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800246a:	4a6f      	ldr	r2, [pc, #444]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002474:	f7fe f9c2 	bl	80007fc <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800247c:	f7fe f9be 	bl	80007fc <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e11c      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800248e:	4b66      	ldr	r3, [pc, #408]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 8002490:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0ef      	beq.n	800247c <HAL_RCC_OscConfig+0x5cc>
 800249c:	e01b      	b.n	80024d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800249e:	4b62      	ldr	r3, [pc, #392]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 80024a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024a4:	4a60      	ldr	r2, [pc, #384]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ae:	f7fe f9a5 	bl	80007fc <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024b6:	f7fe f9a1 	bl	80007fc <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e0ff      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024c8:	4b57      	ldr	r3, [pc, #348]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 80024ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1ef      	bne.n	80024b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80f3 	beq.w	80026c6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	f040 80c9 	bne.w	800267c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024ea:	4b4f      	ldr	r3, [pc, #316]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f003 0203 	and.w	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d12c      	bne.n	8002558 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	3b01      	subs	r3, #1
 800250a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d123      	bne.n	8002558 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d11b      	bne.n	8002558 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d113      	bne.n	8002558 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	3b01      	subs	r3, #1
 800253e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d109      	bne.n	8002558 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	085b      	lsrs	r3, r3, #1
 8002550:	3b01      	subs	r3, #1
 8002552:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d06b      	beq.n	8002630 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b0c      	cmp	r3, #12
 800255c:	d062      	beq.n	8002624 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800255e:	4b32      	ldr	r3, [pc, #200]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e0ac      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800256e:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a2d      	ldr	r2, [pc, #180]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 8002574:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002578:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800257a:	f7fe f93f 	bl	80007fc <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002582:	f7fe f93b 	bl	80007fc <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e099      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002594:	4b24      	ldr	r3, [pc, #144]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f0      	bne.n	8002582 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a0:	4b21      	ldr	r3, [pc, #132]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	4b21      	ldr	r3, [pc, #132]	; (800262c <HAL_RCC_OscConfig+0x77c>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025b0:	3a01      	subs	r2, #1
 80025b2:	0112      	lsls	r2, r2, #4
 80025b4:	4311      	orrs	r1, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025ba:	0212      	lsls	r2, r2, #8
 80025bc:	4311      	orrs	r1, r2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025c2:	0852      	lsrs	r2, r2, #1
 80025c4:	3a01      	subs	r2, #1
 80025c6:	0552      	lsls	r2, r2, #21
 80025c8:	4311      	orrs	r1, r2
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025ce:	0852      	lsrs	r2, r2, #1
 80025d0:	3a01      	subs	r2, #1
 80025d2:	0652      	lsls	r2, r2, #25
 80025d4:	4311      	orrs	r1, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025da:	06d2      	lsls	r2, r2, #27
 80025dc:	430a      	orrs	r2, r1
 80025de:	4912      	ldr	r1, [pc, #72]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025e4:	4b10      	ldr	r3, [pc, #64]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0f      	ldr	r2, [pc, #60]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 80025ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025f0:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 80025f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025fc:	f7fe f8fe 	bl	80007fc <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002604:	f7fe f8fa 	bl	80007fc <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e058      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002616:	4b04      	ldr	r3, [pc, #16]	; (8002628 <HAL_RCC_OscConfig+0x778>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002622:	e050      	b.n	80026c6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e04f      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
 8002628:	40021000 	.word	0x40021000
 800262c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002630:	4b27      	ldr	r3, [pc, #156]	; (80026d0 <HAL_RCC_OscConfig+0x820>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d144      	bne.n	80026c6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800263c:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <HAL_RCC_OscConfig+0x820>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a23      	ldr	r2, [pc, #140]	; (80026d0 <HAL_RCC_OscConfig+0x820>)
 8002642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002646:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002648:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <HAL_RCC_OscConfig+0x820>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4a20      	ldr	r2, [pc, #128]	; (80026d0 <HAL_RCC_OscConfig+0x820>)
 800264e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002652:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002654:	f7fe f8d2 	bl	80007fc <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265c:	f7fe f8ce 	bl	80007fc <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e02c      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266e:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <HAL_RCC_OscConfig+0x820>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x7ac>
 800267a:	e024      	b.n	80026c6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2b0c      	cmp	r3, #12
 8002680:	d01f      	beq.n	80026c2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002682:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <HAL_RCC_OscConfig+0x820>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <HAL_RCC_OscConfig+0x820>)
 8002688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800268c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268e:	f7fe f8b5 	bl	80007fc <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002696:	f7fe f8b1 	bl	80007fc <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e00f      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a8:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_RCC_OscConfig+0x820>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_RCC_OscConfig+0x820>)
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	4905      	ldr	r1, [pc, #20]	; (80026d0 <HAL_RCC_OscConfig+0x820>)
 80026ba:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_RCC_OscConfig+0x824>)
 80026bc:	4013      	ands	r3, r2
 80026be:	60cb      	str	r3, [r1, #12]
 80026c0:	e001      	b.n	80026c6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3720      	adds	r7, #32
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000
 80026d4:	feeefffc 	.word	0xfeeefffc

080026d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0e7      	b.n	80028bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026ec:	4b75      	ldr	r3, [pc, #468]	; (80028c4 <HAL_RCC_ClockConfig+0x1ec>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d910      	bls.n	800271c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b72      	ldr	r3, [pc, #456]	; (80028c4 <HAL_RCC_ClockConfig+0x1ec>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 0207 	bic.w	r2, r3, #7
 8002702:	4970      	ldr	r1, [pc, #448]	; (80028c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b6e      	ldr	r3, [pc, #440]	; (80028c4 <HAL_RCC_ClockConfig+0x1ec>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0cf      	b.n	80028bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d010      	beq.n	800274a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	4b66      	ldr	r3, [pc, #408]	; (80028c8 <HAL_RCC_ClockConfig+0x1f0>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002734:	429a      	cmp	r2, r3
 8002736:	d908      	bls.n	800274a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002738:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_RCC_ClockConfig+0x1f0>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4960      	ldr	r1, [pc, #384]	; (80028c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002746:	4313      	orrs	r3, r2
 8002748:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d04c      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b03      	cmp	r3, #3
 800275c:	d107      	bne.n	800276e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275e:	4b5a      	ldr	r3, [pc, #360]	; (80028c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d121      	bne.n	80027ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e0a6      	b.n	80028bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002776:	4b54      	ldr	r3, [pc, #336]	; (80028c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d115      	bne.n	80027ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e09a      	b.n	80028bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800278e:	4b4e      	ldr	r3, [pc, #312]	; (80028c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e08e      	b.n	80028bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800279e:	4b4a      	ldr	r3, [pc, #296]	; (80028c8 <HAL_RCC_ClockConfig+0x1f0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e086      	b.n	80028bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027ae:	4b46      	ldr	r3, [pc, #280]	; (80028c8 <HAL_RCC_ClockConfig+0x1f0>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f023 0203 	bic.w	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4943      	ldr	r1, [pc, #268]	; (80028c8 <HAL_RCC_ClockConfig+0x1f0>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c0:	f7fe f81c 	bl	80007fc <HAL_GetTick>
 80027c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	e00a      	b.n	80027de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c8:	f7fe f818 	bl	80007fc <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e06e      	b.n	80028bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027de:	4b3a      	ldr	r3, [pc, #232]	; (80028c8 <HAL_RCC_ClockConfig+0x1f0>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 020c 	and.w	r2, r3, #12
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d1eb      	bne.n	80027c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d010      	beq.n	800281e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	4b31      	ldr	r3, [pc, #196]	; (80028c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002808:	429a      	cmp	r2, r3
 800280a:	d208      	bcs.n	800281e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800280c:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <HAL_RCC_ClockConfig+0x1f0>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	492b      	ldr	r1, [pc, #172]	; (80028c8 <HAL_RCC_ClockConfig+0x1f0>)
 800281a:	4313      	orrs	r3, r2
 800281c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800281e:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d210      	bcs.n	800284e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282c:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <HAL_RCC_ClockConfig+0x1ec>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f023 0207 	bic.w	r2, r3, #7
 8002834:	4923      	ldr	r1, [pc, #140]	; (80028c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283c:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <HAL_RCC_ClockConfig+0x1ec>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d001      	beq.n	800284e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e036      	b.n	80028bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800285a:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <HAL_RCC_ClockConfig+0x1f0>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	4918      	ldr	r1, [pc, #96]	; (80028c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002868:	4313      	orrs	r3, r2
 800286a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d009      	beq.n	800288c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002878:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <HAL_RCC_ClockConfig+0x1f0>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4910      	ldr	r1, [pc, #64]	; (80028c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002888:	4313      	orrs	r3, r2
 800288a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800288c:	f000 f824 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	490b      	ldr	r1, [pc, #44]	; (80028cc <HAL_RCC_ClockConfig+0x1f4>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
 80028a8:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <HAL_RCC_ClockConfig+0x1f8>)
 80028aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1fc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fd ff53 	bl	800075c <HAL_InitTick>
 80028b6:	4603      	mov	r3, r0
 80028b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80028ba:	7afb      	ldrb	r3, [r7, #11]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40022000 	.word	0x40022000
 80028c8:	40021000 	.word	0x40021000
 80028cc:	08003fe8 	.word	0x08003fe8
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000004 	.word	0x20000004

080028d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	b089      	sub	sp, #36	; 0x24
 80028dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	2300      	movs	r3, #0
 80028e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028e6:	4b3e      	ldr	r3, [pc, #248]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028f0:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x34>
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d121      	bne.n	800294a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d11e      	bne.n	800294a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800290c:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b00      	cmp	r3, #0
 8002916:	d107      	bne.n	8002928 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002918:	4b31      	ldr	r3, [pc, #196]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800291a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	e005      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002928:	4b2d      	ldr	r3, [pc, #180]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002934:	4a2b      	ldr	r2, [pc, #172]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10d      	bne.n	8002960 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002948:	e00a      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b04      	cmp	r3, #4
 800294e:	d102      	bne.n	8002956 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002950:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002952:	61bb      	str	r3, [r7, #24]
 8002954:	e004      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b08      	cmp	r3, #8
 800295a:	d101      	bne.n	8002960 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800295c:	4b23      	ldr	r3, [pc, #140]	; (80029ec <HAL_RCC_GetSysClockFreq+0x114>)
 800295e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d134      	bne.n	80029d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002966:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d003      	beq.n	800297e <HAL_RCC_GetSysClockFreq+0xa6>
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d003      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0xac>
 800297c:	e005      	b.n	800298a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002980:	617b      	str	r3, [r7, #20]
      break;
 8002982:	e005      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_RCC_GetSysClockFreq+0x114>)
 8002986:	617b      	str	r3, [r7, #20]
      break;
 8002988:	e002      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	617b      	str	r3, [r7, #20]
      break;
 800298e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002990:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	3301      	adds	r3, #1
 800299c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800299e:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	fb03 f202 	mul.w	r2, r3, r2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029b6:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	0e5b      	lsrs	r3, r3, #25
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	3301      	adds	r3, #1
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029d0:	69bb      	ldr	r3, [r7, #24]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3724      	adds	r7, #36	; 0x24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	08003ff8 	.word	0x08003ff8
 80029e8:	00f42400 	.word	0x00f42400
 80029ec:	007a1200 	.word	0x007a1200

080029f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029fc:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a08:	f7ff f9ee 	bl	8001de8 <HAL_PWREx_GetVoltageRange>
 8002a0c:	6178      	str	r0, [r7, #20]
 8002a0e:	e014      	b.n	8002a3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a10:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	4a24      	ldr	r2, [pc, #144]	; (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a1c:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a28:	f7ff f9de 	bl	8001de8 <HAL_PWREx_GetVoltageRange>
 8002a2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a32:	4a1d      	ldr	r2, [pc, #116]	; (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a40:	d10b      	bne.n	8002a5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b80      	cmp	r3, #128	; 0x80
 8002a46:	d919      	bls.n	8002a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2ba0      	cmp	r3, #160	; 0xa0
 8002a4c:	d902      	bls.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a4e:	2302      	movs	r3, #2
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	e013      	b.n	8002a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a54:	2301      	movs	r3, #1
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	e010      	b.n	8002a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b80      	cmp	r3, #128	; 0x80
 8002a5e:	d902      	bls.n	8002a66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a60:	2303      	movs	r3, #3
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	e00a      	b.n	8002a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b80      	cmp	r3, #128	; 0x80
 8002a6a:	d102      	bne.n	8002a72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	e004      	b.n	8002a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b70      	cmp	r3, #112	; 0x70
 8002a76:	d101      	bne.n	8002a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a78:	2301      	movs	r3, #1
 8002a7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f023 0207 	bic.w	r2, r3, #7
 8002a84:	4909      	ldr	r1, [pc, #36]	; (8002aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a8c:	4b07      	ldr	r3, [pc, #28]	; (8002aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40022000 	.word	0x40022000

08002ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ab8:	2300      	movs	r3, #0
 8002aba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002abc:	2300      	movs	r3, #0
 8002abe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d031      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ad4:	d01a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002ad6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ada:	d814      	bhi.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d009      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ae0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ae4:	d10f      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002ae6:	4b5d      	ldr	r3, [pc, #372]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4a5c      	ldr	r2, [pc, #368]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002af2:	e00c      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3304      	adds	r3, #4
 8002af8:	2100      	movs	r1, #0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f9ce 	bl	8002e9c <RCCEx_PLLSAI1_Config>
 8002b00:	4603      	mov	r3, r0
 8002b02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b04:	e003      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	74fb      	strb	r3, [r7, #19]
      break;
 8002b0a:	e000      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b0e:	7cfb      	ldrb	r3, [r7, #19]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b14:	4b51      	ldr	r3, [pc, #324]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b22:	494e      	ldr	r1, [pc, #312]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b2a:	e001      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b2c:	7cfb      	ldrb	r3, [r7, #19]
 8002b2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 809e 	beq.w	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b42:	4b46      	ldr	r3, [pc, #280]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002b52:	2300      	movs	r3, #0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00d      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b58:	4b40      	ldr	r3, [pc, #256]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5c:	4a3f      	ldr	r2, [pc, #252]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b62:	6593      	str	r3, [r2, #88]	; 0x58
 8002b64:	4b3d      	ldr	r3, [pc, #244]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b70:	2301      	movs	r3, #1
 8002b72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b74:	4b3a      	ldr	r3, [pc, #232]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a39      	ldr	r2, [pc, #228]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b80:	f7fd fe3c 	bl	80007fc <HAL_GetTick>
 8002b84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b86:	e009      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b88:	f7fd fe38 	bl	80007fc <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d902      	bls.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	74fb      	strb	r3, [r7, #19]
        break;
 8002b9a:	e005      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b9c:	4b30      	ldr	r3, [pc, #192]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ef      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002ba8:	7cfb      	ldrb	r3, [r7, #19]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d15a      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bae:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d01e      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d019      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bca:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bd6:	4b21      	ldr	r3, [pc, #132]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bdc:	4a1f      	ldr	r2, [pc, #124]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002be6:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bec:	4a1b      	ldr	r2, [pc, #108]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bf6:	4a19      	ldr	r2, [pc, #100]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d016      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fd fdf8 	bl	80007fc <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fd fdf4 	bl	80007fc <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d902      	bls.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	74fb      	strb	r3, [r7, #19]
            break;
 8002c26:	e006      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0ec      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10b      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c3c:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4a:	4904      	ldr	r1, [pc, #16]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c52:	e009      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c54:	7cfb      	ldrb	r3, [r7, #19]
 8002c56:	74bb      	strb	r3, [r7, #18]
 8002c58:	e006      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c64:	7cfb      	ldrb	r3, [r7, #19]
 8002c66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c68:	7c7b      	ldrb	r3, [r7, #17]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d105      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6e:	4b8a      	ldr	r3, [pc, #552]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c72:	4a89      	ldr	r2, [pc, #548]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c86:	4b84      	ldr	r3, [pc, #528]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8c:	f023 0203 	bic.w	r2, r3, #3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	4980      	ldr	r1, [pc, #512]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ca8:	4b7b      	ldr	r3, [pc, #492]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cae:	f023 020c 	bic.w	r2, r3, #12
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	4978      	ldr	r1, [pc, #480]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cca:	4b73      	ldr	r3, [pc, #460]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	496f      	ldr	r1, [pc, #444]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cec:	4b6a      	ldr	r3, [pc, #424]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfa:	4967      	ldr	r1, [pc, #412]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d0e:	4b62      	ldr	r3, [pc, #392]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1c:	495e      	ldr	r1, [pc, #376]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d30:	4b59      	ldr	r3, [pc, #356]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	4956      	ldr	r1, [pc, #344]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d52:	4b51      	ldr	r3, [pc, #324]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	494d      	ldr	r1, [pc, #308]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d028      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d74:	4b48      	ldr	r3, [pc, #288]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	4945      	ldr	r1, [pc, #276]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d92:	d106      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d94:	4b40      	ldr	r3, [pc, #256]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4a3f      	ldr	r2, [pc, #252]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d9e:	60d3      	str	r3, [r2, #12]
 8002da0:	e011      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002daa:	d10c      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3304      	adds	r3, #4
 8002db0:	2101      	movs	r1, #1
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 f872 	bl	8002e9c <RCCEx_PLLSAI1_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002dc2:	7cfb      	ldrb	r3, [r7, #19]
 8002dc4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d028      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dd2:	4b31      	ldr	r3, [pc, #196]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	492d      	ldr	r1, [pc, #180]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002df0:	d106      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002df2:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	4a28      	ldr	r2, [pc, #160]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002df8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dfc:	60d3      	str	r3, [r2, #12]
 8002dfe:	e011      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	2101      	movs	r1, #1
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 f843 	bl	8002e9c <RCCEx_PLLSAI1_Config>
 8002e16:	4603      	mov	r3, r0
 8002e18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e1a:	7cfb      	ldrb	r3, [r7, #19]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002e20:	7cfb      	ldrb	r3, [r7, #19]
 8002e22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d01c      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e30:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3e:	4916      	ldr	r1, [pc, #88]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e4e:	d10c      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3304      	adds	r3, #4
 8002e54:	2102      	movs	r1, #2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 f820 	bl	8002e9c <RCCEx_PLLSAI1_Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e60:	7cfb      	ldrb	r3, [r7, #19]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002e66:	7cfb      	ldrb	r3, [r7, #19]
 8002e68:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e84:	4904      	ldr	r1, [pc, #16]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000

08002e9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eaa:	4b74      	ldr	r3, [pc, #464]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d018      	beq.n	8002ee8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002eb6:	4b71      	ldr	r3, [pc, #452]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f003 0203 	and.w	r2, r3, #3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d10d      	bne.n	8002ee2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
       ||
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d009      	beq.n	8002ee2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ece:	4b6b      	ldr	r3, [pc, #428]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
       ||
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d047      	beq.n	8002f72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
 8002ee6:	e044      	b.n	8002f72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d018      	beq.n	8002f22 <RCCEx_PLLSAI1_Config+0x86>
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d825      	bhi.n	8002f40 <RCCEx_PLLSAI1_Config+0xa4>
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d002      	beq.n	8002efe <RCCEx_PLLSAI1_Config+0x62>
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d009      	beq.n	8002f10 <RCCEx_PLLSAI1_Config+0x74>
 8002efc:	e020      	b.n	8002f40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002efe:	4b5f      	ldr	r3, [pc, #380]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d11d      	bne.n	8002f46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f0e:	e01a      	b.n	8002f46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f10:	4b5a      	ldr	r3, [pc, #360]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d116      	bne.n	8002f4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f20:	e013      	b.n	8002f4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f22:	4b56      	ldr	r3, [pc, #344]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10f      	bne.n	8002f4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f2e:	4b53      	ldr	r3, [pc, #332]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d109      	bne.n	8002f4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f3e:	e006      	b.n	8002f4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
      break;
 8002f44:	e004      	b.n	8002f50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f46:	bf00      	nop
 8002f48:	e002      	b.n	8002f50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f4a:	bf00      	nop
 8002f4c:	e000      	b.n	8002f50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10d      	bne.n	8002f72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f56:	4b49      	ldr	r3, [pc, #292]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6819      	ldr	r1, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	4943      	ldr	r1, [pc, #268]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d17c      	bne.n	8003072 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f78:	4b40      	ldr	r3, [pc, #256]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a3f      	ldr	r2, [pc, #252]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f84:	f7fd fc3a 	bl	80007fc <HAL_GetTick>
 8002f88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f8a:	e009      	b.n	8002fa0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f8c:	f7fd fc36 	bl	80007fc <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d902      	bls.n	8002fa0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f9e:	e005      	b.n	8002fac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fa0:	4b36      	ldr	r3, [pc, #216]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1ef      	bne.n	8002f8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d15f      	bne.n	8003072 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d110      	bne.n	8002fda <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fb8:	4b30      	ldr	r3, [pc, #192]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002fc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6892      	ldr	r2, [r2, #8]
 8002fc8:	0211      	lsls	r1, r2, #8
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68d2      	ldr	r2, [r2, #12]
 8002fce:	06d2      	lsls	r2, r2, #27
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	492a      	ldr	r1, [pc, #168]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	610b      	str	r3, [r1, #16]
 8002fd8:	e027      	b.n	800302a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d112      	bne.n	8003006 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fe0:	4b26      	ldr	r3, [pc, #152]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fe8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6892      	ldr	r2, [r2, #8]
 8002ff0:	0211      	lsls	r1, r2, #8
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6912      	ldr	r2, [r2, #16]
 8002ff6:	0852      	lsrs	r2, r2, #1
 8002ff8:	3a01      	subs	r2, #1
 8002ffa:	0552      	lsls	r2, r2, #21
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	491f      	ldr	r1, [pc, #124]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003000:	4313      	orrs	r3, r2
 8003002:	610b      	str	r3, [r1, #16]
 8003004:	e011      	b.n	800302a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003006:	4b1d      	ldr	r3, [pc, #116]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800300e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6892      	ldr	r2, [r2, #8]
 8003016:	0211      	lsls	r1, r2, #8
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6952      	ldr	r2, [r2, #20]
 800301c:	0852      	lsrs	r2, r2, #1
 800301e:	3a01      	subs	r2, #1
 8003020:	0652      	lsls	r2, r2, #25
 8003022:	430a      	orrs	r2, r1
 8003024:	4915      	ldr	r1, [pc, #84]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003026:	4313      	orrs	r3, r2
 8003028:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800302a:	4b14      	ldr	r3, [pc, #80]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a13      	ldr	r2, [pc, #76]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003030:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003034:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003036:	f7fd fbe1 	bl	80007fc <HAL_GetTick>
 800303a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800303c:	e009      	b.n	8003052 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800303e:	f7fd fbdd 	bl	80007fc <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d902      	bls.n	8003052 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	73fb      	strb	r3, [r7, #15]
          break;
 8003050:	e005      	b.n	800305e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0ef      	beq.n	800303e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	4903      	ldr	r1, [pc, #12]	; (800307c <RCCEx_PLLSAI1_Config+0x1e0>)
 800306e:	4313      	orrs	r3, r2
 8003070:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003072:	7bfb      	ldrb	r3, [r7, #15]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000

08003080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e049      	b.n	8003126 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd fa88 	bl	80005bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3304      	adds	r3, #4
 80030bc:	4619      	mov	r1, r3
 80030be:	4610      	mov	r0, r2
 80030c0:	f000 fb52 	bl	8003768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e049      	b.n	80031d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f841 	bl	80031dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3304      	adds	r3, #4
 800316a:	4619      	mov	r1, r3
 800316c:	4610      	mov	r0, r2
 800316e:	f000 fafb 	bl	8003768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d109      	bne.n	8003214 <HAL_TIM_PWM_Start+0x24>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b01      	cmp	r3, #1
 800320a:	bf14      	ite	ne
 800320c:	2301      	movne	r3, #1
 800320e:	2300      	moveq	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	e03c      	b.n	800328e <HAL_TIM_PWM_Start+0x9e>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b04      	cmp	r3, #4
 8003218:	d109      	bne.n	800322e <HAL_TIM_PWM_Start+0x3e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b01      	cmp	r3, #1
 8003224:	bf14      	ite	ne
 8003226:	2301      	movne	r3, #1
 8003228:	2300      	moveq	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	e02f      	b.n	800328e <HAL_TIM_PWM_Start+0x9e>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b08      	cmp	r3, #8
 8003232:	d109      	bne.n	8003248 <HAL_TIM_PWM_Start+0x58>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	bf14      	ite	ne
 8003240:	2301      	movne	r3, #1
 8003242:	2300      	moveq	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	e022      	b.n	800328e <HAL_TIM_PWM_Start+0x9e>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	2b0c      	cmp	r3, #12
 800324c:	d109      	bne.n	8003262 <HAL_TIM_PWM_Start+0x72>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b01      	cmp	r3, #1
 8003258:	bf14      	ite	ne
 800325a:	2301      	movne	r3, #1
 800325c:	2300      	moveq	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	e015      	b.n	800328e <HAL_TIM_PWM_Start+0x9e>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b10      	cmp	r3, #16
 8003266:	d109      	bne.n	800327c <HAL_TIM_PWM_Start+0x8c>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	bf14      	ite	ne
 8003274:	2301      	movne	r3, #1
 8003276:	2300      	moveq	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e008      	b.n	800328e <HAL_TIM_PWM_Start+0x9e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	bf14      	ite	ne
 8003288:	2301      	movne	r3, #1
 800328a:	2300      	moveq	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e07e      	b.n	8003394 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d104      	bne.n	80032a6 <HAL_TIM_PWM_Start+0xb6>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032a4:	e023      	b.n	80032ee <HAL_TIM_PWM_Start+0xfe>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d104      	bne.n	80032b6 <HAL_TIM_PWM_Start+0xc6>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b4:	e01b      	b.n	80032ee <HAL_TIM_PWM_Start+0xfe>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d104      	bne.n	80032c6 <HAL_TIM_PWM_Start+0xd6>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c4:	e013      	b.n	80032ee <HAL_TIM_PWM_Start+0xfe>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b0c      	cmp	r3, #12
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_PWM_Start+0xe6>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032d4:	e00b      	b.n	80032ee <HAL_TIM_PWM_Start+0xfe>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b10      	cmp	r3, #16
 80032da:	d104      	bne.n	80032e6 <HAL_TIM_PWM_Start+0xf6>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032e4:	e003      	b.n	80032ee <HAL_TIM_PWM_Start+0xfe>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2201      	movs	r2, #1
 80032f4:	6839      	ldr	r1, [r7, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fdb2 	bl	8003e60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a26      	ldr	r2, [pc, #152]	; (800339c <HAL_TIM_PWM_Start+0x1ac>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d009      	beq.n	800331a <HAL_TIM_PWM_Start+0x12a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a25      	ldr	r2, [pc, #148]	; (80033a0 <HAL_TIM_PWM_Start+0x1b0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d004      	beq.n	800331a <HAL_TIM_PWM_Start+0x12a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a23      	ldr	r2, [pc, #140]	; (80033a4 <HAL_TIM_PWM_Start+0x1b4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d101      	bne.n	800331e <HAL_TIM_PWM_Start+0x12e>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_TIM_PWM_Start+0x130>
 800331e:	2300      	movs	r3, #0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d007      	beq.n	8003334 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003332:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a18      	ldr	r2, [pc, #96]	; (800339c <HAL_TIM_PWM_Start+0x1ac>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d009      	beq.n	8003352 <HAL_TIM_PWM_Start+0x162>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003346:	d004      	beq.n	8003352 <HAL_TIM_PWM_Start+0x162>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a14      	ldr	r2, [pc, #80]	; (80033a0 <HAL_TIM_PWM_Start+0x1b0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d115      	bne.n	800337e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <HAL_TIM_PWM_Start+0x1b8>)
 800335a:	4013      	ands	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b06      	cmp	r3, #6
 8003362:	d015      	beq.n	8003390 <HAL_TIM_PWM_Start+0x1a0>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336a:	d011      	beq.n	8003390 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337c:	e008      	b.n	8003390 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	e000      	b.n	8003392 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003390:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40014000 	.word	0x40014000
 80033a4:	40014400 	.word	0x40014400
 80033a8:	00010007 	.word	0x00010007

080033ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e0ff      	b.n	80035ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b14      	cmp	r3, #20
 80033d6:	f200 80f0 	bhi.w	80035ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80033da:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	08003435 	.word	0x08003435
 80033e4:	080035bb 	.word	0x080035bb
 80033e8:	080035bb 	.word	0x080035bb
 80033ec:	080035bb 	.word	0x080035bb
 80033f0:	08003475 	.word	0x08003475
 80033f4:	080035bb 	.word	0x080035bb
 80033f8:	080035bb 	.word	0x080035bb
 80033fc:	080035bb 	.word	0x080035bb
 8003400:	080034b7 	.word	0x080034b7
 8003404:	080035bb 	.word	0x080035bb
 8003408:	080035bb 	.word	0x080035bb
 800340c:	080035bb 	.word	0x080035bb
 8003410:	080034f7 	.word	0x080034f7
 8003414:	080035bb 	.word	0x080035bb
 8003418:	080035bb 	.word	0x080035bb
 800341c:	080035bb 	.word	0x080035bb
 8003420:	08003539 	.word	0x08003539
 8003424:	080035bb 	.word	0x080035bb
 8003428:	080035bb 	.word	0x080035bb
 800342c:	080035bb 	.word	0x080035bb
 8003430:	08003579 	.word	0x08003579
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 f9f8 	bl	8003830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0208 	orr.w	r2, r2, #8
 800344e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0204 	bic.w	r2, r2, #4
 800345e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6999      	ldr	r1, [r3, #24]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	619a      	str	r2, [r3, #24]
      break;
 8003472:	e0a5      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fa54 	bl	8003928 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800348e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800349e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6999      	ldr	r1, [r3, #24]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	021a      	lsls	r2, r3, #8
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	619a      	str	r2, [r3, #24]
      break;
 80034b4:	e084      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68b9      	ldr	r1, [r7, #8]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 faad 	bl	8003a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69da      	ldr	r2, [r3, #28]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f042 0208 	orr.w	r2, r2, #8
 80034d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69da      	ldr	r2, [r3, #28]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0204 	bic.w	r2, r2, #4
 80034e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69d9      	ldr	r1, [r3, #28]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	61da      	str	r2, [r3, #28]
      break;
 80034f4:	e064      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fb05 	bl	8003b0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69da      	ldr	r2, [r3, #28]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69d9      	ldr	r1, [r3, #28]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	021a      	lsls	r2, r3, #8
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	61da      	str	r2, [r3, #28]
      break;
 8003536:	e043      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fb42 	bl	8003bc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0208 	orr.w	r2, r2, #8
 8003552:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0204 	bic.w	r2, r2, #4
 8003562:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003576:	e023      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fb7a 	bl	8003c78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003592:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	021a      	lsls	r2, r3, #8
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80035b8:	e002      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	75fb      	strb	r3, [r7, #23]
      break;
 80035be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop

080035d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_TIM_ConfigClockSource+0x1c>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e0b6      	b.n	800375e <HAL_TIM_ConfigClockSource+0x18a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800361a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800362c:	d03e      	beq.n	80036ac <HAL_TIM_ConfigClockSource+0xd8>
 800362e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003632:	f200 8087 	bhi.w	8003744 <HAL_TIM_ConfigClockSource+0x170>
 8003636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363a:	f000 8086 	beq.w	800374a <HAL_TIM_ConfigClockSource+0x176>
 800363e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003642:	d87f      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 8003644:	2b70      	cmp	r3, #112	; 0x70
 8003646:	d01a      	beq.n	800367e <HAL_TIM_ConfigClockSource+0xaa>
 8003648:	2b70      	cmp	r3, #112	; 0x70
 800364a:	d87b      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 800364c:	2b60      	cmp	r3, #96	; 0x60
 800364e:	d050      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x11e>
 8003650:	2b60      	cmp	r3, #96	; 0x60
 8003652:	d877      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 8003654:	2b50      	cmp	r3, #80	; 0x50
 8003656:	d03c      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0xfe>
 8003658:	2b50      	cmp	r3, #80	; 0x50
 800365a:	d873      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d058      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x13e>
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d86f      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 8003664:	2b30      	cmp	r3, #48	; 0x30
 8003666:	d064      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0x15e>
 8003668:	2b30      	cmp	r3, #48	; 0x30
 800366a:	d86b      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 800366c:	2b20      	cmp	r3, #32
 800366e:	d060      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0x15e>
 8003670:	2b20      	cmp	r3, #32
 8003672:	d867      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d05c      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0x15e>
 8003678:	2b10      	cmp	r3, #16
 800367a:	d05a      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0x15e>
 800367c:	e062      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6899      	ldr	r1, [r3, #8]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f000 fbc7 	bl	8003e20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	609a      	str	r2, [r3, #8]
      break;
 80036aa:	e04f      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	6899      	ldr	r1, [r3, #8]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f000 fbb0 	bl	8003e20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ce:	609a      	str	r2, [r3, #8]
      break;
 80036d0:	e03c      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	6859      	ldr	r1, [r3, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	461a      	mov	r2, r3
 80036e0:	f000 fb24 	bl	8003d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2150      	movs	r1, #80	; 0x50
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fb7d 	bl	8003dea <TIM_ITRx_SetConfig>
      break;
 80036f0:	e02c      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6859      	ldr	r1, [r3, #4]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	461a      	mov	r2, r3
 8003700:	f000 fb43 	bl	8003d8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2160      	movs	r1, #96	; 0x60
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fb6d 	bl	8003dea <TIM_ITRx_SetConfig>
      break;
 8003710:	e01c      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6859      	ldr	r1, [r3, #4]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	461a      	mov	r2, r3
 8003720:	f000 fb04 	bl	8003d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2140      	movs	r1, #64	; 0x40
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fb5d 	bl	8003dea <TIM_ITRx_SetConfig>
      break;
 8003730:	e00c      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4619      	mov	r1, r3
 800373c:	4610      	mov	r0, r2
 800373e:	f000 fb54 	bl	8003dea <TIM_ITRx_SetConfig>
      break;
 8003742:	e003      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
      break;
 8003748:	e000      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800374a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800375c:	7bfb      	ldrb	r3, [r7, #15]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a2a      	ldr	r2, [pc, #168]	; (8003824 <TIM_Base_SetConfig+0xbc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d003      	beq.n	8003788 <TIM_Base_SetConfig+0x20>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003786:	d108      	bne.n	800379a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a21      	ldr	r2, [pc, #132]	; (8003824 <TIM_Base_SetConfig+0xbc>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00b      	beq.n	80037ba <TIM_Base_SetConfig+0x52>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a8:	d007      	beq.n	80037ba <TIM_Base_SetConfig+0x52>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1e      	ldr	r2, [pc, #120]	; (8003828 <TIM_Base_SetConfig+0xc0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d003      	beq.n	80037ba <TIM_Base_SetConfig+0x52>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1d      	ldr	r2, [pc, #116]	; (800382c <TIM_Base_SetConfig+0xc4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d108      	bne.n	80037cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a0c      	ldr	r2, [pc, #48]	; (8003824 <TIM_Base_SetConfig+0xbc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d007      	beq.n	8003808 <TIM_Base_SetConfig+0xa0>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a0b      	ldr	r2, [pc, #44]	; (8003828 <TIM_Base_SetConfig+0xc0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d003      	beq.n	8003808 <TIM_Base_SetConfig+0xa0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a0a      	ldr	r2, [pc, #40]	; (800382c <TIM_Base_SetConfig+0xc4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d103      	bne.n	8003810 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	615a      	str	r2, [r3, #20]
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40014000 	.word	0x40014000
 800382c:	40014400 	.word	0x40014400

08003830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f023 0201 	bic.w	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0303 	bic.w	r3, r3, #3
 800386a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f023 0302 	bic.w	r3, r3, #2
 800387c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a24      	ldr	r2, [pc, #144]	; (800391c <TIM_OC1_SetConfig+0xec>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d007      	beq.n	80038a0 <TIM_OC1_SetConfig+0x70>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a23      	ldr	r2, [pc, #140]	; (8003920 <TIM_OC1_SetConfig+0xf0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_OC1_SetConfig+0x70>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a22      	ldr	r2, [pc, #136]	; (8003924 <TIM_OC1_SetConfig+0xf4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d10c      	bne.n	80038ba <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f023 0308 	bic.w	r3, r3, #8
 80038a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f023 0304 	bic.w	r3, r3, #4
 80038b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a17      	ldr	r2, [pc, #92]	; (800391c <TIM_OC1_SetConfig+0xec>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d007      	beq.n	80038d2 <TIM_OC1_SetConfig+0xa2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a16      	ldr	r2, [pc, #88]	; (8003920 <TIM_OC1_SetConfig+0xf0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d003      	beq.n	80038d2 <TIM_OC1_SetConfig+0xa2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a15      	ldr	r2, [pc, #84]	; (8003924 <TIM_OC1_SetConfig+0xf4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d111      	bne.n	80038f6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	621a      	str	r2, [r3, #32]
}
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	40012c00 	.word	0x40012c00
 8003920:	40014000 	.word	0x40014000
 8003924:	40014400 	.word	0x40014400

08003928 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f023 0210 	bic.w	r2, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800395a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f023 0320 	bic.w	r3, r3, #32
 8003976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a22      	ldr	r2, [pc, #136]	; (8003a10 <TIM_OC2_SetConfig+0xe8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d10d      	bne.n	80039a8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a19      	ldr	r2, [pc, #100]	; (8003a10 <TIM_OC2_SetConfig+0xe8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d007      	beq.n	80039c0 <TIM_OC2_SetConfig+0x98>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <TIM_OC2_SetConfig+0xec>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d003      	beq.n	80039c0 <TIM_OC2_SetConfig+0x98>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a17      	ldr	r2, [pc, #92]	; (8003a18 <TIM_OC2_SetConfig+0xf0>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d113      	bne.n	80039e8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	621a      	str	r2, [r3, #32]
}
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40014000 	.word	0x40014000
 8003a18:	40014400 	.word	0x40014400

08003a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0303 	bic.w	r3, r3, #3
 8003a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a21      	ldr	r2, [pc, #132]	; (8003b00 <TIM_OC3_SetConfig+0xe4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d10d      	bne.n	8003a9a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a18      	ldr	r2, [pc, #96]	; (8003b00 <TIM_OC3_SetConfig+0xe4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d007      	beq.n	8003ab2 <TIM_OC3_SetConfig+0x96>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a17      	ldr	r2, [pc, #92]	; (8003b04 <TIM_OC3_SetConfig+0xe8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d003      	beq.n	8003ab2 <TIM_OC3_SetConfig+0x96>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a16      	ldr	r2, [pc, #88]	; (8003b08 <TIM_OC3_SetConfig+0xec>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d113      	bne.n	8003ada <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	621a      	str	r2, [r3, #32]
}
 8003af4:	bf00      	nop
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	40012c00 	.word	0x40012c00
 8003b04:	40014000 	.word	0x40014000
 8003b08:	40014400 	.word	0x40014400

08003b0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	021b      	lsls	r3, r3, #8
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	031b      	lsls	r3, r3, #12
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a14      	ldr	r2, [pc, #80]	; (8003bbc <TIM_OC4_SetConfig+0xb0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d007      	beq.n	8003b80 <TIM_OC4_SetConfig+0x74>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a13      	ldr	r2, [pc, #76]	; (8003bc0 <TIM_OC4_SetConfig+0xb4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_OC4_SetConfig+0x74>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <TIM_OC4_SetConfig+0xb8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d109      	bne.n	8003b94 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	019b      	lsls	r3, r3, #6
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	621a      	str	r2, [r3, #32]
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	40014000 	.word	0x40014000
 8003bc4:	40014400 	.word	0x40014400

08003bc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	041b      	lsls	r3, r3, #16
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <TIM_OC5_SetConfig+0xa4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d007      	beq.n	8003c32 <TIM_OC5_SetConfig+0x6a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a12      	ldr	r2, [pc, #72]	; (8003c70 <TIM_OC5_SetConfig+0xa8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d003      	beq.n	8003c32 <TIM_OC5_SetConfig+0x6a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a11      	ldr	r2, [pc, #68]	; (8003c74 <TIM_OC5_SetConfig+0xac>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d109      	bne.n	8003c46 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	621a      	str	r2, [r3, #32]
}
 8003c60:	bf00      	nop
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	40012c00 	.word	0x40012c00
 8003c70:	40014000 	.word	0x40014000
 8003c74:	40014400 	.word	0x40014400

08003c78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	021b      	lsls	r3, r3, #8
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	051b      	lsls	r3, r3, #20
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a14      	ldr	r2, [pc, #80]	; (8003d20 <TIM_OC6_SetConfig+0xa8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d007      	beq.n	8003ce4 <TIM_OC6_SetConfig+0x6c>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a13      	ldr	r2, [pc, #76]	; (8003d24 <TIM_OC6_SetConfig+0xac>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d003      	beq.n	8003ce4 <TIM_OC6_SetConfig+0x6c>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a12      	ldr	r2, [pc, #72]	; (8003d28 <TIM_OC6_SetConfig+0xb0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d109      	bne.n	8003cf8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	029b      	lsls	r3, r3, #10
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40012c00 	.word	0x40012c00
 8003d24:	40014000 	.word	0x40014000
 8003d28:	40014400 	.word	0x40014400

08003d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f023 0201 	bic.w	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f023 030a 	bic.w	r3, r3, #10
 8003d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b087      	sub	sp, #28
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	f023 0210 	bic.w	r2, r3, #16
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003db4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	031b      	lsls	r3, r3, #12
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	621a      	str	r2, [r3, #32]
}
 8003dde:	bf00      	nop
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b085      	sub	sp, #20
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f043 0307 	orr.w	r3, r3, #7
 8003e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	609a      	str	r2, [r3, #8]
}
 8003e14:	bf00      	nop
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	021a      	lsls	r2, r3, #8
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	431a      	orrs	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	609a      	str	r2, [r3, #8]
}
 8003e54:	bf00      	nop
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	2201      	movs	r2, #1
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a1a      	ldr	r2, [r3, #32]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	401a      	ands	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a1a      	ldr	r2, [r3, #32]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	fa01 f303 	lsl.w	r3, r1, r3
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	621a      	str	r2, [r3, #32]
}
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e04f      	b.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a21      	ldr	r2, [pc, #132]	; (8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d108      	bne.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ef4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a14      	ldr	r2, [pc, #80]	; (8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d009      	beq.n	8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2c:	d004      	beq.n	8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a10      	ldr	r2, [pc, #64]	; (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d10c      	bne.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	40014000 	.word	0x40014000

08003f78 <__libc_init_array>:
 8003f78:	b570      	push	{r4, r5, r6, lr}
 8003f7a:	4d0d      	ldr	r5, [pc, #52]	; (8003fb0 <__libc_init_array+0x38>)
 8003f7c:	4c0d      	ldr	r4, [pc, #52]	; (8003fb4 <__libc_init_array+0x3c>)
 8003f7e:	1b64      	subs	r4, r4, r5
 8003f80:	10a4      	asrs	r4, r4, #2
 8003f82:	2600      	movs	r6, #0
 8003f84:	42a6      	cmp	r6, r4
 8003f86:	d109      	bne.n	8003f9c <__libc_init_array+0x24>
 8003f88:	4d0b      	ldr	r5, [pc, #44]	; (8003fb8 <__libc_init_array+0x40>)
 8003f8a:	4c0c      	ldr	r4, [pc, #48]	; (8003fbc <__libc_init_array+0x44>)
 8003f8c:	f000 f820 	bl	8003fd0 <_init>
 8003f90:	1b64      	subs	r4, r4, r5
 8003f92:	10a4      	asrs	r4, r4, #2
 8003f94:	2600      	movs	r6, #0
 8003f96:	42a6      	cmp	r6, r4
 8003f98:	d105      	bne.n	8003fa6 <__libc_init_array+0x2e>
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
 8003f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa0:	4798      	blx	r3
 8003fa2:	3601      	adds	r6, #1
 8003fa4:	e7ee      	b.n	8003f84 <__libc_init_array+0xc>
 8003fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003faa:	4798      	blx	r3
 8003fac:	3601      	adds	r6, #1
 8003fae:	e7f2      	b.n	8003f96 <__libc_init_array+0x1e>
 8003fb0:	08004028 	.word	0x08004028
 8003fb4:	08004028 	.word	0x08004028
 8003fb8:	08004028 	.word	0x08004028
 8003fbc:	0800402c 	.word	0x0800402c

08003fc0 <memset>:
 8003fc0:	4402      	add	r2, r0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d100      	bne.n	8003fca <memset+0xa>
 8003fc8:	4770      	bx	lr
 8003fca:	f803 1b01 	strb.w	r1, [r3], #1
 8003fce:	e7f9      	b.n	8003fc4 <memset+0x4>

08003fd0 <_init>:
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	bf00      	nop
 8003fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd6:	bc08      	pop	{r3}
 8003fd8:	469e      	mov	lr, r3
 8003fda:	4770      	bx	lr

08003fdc <_fini>:
 8003fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fde:	bf00      	nop
 8003fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe2:	bc08      	pop	{r3}
 8003fe4:	469e      	mov	lr, r3
 8003fe6:	4770      	bx	lr
