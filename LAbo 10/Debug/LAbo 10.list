
LAbo 10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041bc  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08004350  08004350  00014350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004568  08004568  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004568  08004568  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004568  08004568  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004568  08004568  00014568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800456c  0800456c  0001456c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000000c  0800457c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  0800457c  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c078  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc6  00000000  00000000  0002c0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  0002de80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  0002eb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020691  00000000  00000000  0002f6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f053  00000000  00000000  0004fd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c749e  00000000  00000000  0005edcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012626a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000386c  00000000  00000000  001262bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004334 	.word	0x08004334

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08004334 	.word	0x08004334

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr
 8000b0c:	0000      	movs	r0, r0
	...

08000b10 <calcsin>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t sine_val[100];
#define PI 3.1415926

void calcsin(){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
	for (int i=0; i<100; i++){
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	e03a      	b.n	8000b92 <calcsin+0x82>
		sine_val[i]=((sin(i*2*PI/100)+1)*(4096/2));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fca7 	bl	8000474 <__aeabi_i2d>
 8000b26:	a324      	add	r3, pc, #144	; (adr r3, 8000bb8 <calcsin+0xa8>)
 8000b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2c:	f7ff fd0c 	bl	8000548 <__aeabi_dmul>
 8000b30:	4602      	mov	r2, r0
 8000b32:	460b      	mov	r3, r1
 8000b34:	4610      	mov	r0, r2
 8000b36:	4619      	mov	r1, r3
 8000b38:	f04f 0200 	mov.w	r2, #0
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <calcsin+0x98>)
 8000b3e:	f7ff fe2d 	bl	800079c <__aeabi_ddiv>
 8000b42:	4602      	mov	r2, r0
 8000b44:	460b      	mov	r3, r1
 8000b46:	ec43 2b17 	vmov	d7, r2, r3
 8000b4a:	eeb0 0a47 	vmov.f32	s0, s14
 8000b4e:	eef0 0a67 	vmov.f32	s1, s15
 8000b52:	f002 fba5 	bl	80032a0 <sin>
 8000b56:	ec51 0b10 	vmov	r0, r1, d0
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <calcsin+0x9c>)
 8000b60:	f7ff fb3c 	bl	80001dc <__adddf3>
 8000b64:	4602      	mov	r2, r0
 8000b66:	460b      	mov	r3, r1
 8000b68:	4610      	mov	r0, r2
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f04f 0200 	mov.w	r2, #0
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <calcsin+0xa0>)
 8000b72:	f7ff fce9 	bl	8000548 <__aeabi_dmul>
 8000b76:	4602      	mov	r2, r0
 8000b78:	460b      	mov	r3, r1
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f7ff ffa5 	bl	8000acc <__aeabi_d2uiz>
 8000b82:	4602      	mov	r2, r0
 8000b84:	490b      	ldr	r1, [pc, #44]	; (8000bb4 <calcsin+0xa4>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<100; i++){
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b63      	cmp	r3, #99	; 0x63
 8000b96:	ddc1      	ble.n	8000b1c <calcsin+0xc>
	}
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	f3af 8000 	nop.w
 8000ba8:	40590000 	.word	0x40590000
 8000bac:	3ff00000 	.word	0x3ff00000
 8000bb0:	40a00000 	.word	0x40a00000
 8000bb4:	200000d0 	.word	0x200000d0
 8000bb8:	4d12d84a 	.word	0x4d12d84a
 8000bbc:	400921fb 	.word	0x400921fb

08000bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc6:	f000 fa4a 	bl	800105e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bca:	f000 f81d 	bl	8000c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bce:	f000 f909 	bl	8000de4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bd2:	f000 f8e9 	bl	8000da8 <MX_DMA_Init>
  MX_DAC1_Init();
 8000bd6:	f000 f869 	bl	8000cac <MX_DAC1_Init>
  MX_TIM2_Init();
 8000bda:	f000 f899 	bl	8000d10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start(&htim2);
 8000bde:	4807      	ldr	r0, [pc, #28]	; (8000bfc <main+0x3c>)
 8000be0:	f002 f8b6 	bl	8002d50 <HAL_TIM_Base_Start>
calcsin();
 8000be4:	f7ff ff94 	bl	8000b10 <calcsin>
HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sine_val, 100, DAC_ALIGN_12B_R);
 8000be8:	2300      	movs	r3, #0
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	2364      	movs	r3, #100	; 0x64
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <main+0x40>)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4804      	ldr	r0, [pc, #16]	; (8000c04 <main+0x44>)
 8000bf4:	f000 fc00 	bl	80013f8 <HAL_DAC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <main+0x38>
 8000bfa:	bf00      	nop
 8000bfc:	20000084 	.word	0x20000084
 8000c00:	200000d0 	.word	0x200000d0
 8000c04:	20000028 	.word	0x20000028

08000c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b096      	sub	sp, #88	; 0x58
 8000c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	2244      	movs	r2, #68	; 0x44
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 fb38 	bl	800328c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c2e:	f001 f9e1 	bl	8001ff4 <HAL_PWREx_ControlVoltageScaling>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c38:	f000 f8ec 	bl	8000e14 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c3c:	2310      	movs	r3, #16
 8000c3e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c40:	2301      	movs	r3, #1
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c48:	2360      	movs	r3, #96	; 0x60
 8000c4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c50:	2301      	movs	r3, #1
 8000c52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000c58:	2324      	movs	r3, #36	; 0x24
 8000c5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c5c:	2307      	movs	r3, #7
 8000c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c64:	2302      	movs	r3, #2
 8000c66:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 fa17 	bl	80020a0 <HAL_RCC_OscConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000c78:	f000 f8cc 	bl	8000e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c80:	2303      	movs	r3, #3
 8000c82:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	2104      	movs	r1, #4
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 fe17 	bl	80028c8 <HAL_RCC_ClockConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ca0:	f000 f8b8 	bl	8000e14 <Error_Handler>
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	3758      	adds	r7, #88	; 0x58
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2224      	movs	r2, #36	; 0x24
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 fae7 	bl	800328c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_DAC1_Init+0x5c>)
 8000cc0:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <MX_DAC1_Init+0x60>)
 8000cc2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000cc4:	4810      	ldr	r0, [pc, #64]	; (8000d08 <MX_DAC1_Init+0x5c>)
 8000cc6:	f000 fb74 	bl	80013b2 <HAL_DAC_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000cd0:	f000 f8a0 	bl	8000e14 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000cd8:	2324      	movs	r3, #36	; 0x24
 8000cda:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2200      	movs	r2, #0
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	; (8000d08 <MX_DAC1_Init+0x5c>)
 8000cf0:	f000 fc6c 	bl	80015cc <HAL_DAC_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000cfa:	f000 f88b 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000028 	.word	0x20000028
 8000d0c:	40007400 	.word	0x40007400

08000d10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000d36:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d38:	2247      	movs	r2, #71	; 0x47
 8000d3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d44:	2264      	movs	r2, #100	; 0x64
 8000d46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d54:	4813      	ldr	r0, [pc, #76]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d56:	f001 ffa3 	bl	8002ca0 <HAL_TIM_Base_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d60:	f000 f858 	bl	8000e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d72:	f002 f839 	bl	8002de8 <HAL_TIM_ConfigClockSource>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d7c:	f000 f84a 	bl	8000e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d80:	2320      	movs	r3, #32
 8000d82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d8e:	f002 f9f3 	bl	8003178 <HAL_TIMEx_MasterConfigSynchronization>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d98:	f000 f83c 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	3720      	adds	r7, #32
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000084 	.word	0x20000084

08000da8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_DMA_Init+0x38>)
 8000db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <MX_DMA_Init+0x38>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6493      	str	r3, [r2, #72]	; 0x48
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_DMA_Init+0x38>)
 8000dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	200d      	movs	r0, #13
 8000dcc:	f000 fabb 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000dd0:	200d      	movs	r0, #13
 8000dd2:	f000 fad4 	bl	800137e <HAL_NVIC_EnableIRQ>

}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40021000 	.word	0x40021000

08000de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_GPIO_Init+0x2c>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <MX_GPIO_Init+0x2c>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_GPIO_Init+0x2c>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000

08000e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e18:	b672      	cpsid	i
}
 8000e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <Error_Handler+0x8>
	...

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_MspInit+0x44>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <HAL_MspInit+0x44>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6613      	str	r3, [r2, #96]	; 0x60
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HAL_MspInit+0x44>)
 8000e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_MspInit+0x44>)
 8000e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e42:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <HAL_MspInit+0x44>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	6593      	str	r3, [r2, #88]	; 0x58
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_MspInit+0x44>)
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000

08000e68 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a2b      	ldr	r2, [pc, #172]	; (8000f34 <HAL_DAC_MspInit+0xcc>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d14f      	bne.n	8000f2a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000e8a:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <HAL_DAC_MspInit+0xd0>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8e:	4a2a      	ldr	r2, [pc, #168]	; (8000f38 <HAL_DAC_MspInit+0xd0>)
 8000e90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e94:	6593      	str	r3, [r2, #88]	; 0x58
 8000e96:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <HAL_DAC_MspInit+0xd0>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <HAL_DAC_MspInit+0xd0>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	4a24      	ldr	r2, [pc, #144]	; (8000f38 <HAL_DAC_MspInit+0xd0>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eae:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <HAL_DAC_MspInit+0xd0>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eba:	2310      	movs	r3, #16
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed0:	f000 ff18 	bl	8001d04 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <HAL_DAC_MspInit+0xd4>)
 8000ed6:	4a1a      	ldr	r2, [pc, #104]	; (8000f40 <HAL_DAC_MspInit+0xd8>)
 8000ed8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_DAC_MspInit+0xd4>)
 8000edc:	2206      	movs	r2, #6
 8000ede:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <HAL_DAC_MspInit+0xd4>)
 8000ee2:	2210      	movs	r2, #16
 8000ee4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_DAC_MspInit+0xd4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <HAL_DAC_MspInit+0xd4>)
 8000eee:	2280      	movs	r2, #128	; 0x80
 8000ef0:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_DAC_MspInit+0xd4>)
 8000ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef8:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_DAC_MspInit+0xd4>)
 8000efc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f00:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_DAC_MspInit+0xd4>)
 8000f04:	2220      	movs	r2, #32
 8000f06:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_DAC_MspInit+0xd4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000f0e:	480b      	ldr	r0, [pc, #44]	; (8000f3c <HAL_DAC_MspInit+0xd4>)
 8000f10:	f000 fd00 	bl	8001914 <HAL_DMA_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000f1a:	f7ff ff7b 	bl	8000e14 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_DAC_MspInit+0xd4>)
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <HAL_DAC_MspInit+0xd4>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3728      	adds	r7, #40	; 0x28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40007400 	.word	0x40007400
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	2000003c 	.word	0x2000003c
 8000f40:	40020030 	.word	0x40020030

08000f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f54:	d10b      	bne.n	8000f6e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_TIM_Base_MspInit+0x38>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <HAL_TIM_Base_MspInit+0x38>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6593      	str	r3, [r2, #88]	; 0x58
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_TIM_Base_MspInit+0x38>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <NMI_Handler+0x4>

08000f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <MemManage_Handler+0x4>

08000f92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <BusFault_Handler+0x4>

08000f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <UsageFault_Handler+0x4>

08000f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fcc:	f000 f89c 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <DMA1_Channel3_IRQHandler+0x10>)
 8000fda:	f000 fdb3 	bl	8001b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000003c 	.word	0x2000003c

08000fe8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <SystemInit+0x20>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <SystemInit+0x20>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001044 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001010:	f7ff ffea 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <LoopForever+0x6>)
  ldr r1, =_edata
 8001016:	490d      	ldr	r1, [pc, #52]	; (800104c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <LoopForever+0xe>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800101c:	e002      	b.n	8001024 <LoopCopyDataInit>

0800101e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001022:	3304      	adds	r3, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001028:	d3f9      	bcc.n	800101e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <LoopForever+0x12>)
  ldr r4, =_ebss
 800102c:	4c0a      	ldr	r4, [pc, #40]	; (8001058 <LoopForever+0x16>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001030:	e001      	b.n	8001036 <LoopFillZerobss>

08001032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001034:	3204      	adds	r2, #4

08001036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001038:	d3fb      	bcc.n	8001032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103a:	f002 f903 	bl	8003244 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800103e:	f7ff fdbf 	bl	8000bc0 <main>

08001042 <LoopForever>:

LoopForever:
    b LoopForever
 8001042:	e7fe      	b.n	8001042 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001044:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001050:	08004570 	.word	0x08004570
  ldr r2, =_sbss
 8001054:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001058:	20000264 	.word	0x20000264

0800105c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC1_IRQHandler>

0800105e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f000 f961 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106e:	200f      	movs	r0, #15
 8001070:	f000 f80e 	bl	8001090 <HAL_InitTick>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	e001      	b.n	8001084 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001080:	f7ff fece 	bl	8000e20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001084:	79fb      	ldrb	r3, [r7, #7]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_InitTick+0x6c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d023      	beq.n	80010ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_InitTick+0x70>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_InitTick+0x6c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f96d 	bl	800139a <HAL_SYSTICK_Config>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10f      	bne.n	80010e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d809      	bhi.n	80010e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f000 f937 	bl	8001346 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <HAL_InitTick+0x74>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e007      	b.n	80010f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e004      	b.n	80010f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	e001      	b.n	80010f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000000 	.word	0x20000000
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	20000260 	.word	0x20000260

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000260 	.word	0x20000260

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffde 	bl	8001130 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <__NVIC_EnableIRQ+0x38>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	; (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f7ff ff8e 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff29 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff3e 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff8e 	bl	8001284 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5d 	bl	8001230 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff31 	bl	80011f4 <__NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffa2 	bl	80012ec <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e014      	b.n	80013ee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	791b      	ldrb	r3, [r3, #4]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d105      	bne.n	80013da <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fd47 	bl	8000e68 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2202      	movs	r2, #2
 80013de:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	795b      	ldrb	r3, [r3, #5]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_DAC_Start_DMA+0x1e>
 8001412:	2302      	movs	r3, #2
 8001414:	e0ab      	b.n	800156e <HAL_DAC_Start_DMA+0x176>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2201      	movs	r2, #1
 800141a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2202      	movs	r2, #2
 8001420:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d12f      	bne.n	8001488 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	4a52      	ldr	r2, [pc, #328]	; (8001578 <HAL_DAC_Start_DMA+0x180>)
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	4a51      	ldr	r2, [pc, #324]	; (800157c <HAL_DAC_Start_DMA+0x184>)
 8001436:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4a50      	ldr	r2, [pc, #320]	; (8001580 <HAL_DAC_Start_DMA+0x188>)
 800143e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800144e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	2b08      	cmp	r3, #8
 8001454:	d013      	beq.n	800147e <HAL_DAC_Start_DMA+0x86>
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	2b08      	cmp	r3, #8
 800145a:	d845      	bhi.n	80014e8 <HAL_DAC_Start_DMA+0xf0>
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_DAC_Start_DMA+0x72>
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	2b04      	cmp	r3, #4
 8001466:	d005      	beq.n	8001474 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001468:	e03e      	b.n	80014e8 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	3308      	adds	r3, #8
 8001470:	613b      	str	r3, [r7, #16]
        break;
 8001472:	e03c      	b.n	80014ee <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	330c      	adds	r3, #12
 800147a:	613b      	str	r3, [r7, #16]
        break;
 800147c:	e037      	b.n	80014ee <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	3310      	adds	r3, #16
 8001484:	613b      	str	r3, [r7, #16]
        break;
 8001486:	e032      	b.n	80014ee <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	4a3d      	ldr	r2, [pc, #244]	; (8001584 <HAL_DAC_Start_DMA+0x18c>)
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	4a3c      	ldr	r2, [pc, #240]	; (8001588 <HAL_DAC_Start_DMA+0x190>)
 8001496:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	4a3b      	ldr	r2, [pc, #236]	; (800158c <HAL_DAC_Start_DMA+0x194>)
 800149e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014ae:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d013      	beq.n	80014de <HAL_DAC_Start_DMA+0xe6>
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d817      	bhi.n	80014ec <HAL_DAC_Start_DMA+0xf4>
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_DAC_Start_DMA+0xd2>
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d005      	beq.n	80014d4 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80014c8:	e010      	b.n	80014ec <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3314      	adds	r3, #20
 80014d0:	613b      	str	r3, [r7, #16]
        break;
 80014d2:	e00c      	b.n	80014ee <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3318      	adds	r3, #24
 80014da:	613b      	str	r3, [r7, #16]
        break;
 80014dc:	e007      	b.n	80014ee <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	331c      	adds	r3, #28
 80014e4:	613b      	str	r3, [r7, #16]
        break;
 80014e6:	e002      	b.n	80014ee <HAL_DAC_Start_DMA+0xf6>
        break;
 80014e8:	bf00      	nop
 80014ea:	e000      	b.n	80014ee <HAL_DAC_Start_DMA+0xf6>
        break;
 80014ec:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d111      	bne.n	8001518 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001502:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6898      	ldr	r0, [r3, #8]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	f000 fab9 	bl	8001a84 <HAL_DMA_Start_IT>
 8001512:	4603      	mov	r3, r0
 8001514:	75fb      	strb	r3, [r7, #23]
 8001516:	e010      	b.n	800153a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001526:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	68d8      	ldr	r0, [r3, #12]
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	f000 faa7 	bl	8001a84 <HAL_DMA_Start_IT>
 8001536:	4603      	mov	r3, r0
 8001538:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10c      	bne.n	8001560 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6819      	ldr	r1, [r3, #0]
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	2201      	movs	r2, #1
 8001554:	409a      	lsls	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	e005      	b.n	800156c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	f043 0204 	orr.w	r2, r3, #4
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800156c:	7dfb      	ldrb	r3, [r7, #23]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	08001801 	.word	0x08001801
 800157c:	08001823 	.word	0x08001823
 8001580:	0800183f 	.word	0x0800183f
 8001584:	080018a9 	.word	0x080018a9
 8001588:	080018cb 	.word	0x080018cb
 800158c:	080018e7 	.word	0x080018e7

08001590 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	795b      	ldrb	r3, [r3, #5]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_DAC_ConfigChannel+0x1c>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e107      	b.n	80017f8 <HAL_DAC_ConfigChannel+0x22c>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2201      	movs	r2, #1
 80015ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2202      	movs	r2, #2
 80015f2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d174      	bne.n	80016e6 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80015fc:	f7ff fd98 	bl	8001130 <HAL_GetTick>
 8001600:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d134      	bne.n	8001672 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001608:	e011      	b.n	800162e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800160a:	f7ff fd91 	bl	8001130 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b01      	cmp	r3, #1
 8001616:	d90a      	bls.n	800162e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	f043 0208 	orr.w	r2, r3, #8
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2203      	movs	r2, #3
 8001628:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e0e4      	b.n	80017f8 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1e6      	bne.n	800160a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800163c:	2001      	movs	r0, #1
 800163e:	f7ff fd83 	bl	8001148 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	6992      	ldr	r2, [r2, #24]
 800164a:	641a      	str	r2, [r3, #64]	; 0x40
 800164c:	e01e      	b.n	800168c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800164e:	f7ff fd6f 	bl	8001130 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b01      	cmp	r3, #1
 800165a:	d90a      	bls.n	8001672 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	f043 0208 	orr.w	r2, r3, #8
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2203      	movs	r2, #3
 800166c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e0c2      	b.n	80017f8 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001678:	2b00      	cmp	r3, #0
 800167a:	dbe8      	blt.n	800164e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800167c:	2001      	movs	r0, #1
 800167e:	f7ff fd63 	bl	8001148 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	6992      	ldr	r2, [r2, #24]
 800168a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	ea02 0103 	and.w	r1, r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	69da      	ldr	r2, [r3, #28]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	409a      	lsls	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	21ff      	movs	r1, #255	; 0xff
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	ea02 0103 	and.w	r1, r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	6a1a      	ldr	r2, [r3, #32]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	409a      	lsls	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d11d      	bne.n	800172a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f4:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	221f      	movs	r2, #31
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001730:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	2207      	movs	r2, #7
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	431a      	orrs	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6819      	ldr	r1, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43da      	mvns	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	400a      	ands	r2, r1
 800178e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	f640 72fc 	movw	r2, #4092	; 0xffc
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6819      	ldr	r1, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	22c0      	movs	r2, #192	; 0xc0
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43da      	mvns	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	400a      	ands	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2201      	movs	r2, #1
 80017ee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3720      	adds	r7, #32
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f7ff febe 	bl	8001590 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2201      	movs	r2, #1
 8001818:	711a      	strb	r2, [r3, #4]
}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f7ff feb7 	bl	80015a4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b084      	sub	sp, #16
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	f043 0204 	orr.w	r2, r3, #4
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f7ff fead 	bl	80015b8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2201      	movs	r2, #1
 8001862:	711a      	strb	r2, [r3, #4]
}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f7ff ffd8 	bl	800186c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2201      	movs	r2, #1
 80018c0:	711a      	strb	r2, [r3, #4]
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f7ff ffd1 	bl	8001880 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	f043 0204 	orr.w	r2, r3, #4
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f7ff ffc7 	bl	8001894 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2201      	movs	r2, #1
 800190a:	711a      	strb	r2, [r3, #4]
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e098      	b.n	8001a58 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	4b4d      	ldr	r3, [pc, #308]	; (8001a64 <HAL_DMA_Init+0x150>)
 800192e:	429a      	cmp	r2, r3
 8001930:	d80f      	bhi.n	8001952 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <HAL_DMA_Init+0x154>)
 800193a:	4413      	add	r3, r2
 800193c:	4a4b      	ldr	r2, [pc, #300]	; (8001a6c <HAL_DMA_Init+0x158>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	091b      	lsrs	r3, r3, #4
 8001944:	009a      	lsls	r2, r3, #2
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a48      	ldr	r2, [pc, #288]	; (8001a70 <HAL_DMA_Init+0x15c>)
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
 8001950:	e00e      	b.n	8001970 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	4b46      	ldr	r3, [pc, #280]	; (8001a74 <HAL_DMA_Init+0x160>)
 800195a:	4413      	add	r3, r2
 800195c:	4a43      	ldr	r2, [pc, #268]	; (8001a6c <HAL_DMA_Init+0x158>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	009a      	lsls	r2, r3, #2
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a42      	ldr	r2, [pc, #264]	; (8001a78 <HAL_DMA_Init+0x164>)
 800196e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2202      	movs	r2, #2
 8001974:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800198a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001994:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019ca:	d039      	beq.n	8001a40 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	4a27      	ldr	r2, [pc, #156]	; (8001a70 <HAL_DMA_Init+0x15c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d11a      	bne.n	8001a0c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019d6:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <HAL_DMA_Init+0x168>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f003 031c 	and.w	r3, r3, #28
 80019e2:	210f      	movs	r1, #15
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4924      	ldr	r1, [pc, #144]	; (8001a7c <HAL_DMA_Init+0x168>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019f0:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <HAL_DMA_Init+0x168>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6859      	ldr	r1, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fc:	f003 031c 	and.w	r3, r3, #28
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	491d      	ldr	r1, [pc, #116]	; (8001a7c <HAL_DMA_Init+0x168>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]
 8001a0a:	e019      	b.n	8001a40 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <HAL_DMA_Init+0x16c>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	f003 031c 	and.w	r3, r3, #28
 8001a18:	210f      	movs	r1, #15
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	4917      	ldr	r1, [pc, #92]	; (8001a80 <HAL_DMA_Init+0x16c>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <HAL_DMA_Init+0x16c>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6859      	ldr	r1, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f003 031c 	and.w	r3, r3, #28
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	4911      	ldr	r1, [pc, #68]	; (8001a80 <HAL_DMA_Init+0x16c>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	40020407 	.word	0x40020407
 8001a68:	bffdfff8 	.word	0xbffdfff8
 8001a6c:	cccccccd 	.word	0xcccccccd
 8001a70:	40020000 	.word	0x40020000
 8001a74:	bffdfbf8 	.word	0xbffdfbf8
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	400200a8 	.word	0x400200a8
 8001a80:	400204a8 	.word	0x400204a8

08001a84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_DMA_Start_IT+0x20>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e04b      	b.n	8001b3c <HAL_DMA_Start_IT+0xb8>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d13a      	bne.n	8001b2e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0201 	bic.w	r2, r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	68b9      	ldr	r1, [r7, #8]
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 f8e0 	bl	8001ca2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d008      	beq.n	8001afc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 020e 	orr.w	r2, r2, #14
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	e00f      	b.n	8001b1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0204 	bic.w	r2, r2, #4
 8001b0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 020a 	orr.w	r2, r2, #10
 8001b1a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e005      	b.n	8001b3a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b36:	2302      	movs	r3, #2
 8001b38:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b60:	f003 031c 	and.w	r3, r3, #28
 8001b64:	2204      	movs	r2, #4
 8001b66:	409a      	lsls	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d026      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x7a>
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d021      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0320 	and.w	r3, r3, #32
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d107      	bne.n	8001b98 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0204 	bic.w	r2, r2, #4
 8001b96:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	f003 021c 	and.w	r2, r3, #28
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8001baa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d071      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001bbc:	e06c      	b.n	8001c98 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f003 031c 	and.w	r3, r3, #28
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d02e      	beq.n	8001c30 <HAL_DMA_IRQHandler+0xec>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d029      	beq.n	8001c30 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10b      	bne.n	8001c02 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 020a 	bic.w	r2, r2, #10
 8001bf8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f003 021c 	and.w	r2, r3, #28
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	2102      	movs	r1, #2
 8001c10:	fa01 f202 	lsl.w	r2, r1, r2
 8001c14:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d038      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c2e:	e033      	b.n	8001c98 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	f003 031c 	and.w	r3, r3, #28
 8001c38:	2208      	movs	r2, #8
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d02a      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x156>
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d025      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 020e 	bic.w	r2, r2, #14
 8001c5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f003 021c 	and.w	r2, r3, #28
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c70:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
}
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b085      	sub	sp, #20
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb4:	f003 021c 	and.w	r2, r3, #28
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b10      	cmp	r3, #16
 8001cd2:	d108      	bne.n	8001ce6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ce4:	e007      	b.n	8001cf6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	60da      	str	r2, [r3, #12]
}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d12:	e148      	b.n	8001fa6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	4013      	ands	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 813a 	beq.w	8001fa0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d005      	beq.n	8001d44 <HAL_GPIO_Init+0x40>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d130      	bne.n	8001da6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	f003 0201 	and.w	r2, r3, #1
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d017      	beq.n	8001de2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d123      	bne.n	8001e36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	08da      	lsrs	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3208      	adds	r2, #8
 8001df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	08da      	lsrs	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3208      	adds	r2, #8
 8001e30:	6939      	ldr	r1, [r7, #16]
 8001e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	2203      	movs	r2, #3
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 0203 	and.w	r2, r3, #3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8094 	beq.w	8001fa0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e78:	4b52      	ldr	r3, [pc, #328]	; (8001fc4 <HAL_GPIO_Init+0x2c0>)
 8001e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7c:	4a51      	ldr	r2, [pc, #324]	; (8001fc4 <HAL_GPIO_Init+0x2c0>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6613      	str	r3, [r2, #96]	; 0x60
 8001e84:	4b4f      	ldr	r3, [pc, #316]	; (8001fc4 <HAL_GPIO_Init+0x2c0>)
 8001e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e90:	4a4d      	ldr	r2, [pc, #308]	; (8001fc8 <HAL_GPIO_Init+0x2c4>)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	220f      	movs	r2, #15
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eba:	d00d      	beq.n	8001ed8 <HAL_GPIO_Init+0x1d4>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a43      	ldr	r2, [pc, #268]	; (8001fcc <HAL_GPIO_Init+0x2c8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d007      	beq.n	8001ed4 <HAL_GPIO_Init+0x1d0>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a42      	ldr	r2, [pc, #264]	; (8001fd0 <HAL_GPIO_Init+0x2cc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d101      	bne.n	8001ed0 <HAL_GPIO_Init+0x1cc>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e004      	b.n	8001eda <HAL_GPIO_Init+0x1d6>
 8001ed0:	2307      	movs	r3, #7
 8001ed2:	e002      	b.n	8001eda <HAL_GPIO_Init+0x1d6>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <HAL_GPIO_Init+0x1d6>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	f002 0203 	and.w	r2, r2, #3
 8001ee0:	0092      	lsls	r2, r2, #2
 8001ee2:	4093      	lsls	r3, r2
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eea:	4937      	ldr	r1, [pc, #220]	; (8001fc8 <HAL_GPIO_Init+0x2c4>)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ef8:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f1c:	4a2d      	ldr	r2, [pc, #180]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f22:	4b2c      	ldr	r3, [pc, #176]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f46:	4a23      	ldr	r2, [pc, #140]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f4c:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f70:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f76:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f9a:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f47f aeaf 	bne.w	8001d14 <HAL_GPIO_Init+0x10>
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	bf00      	nop
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	48000400 	.word	0x48000400
 8001fd0:	48000800 	.word	0x48000800
 8001fd4:	40010400 	.word	0x40010400

08001fd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40007000 	.word	0x40007000

08001ff4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002002:	d130      	bne.n	8002066 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002004:	4b23      	ldr	r3, [pc, #140]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800200c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002010:	d038      	beq.n	8002084 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800201a:	4a1e      	ldr	r2, [pc, #120]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002020:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002022:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2232      	movs	r2, #50	; 0x32
 8002028:	fb02 f303 	mul.w	r3, r2, r3
 800202c:	4a1b      	ldr	r2, [pc, #108]	; (800209c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	0c9b      	lsrs	r3, r3, #18
 8002034:	3301      	adds	r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002038:	e002      	b.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	3b01      	subs	r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204c:	d102      	bne.n	8002054 <HAL_PWREx_ControlVoltageScaling+0x60>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f2      	bne.n	800203a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002060:	d110      	bne.n	8002084 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e00f      	b.n	8002086 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800206e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002072:	d007      	beq.n	8002084 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800207c:	4a05      	ldr	r2, [pc, #20]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002082:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40007000 	.word	0x40007000
 8002098:	20000000 	.word	0x20000000
 800209c:	431bde83 	.word	0x431bde83

080020a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	f000 bc02 	b.w	80028b8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b4:	4b96      	ldr	r3, [pc, #600]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020be:	4b94      	ldr	r3, [pc, #592]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80e4 	beq.w	800229e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d007      	beq.n	80020ec <HAL_RCC_OscConfig+0x4c>
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	f040 808b 	bne.w	80021fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	f040 8087 	bne.w	80021fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ec:	4b88      	ldr	r3, [pc, #544]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_OscConfig+0x64>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e3d9      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1a      	ldr	r2, [r3, #32]
 8002108:	4b81      	ldr	r3, [pc, #516]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <HAL_RCC_OscConfig+0x7e>
 8002114:	4b7e      	ldr	r3, [pc, #504]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800211c:	e005      	b.n	800212a <HAL_RCC_OscConfig+0x8a>
 800211e:	4b7c      	ldr	r3, [pc, #496]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800212a:	4293      	cmp	r3, r2
 800212c:	d223      	bcs.n	8002176 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4618      	mov	r0, r3
 8002134:	f000 fd54 	bl	8002be0 <RCC_SetFlashLatencyFromMSIRange>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e3ba      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002142:	4b73      	ldr	r3, [pc, #460]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a72      	ldr	r2, [pc, #456]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002148:	f043 0308 	orr.w	r3, r3, #8
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b70      	ldr	r3, [pc, #448]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	496d      	ldr	r1, [pc, #436]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800215c:	4313      	orrs	r3, r2
 800215e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002160:	4b6b      	ldr	r3, [pc, #428]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	4968      	ldr	r1, [pc, #416]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
 8002174:	e025      	b.n	80021c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002176:	4b66      	ldr	r3, [pc, #408]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a65      	ldr	r2, [pc, #404]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800217c:	f043 0308 	orr.w	r3, r3, #8
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b63      	ldr	r3, [pc, #396]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4960      	ldr	r1, [pc, #384]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002194:	4b5e      	ldr	r3, [pc, #376]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	021b      	lsls	r3, r3, #8
 80021a2:	495b      	ldr	r1, [pc, #364]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fd14 	bl	8002be0 <RCC_SetFlashLatencyFromMSIRange>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e37a      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021c2:	f000 fc81 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 80021c6:	4602      	mov	r2, r0
 80021c8:	4b51      	ldr	r3, [pc, #324]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	4950      	ldr	r1, [pc, #320]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80021d4:	5ccb      	ldrb	r3, [r1, r3]
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	fa22 f303 	lsr.w	r3, r2, r3
 80021de:	4a4e      	ldr	r2, [pc, #312]	; (8002318 <HAL_RCC_OscConfig+0x278>)
 80021e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021e2:	4b4e      	ldr	r3, [pc, #312]	; (800231c <HAL_RCC_OscConfig+0x27c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe ff52 	bl	8001090 <HAL_InitTick>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d052      	beq.n	800229c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	e35e      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d032      	beq.n	8002268 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002202:	4b43      	ldr	r3, [pc, #268]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a42      	ldr	r2, [pc, #264]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800220e:	f7fe ff8f 	bl	8001130 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002216:	f7fe ff8b 	bl	8001130 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e347      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002228:	4b39      	ldr	r3, [pc, #228]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002234:	4b36      	ldr	r3, [pc, #216]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a35      	ldr	r2, [pc, #212]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800223a:	f043 0308 	orr.w	r3, r3, #8
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b33      	ldr	r3, [pc, #204]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	4930      	ldr	r1, [pc, #192]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002252:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	492b      	ldr	r1, [pc, #172]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002262:	4313      	orrs	r3, r2
 8002264:	604b      	str	r3, [r1, #4]
 8002266:	e01a      	b.n	800229e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002268:	4b29      	ldr	r3, [pc, #164]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a28      	ldr	r2, [pc, #160]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002274:	f7fe ff5c 	bl	8001130 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800227c:	f7fe ff58 	bl	8001130 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e314      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x1dc>
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800229c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d073      	beq.n	8002392 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_OscConfig+0x21c>
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	d10e      	bne.n	80022d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d10b      	bne.n	80022d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d063      	beq.n	8002390 <HAL_RCC_OscConfig+0x2f0>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d15f      	bne.n	8002390 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e2f1      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022dc:	d106      	bne.n	80022ec <HAL_RCC_OscConfig+0x24c>
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e025      	b.n	8002338 <HAL_RCC_OscConfig+0x298>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f4:	d114      	bne.n	8002320 <HAL_RCC_OscConfig+0x280>
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a05      	ldr	r2, [pc, #20]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b03      	ldr	r3, [pc, #12]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a02      	ldr	r2, [pc, #8]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e013      	b.n	8002338 <HAL_RCC_OscConfig+0x298>
 8002310:	40021000 	.word	0x40021000
 8002314:	08004350 	.word	0x08004350
 8002318:	20000000 	.word	0x20000000
 800231c:	20000004 	.word	0x20000004
 8002320:	4ba0      	ldr	r3, [pc, #640]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a9f      	ldr	r2, [pc, #636]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b9d      	ldr	r3, [pc, #628]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a9c      	ldr	r2, [pc, #624]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe fef6 	bl	8001130 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002348:	f7fe fef2 	bl	8001130 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e2ae      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800235a:	4b92      	ldr	r3, [pc, #584]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x2a8>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe fee2 	bl	8001130 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7fe fede 	bl	8001130 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e29a      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002382:	4b88      	ldr	r3, [pc, #544]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x2d0>
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d060      	beq.n	8002460 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_OscConfig+0x310>
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d119      	bne.n	80023de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d116      	bne.n	80023de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b0:	4b7c      	ldr	r3, [pc, #496]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_OscConfig+0x328>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e277      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c8:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	061b      	lsls	r3, r3, #24
 80023d6:	4973      	ldr	r1, [pc, #460]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023dc:	e040      	b.n	8002460 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d023      	beq.n	800242e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e6:	4b6f      	ldr	r3, [pc, #444]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a6e      	ldr	r2, [pc, #440]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f2:	f7fe fe9d 	bl	8001130 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fa:	f7fe fe99 	bl	8001130 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e255      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240c:	4b65      	ldr	r3, [pc, #404]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002418:	4b62      	ldr	r3, [pc, #392]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	061b      	lsls	r3, r3, #24
 8002426:	495f      	ldr	r1, [pc, #380]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
 800242c:	e018      	b.n	8002460 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242e:	4b5d      	ldr	r3, [pc, #372]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a5c      	ldr	r2, [pc, #368]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7fe fe79 	bl	8001130 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002442:	f7fe fe75 	bl	8001130 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e231      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002454:	4b53      	ldr	r3, [pc, #332]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d03c      	beq.n	80024e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01c      	beq.n	80024ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002474:	4b4b      	ldr	r3, [pc, #300]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247a:	4a4a      	ldr	r2, [pc, #296]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002484:	f7fe fe54 	bl	8001130 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248c:	f7fe fe50 	bl	8001130 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e20c      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800249e:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ef      	beq.n	800248c <HAL_RCC_OscConfig+0x3ec>
 80024ac:	e01b      	b.n	80024e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ae:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b4:	4a3b      	ldr	r2, [pc, #236]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024b6:	f023 0301 	bic.w	r3, r3, #1
 80024ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7fe fe37 	bl	8001130 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c6:	f7fe fe33 	bl	8001130 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e1ef      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d8:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1ef      	bne.n	80024c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 80a6 	beq.w	8002640 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f4:	2300      	movs	r3, #0
 80024f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024f8:	4b2a      	ldr	r3, [pc, #168]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10d      	bne.n	8002520 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002504:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002508:	4a26      	ldr	r2, [pc, #152]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800250a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250e:	6593      	str	r3, [r2, #88]	; 0x58
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800251c:	2301      	movs	r3, #1
 800251e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002520:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <HAL_RCC_OscConfig+0x508>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d118      	bne.n	800255e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800252c:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <HAL_RCC_OscConfig+0x508>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <HAL_RCC_OscConfig+0x508>)
 8002532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002536:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002538:	f7fe fdfa 	bl	8001130 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002540:	f7fe fdf6 	bl	8001130 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e1b2      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <HAL_RCC_OscConfig+0x508>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d108      	bne.n	8002578 <HAL_RCC_OscConfig+0x4d8>
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002576:	e029      	b.n	80025cc <HAL_RCC_OscConfig+0x52c>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b05      	cmp	r3, #5
 800257e:	d115      	bne.n	80025ac <HAL_RCC_OscConfig+0x50c>
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002586:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	4a03      	ldr	r2, [pc, #12]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025a0:	e014      	b.n	80025cc <HAL_RCC_OscConfig+0x52c>
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40007000 	.word	0x40007000
 80025ac:	4b9a      	ldr	r3, [pc, #616]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	4a99      	ldr	r2, [pc, #612]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025bc:	4b96      	ldr	r3, [pc, #600]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c2:	4a95      	ldr	r2, [pc, #596]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 80025c4:	f023 0304 	bic.w	r3, r3, #4
 80025c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d016      	beq.n	8002602 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7fe fdac 	bl	8001130 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025dc:	f7fe fda8 	bl	8001130 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e162      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f2:	4b89      	ldr	r3, [pc, #548]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0ed      	beq.n	80025dc <HAL_RCC_OscConfig+0x53c>
 8002600:	e015      	b.n	800262e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002602:	f7fe fd95 	bl	8001130 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7fe fd91 	bl	8001130 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	; 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e14b      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002620:	4b7d      	ldr	r3, [pc, #500]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1ed      	bne.n	800260a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800262e:	7ffb      	ldrb	r3, [r7, #31]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d105      	bne.n	8002640 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002634:	4b78      	ldr	r3, [pc, #480]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	4a77      	ldr	r2, [pc, #476]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 800263a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b00      	cmp	r3, #0
 800264a:	d03c      	beq.n	80026c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01c      	beq.n	800268e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002654:	4b70      	ldr	r3, [pc, #448]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 8002656:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800265a:	4a6f      	ldr	r2, [pc, #444]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002664:	f7fe fd64 	bl	8001130 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800266c:	f7fe fd60 	bl	8001130 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e11c      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800267e:	4b66      	ldr	r3, [pc, #408]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 8002680:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0ef      	beq.n	800266c <HAL_RCC_OscConfig+0x5cc>
 800268c:	e01b      	b.n	80026c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800268e:	4b62      	ldr	r3, [pc, #392]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 8002690:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002694:	4a60      	ldr	r2, [pc, #384]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269e:	f7fe fd47 	bl	8001130 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026a6:	f7fe fd43 	bl	8001130 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e0ff      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026b8:	4b57      	ldr	r3, [pc, #348]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 80026ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1ef      	bne.n	80026a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80f3 	beq.w	80028b6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	f040 80c9 	bne.w	800286c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026da:	4b4f      	ldr	r3, [pc, #316]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f003 0203 	and.w	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d12c      	bne.n	8002748 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	3b01      	subs	r3, #1
 80026fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d123      	bne.n	8002748 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d11b      	bne.n	8002748 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d113      	bne.n	8002748 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272a:	085b      	lsrs	r3, r3, #1
 800272c:	3b01      	subs	r3, #1
 800272e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002730:	429a      	cmp	r2, r3
 8002732:	d109      	bne.n	8002748 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	085b      	lsrs	r3, r3, #1
 8002740:	3b01      	subs	r3, #1
 8002742:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002744:	429a      	cmp	r2, r3
 8002746:	d06b      	beq.n	8002820 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b0c      	cmp	r3, #12
 800274c:	d062      	beq.n	8002814 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800274e:	4b32      	ldr	r3, [pc, #200]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0ac      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800275e:	4b2e      	ldr	r3, [pc, #184]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a2d      	ldr	r2, [pc, #180]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 8002764:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002768:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800276a:	f7fe fce1 	bl	8001130 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002772:	f7fe fcdd 	bl	8001130 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e099      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002784:	4b24      	ldr	r3, [pc, #144]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f0      	bne.n	8002772 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002790:	4b21      	ldr	r3, [pc, #132]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	4b21      	ldr	r3, [pc, #132]	; (800281c <HAL_RCC_OscConfig+0x77c>)
 8002796:	4013      	ands	r3, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027a0:	3a01      	subs	r2, #1
 80027a2:	0112      	lsls	r2, r2, #4
 80027a4:	4311      	orrs	r1, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027aa:	0212      	lsls	r2, r2, #8
 80027ac:	4311      	orrs	r1, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027b2:	0852      	lsrs	r2, r2, #1
 80027b4:	3a01      	subs	r2, #1
 80027b6:	0552      	lsls	r2, r2, #21
 80027b8:	4311      	orrs	r1, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027be:	0852      	lsrs	r2, r2, #1
 80027c0:	3a01      	subs	r2, #1
 80027c2:	0652      	lsls	r2, r2, #25
 80027c4:	4311      	orrs	r1, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027ca:	06d2      	lsls	r2, r2, #27
 80027cc:	430a      	orrs	r2, r1
 80027ce:	4912      	ldr	r1, [pc, #72]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027d4:	4b10      	ldr	r3, [pc, #64]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0f      	ldr	r2, [pc, #60]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 80027da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027e0:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4a0c      	ldr	r2, [pc, #48]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 80027e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027ec:	f7fe fca0 	bl	8001130 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe fc9c 	bl	8001130 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e058      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002806:	4b04      	ldr	r3, [pc, #16]	; (8002818 <HAL_RCC_OscConfig+0x778>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002812:	e050      	b.n	80028b6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e04f      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
 8002818:	40021000 	.word	0x40021000
 800281c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002820:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <HAL_RCC_OscConfig+0x820>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d144      	bne.n	80028b6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800282c:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_RCC_OscConfig+0x820>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <HAL_RCC_OscConfig+0x820>)
 8002832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002836:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002838:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_RCC_OscConfig+0x820>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4a20      	ldr	r2, [pc, #128]	; (80028c0 <HAL_RCC_OscConfig+0x820>)
 800283e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002842:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002844:	f7fe fc74 	bl	8001130 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284c:	f7fe fc70 	bl	8001130 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e02c      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800285e:	4b18      	ldr	r3, [pc, #96]	; (80028c0 <HAL_RCC_OscConfig+0x820>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x7ac>
 800286a:	e024      	b.n	80028b6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	2b0c      	cmp	r3, #12
 8002870:	d01f      	beq.n	80028b2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002872:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <HAL_RCC_OscConfig+0x820>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <HAL_RCC_OscConfig+0x820>)
 8002878:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800287c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287e:	f7fe fc57 	bl	8001130 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe fc53 	bl	8001130 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e00f      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCC_OscConfig+0x820>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f0      	bne.n	8002886 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_RCC_OscConfig+0x820>)
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	4905      	ldr	r1, [pc, #20]	; (80028c0 <HAL_RCC_OscConfig+0x820>)
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_RCC_OscConfig+0x824>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	60cb      	str	r3, [r1, #12]
 80028b0:	e001      	b.n	80028b6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3720      	adds	r7, #32
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	feeefffc 	.word	0xfeeefffc

080028c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0e7      	b.n	8002aac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028dc:	4b75      	ldr	r3, [pc, #468]	; (8002ab4 <HAL_RCC_ClockConfig+0x1ec>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d910      	bls.n	800290c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b72      	ldr	r3, [pc, #456]	; (8002ab4 <HAL_RCC_ClockConfig+0x1ec>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 0207 	bic.w	r2, r3, #7
 80028f2:	4970      	ldr	r1, [pc, #448]	; (8002ab4 <HAL_RCC_ClockConfig+0x1ec>)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b6e      	ldr	r3, [pc, #440]	; (8002ab4 <HAL_RCC_ClockConfig+0x1ec>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0cf      	b.n	8002aac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d010      	beq.n	800293a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	4b66      	ldr	r3, [pc, #408]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002924:	429a      	cmp	r2, r3
 8002926:	d908      	bls.n	800293a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002928:	4b63      	ldr	r3, [pc, #396]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4960      	ldr	r1, [pc, #384]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d04c      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d107      	bne.n	800295e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294e:	4b5a      	ldr	r3, [pc, #360]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d121      	bne.n	800299e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e0a6      	b.n	8002aac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d107      	bne.n	8002976 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002966:	4b54      	ldr	r3, [pc, #336]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d115      	bne.n	800299e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e09a      	b.n	8002aac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d107      	bne.n	800298e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800297e:	4b4e      	ldr	r3, [pc, #312]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e08e      	b.n	8002aac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800298e:	4b4a      	ldr	r3, [pc, #296]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e086      	b.n	8002aac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800299e:	4b46      	ldr	r3, [pc, #280]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f023 0203 	bic.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4943      	ldr	r1, [pc, #268]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b0:	f7fe fbbe 	bl	8001130 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b8:	f7fe fbba 	bl	8001130 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e06e      	b.n	8002aac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	4b3a      	ldr	r3, [pc, #232]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 020c 	and.w	r2, r3, #12
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	429a      	cmp	r2, r3
 80029de:	d1eb      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d010      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	4b31      	ldr	r3, [pc, #196]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d208      	bcs.n	8002a0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b2e      	ldr	r3, [pc, #184]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	492b      	ldr	r1, [pc, #172]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a0e:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d210      	bcs.n	8002a3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1c:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f023 0207 	bic.w	r2, r3, #7
 8002a24:	4923      	ldr	r1, [pc, #140]	; (8002ab4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2c:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d001      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e036      	b.n	8002aac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d008      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	4918      	ldr	r1, [pc, #96]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d009      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a68:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4910      	ldr	r1, [pc, #64]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a7c:	f000 f824 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	091b      	lsrs	r3, r3, #4
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	490b      	ldr	r1, [pc, #44]	; (8002abc <HAL_RCC_ClockConfig+0x1f4>)
 8002a8e:	5ccb      	ldrb	r3, [r1, r3]
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
 8002a98:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_RCC_ClockConfig+0x1fc>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe faf5 	bl	8001090 <HAL_InitTick>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002aaa:	7afb      	ldrb	r3, [r7, #11]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40022000 	.word	0x40022000
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	08004350 	.word	0x08004350
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	20000004 	.word	0x20000004

08002ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b089      	sub	sp, #36	; 0x24
 8002acc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad6:	4b3e      	ldr	r3, [pc, #248]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ae0:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x34>
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d121      	bne.n	8002b3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d11e      	bne.n	8002b3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002afc:	4b34      	ldr	r3, [pc, #208]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d107      	bne.n	8002b18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b08:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b0e:	0a1b      	lsrs	r3, r3, #8
 8002b10:	f003 030f 	and.w	r3, r3, #15
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	e005      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b18:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b24:	4a2b      	ldr	r2, [pc, #172]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10d      	bne.n	8002b50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d102      	bne.n	8002b46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b40:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b42:	61bb      	str	r3, [r7, #24]
 8002b44:	e004      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b4c:	4b23      	ldr	r3, [pc, #140]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x114>)
 8002b4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	2b0c      	cmp	r3, #12
 8002b54:	d134      	bne.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b56:	4b1e      	ldr	r3, [pc, #120]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d003      	beq.n	8002b6e <HAL_RCC_GetSysClockFreq+0xa6>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d003      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0xac>
 8002b6c:	e005      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b70:	617b      	str	r3, [r7, #20]
      break;
 8002b72:	e005      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x114>)
 8002b76:	617b      	str	r3, [r7, #20]
      break;
 8002b78:	e002      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	617b      	str	r3, [r7, #20]
      break;
 8002b7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b80:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	fb03 f202 	mul.w	r2, r3, r2
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	0e5b      	lsrs	r3, r3, #25
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bc0:	69bb      	ldr	r3, [r7, #24]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3724      	adds	r7, #36	; 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	08004360 	.word	0x08004360
 8002bd8:	00f42400 	.word	0x00f42400
 8002bdc:	007a1200 	.word	0x007a1200

08002be0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002be8:	2300      	movs	r3, #0
 8002bea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bec:	4b2a      	ldr	r3, [pc, #168]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bf8:	f7ff f9ee 	bl	8001fd8 <HAL_PWREx_GetVoltageRange>
 8002bfc:	6178      	str	r0, [r7, #20]
 8002bfe:	e014      	b.n	8002c2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b25      	ldr	r3, [pc, #148]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	4a24      	ldr	r2, [pc, #144]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c0c:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c18:	f7ff f9de 	bl	8001fd8 <HAL_PWREx_GetVoltageRange>
 8002c1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c22:	4a1d      	ldr	r2, [pc, #116]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c30:	d10b      	bne.n	8002c4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d919      	bls.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c3c:	d902      	bls.n	8002c44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c3e:	2302      	movs	r3, #2
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	e013      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c44:	2301      	movs	r3, #1
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	e010      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b80      	cmp	r3, #128	; 0x80
 8002c4e:	d902      	bls.n	8002c56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c50:	2303      	movs	r3, #3
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	e00a      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b80      	cmp	r3, #128	; 0x80
 8002c5a:	d102      	bne.n	8002c62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	e004      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b70      	cmp	r3, #112	; 0x70
 8002c66:	d101      	bne.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c68:	2301      	movs	r3, #1
 8002c6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 0207 	bic.w	r2, r3, #7
 8002c74:	4909      	ldr	r1, [pc, #36]	; (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c7c:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d001      	beq.n	8002c8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40022000 	.word	0x40022000

08002ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e049      	b.n	8002d46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fe f93c 	bl	8000f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3304      	adds	r3, #4
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f000 f94c 	bl	8002f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d001      	beq.n	8002d68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e033      	b.n	8002dd0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a19      	ldr	r2, [pc, #100]	; (8002ddc <HAL_TIM_Base_Start+0x8c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d009      	beq.n	8002d8e <HAL_TIM_Base_Start+0x3e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d82:	d004      	beq.n	8002d8e <HAL_TIM_Base_Start+0x3e>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a15      	ldr	r2, [pc, #84]	; (8002de0 <HAL_TIM_Base_Start+0x90>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d115      	bne.n	8002dba <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <HAL_TIM_Base_Start+0x94>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b06      	cmp	r3, #6
 8002d9e:	d015      	beq.n	8002dcc <HAL_TIM_Base_Start+0x7c>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da6:	d011      	beq.n	8002dcc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db8:	e008      	b.n	8002dcc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0201 	orr.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	e000      	b.n	8002dce <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dcc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40014000 	.word	0x40014000
 8002de4:	00010007 	.word	0x00010007

08002de8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_TIM_ConfigClockSource+0x1c>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e0b6      	b.n	8002f72 <HAL_TIM_ConfigClockSource+0x18a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e40:	d03e      	beq.n	8002ec0 <HAL_TIM_ConfigClockSource+0xd8>
 8002e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e46:	f200 8087 	bhi.w	8002f58 <HAL_TIM_ConfigClockSource+0x170>
 8002e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4e:	f000 8086 	beq.w	8002f5e <HAL_TIM_ConfigClockSource+0x176>
 8002e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e56:	d87f      	bhi.n	8002f58 <HAL_TIM_ConfigClockSource+0x170>
 8002e58:	2b70      	cmp	r3, #112	; 0x70
 8002e5a:	d01a      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0xaa>
 8002e5c:	2b70      	cmp	r3, #112	; 0x70
 8002e5e:	d87b      	bhi.n	8002f58 <HAL_TIM_ConfigClockSource+0x170>
 8002e60:	2b60      	cmp	r3, #96	; 0x60
 8002e62:	d050      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0x11e>
 8002e64:	2b60      	cmp	r3, #96	; 0x60
 8002e66:	d877      	bhi.n	8002f58 <HAL_TIM_ConfigClockSource+0x170>
 8002e68:	2b50      	cmp	r3, #80	; 0x50
 8002e6a:	d03c      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0xfe>
 8002e6c:	2b50      	cmp	r3, #80	; 0x50
 8002e6e:	d873      	bhi.n	8002f58 <HAL_TIM_ConfigClockSource+0x170>
 8002e70:	2b40      	cmp	r3, #64	; 0x40
 8002e72:	d058      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x13e>
 8002e74:	2b40      	cmp	r3, #64	; 0x40
 8002e76:	d86f      	bhi.n	8002f58 <HAL_TIM_ConfigClockSource+0x170>
 8002e78:	2b30      	cmp	r3, #48	; 0x30
 8002e7a:	d064      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x15e>
 8002e7c:	2b30      	cmp	r3, #48	; 0x30
 8002e7e:	d86b      	bhi.n	8002f58 <HAL_TIM_ConfigClockSource+0x170>
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	d060      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x15e>
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d867      	bhi.n	8002f58 <HAL_TIM_ConfigClockSource+0x170>
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d05c      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x15e>
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	d05a      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x15e>
 8002e90:	e062      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6899      	ldr	r1, [r3, #8]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f000 f949 	bl	8003138 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002eb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	609a      	str	r2, [r3, #8]
      break;
 8002ebe:	e04f      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	6899      	ldr	r1, [r3, #8]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f000 f932 	bl	8003138 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ee2:	609a      	str	r2, [r3, #8]
      break;
 8002ee4:	e03c      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	6859      	ldr	r1, [r3, #4]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f000 f8a6 	bl	8003044 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2150      	movs	r1, #80	; 0x50
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f8ff 	bl	8003102 <TIM_ITRx_SetConfig>
      break;
 8002f04:	e02c      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6859      	ldr	r1, [r3, #4]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	461a      	mov	r2, r3
 8002f14:	f000 f8c5 	bl	80030a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2160      	movs	r1, #96	; 0x60
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f8ef 	bl	8003102 <TIM_ITRx_SetConfig>
      break;
 8002f24:	e01c      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	461a      	mov	r2, r3
 8002f34:	f000 f886 	bl	8003044 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2140      	movs	r1, #64	; 0x40
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 f8df 	bl	8003102 <TIM_ITRx_SetConfig>
      break;
 8002f44:	e00c      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4610      	mov	r0, r2
 8002f52:	f000 f8d6 	bl	8003102 <TIM_ITRx_SetConfig>
      break;
 8002f56:	e003      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f5c:	e000      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002f5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a2a      	ldr	r2, [pc, #168]	; (8003038 <TIM_Base_SetConfig+0xbc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d003      	beq.n	8002f9c <TIM_Base_SetConfig+0x20>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9a:	d108      	bne.n	8002fae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a21      	ldr	r2, [pc, #132]	; (8003038 <TIM_Base_SetConfig+0xbc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00b      	beq.n	8002fce <TIM_Base_SetConfig+0x52>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbc:	d007      	beq.n	8002fce <TIM_Base_SetConfig+0x52>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	; (800303c <TIM_Base_SetConfig+0xc0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d003      	beq.n	8002fce <TIM_Base_SetConfig+0x52>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a1d      	ldr	r2, [pc, #116]	; (8003040 <TIM_Base_SetConfig+0xc4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d108      	bne.n	8002fe0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <TIM_Base_SetConfig+0xbc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d007      	beq.n	800301c <TIM_Base_SetConfig+0xa0>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a0b      	ldr	r2, [pc, #44]	; (800303c <TIM_Base_SetConfig+0xc0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d003      	beq.n	800301c <TIM_Base_SetConfig+0xa0>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <TIM_Base_SetConfig+0xc4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d103      	bne.n	8003024 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	615a      	str	r2, [r3, #20]
}
 800302a:	bf00      	nop
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40014000 	.word	0x40014000
 8003040:	40014400 	.word	0x40014400

08003044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f023 0201 	bic.w	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800306e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f023 030a 	bic.w	r3, r3, #10
 8003080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	621a      	str	r2, [r3, #32]
}
 8003096:	bf00      	nop
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b087      	sub	sp, #28
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f023 0210 	bic.w	r2, r3, #16
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	031b      	lsls	r3, r3, #12
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	621a      	str	r2, [r3, #32]
}
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003102:	b480      	push	{r7}
 8003104:	b085      	sub	sp, #20
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003118:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	f043 0307 	orr.w	r3, r3, #7
 8003124:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	609a      	str	r2, [r3, #8]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003152:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	021a      	lsls	r2, r3, #8
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	431a      	orrs	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4313      	orrs	r3, r2
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	609a      	str	r2, [r3, #8]
}
 800316c:	bf00      	nop
 800316e:	371c      	adds	r7, #28
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800318c:	2302      	movs	r3, #2
 800318e:	e04f      	b.n	8003230 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a21      	ldr	r2, [pc, #132]	; (800323c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d108      	bne.n	80031cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a14      	ldr	r2, [pc, #80]	; (800323c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d009      	beq.n	8003204 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f8:	d004      	beq.n	8003204 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a10      	ldr	r2, [pc, #64]	; (8003240 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d10c      	bne.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800320a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	4313      	orrs	r3, r2
 8003214:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	40012c00 	.word	0x40012c00
 8003240:	40014000 	.word	0x40014000

08003244 <__libc_init_array>:
 8003244:	b570      	push	{r4, r5, r6, lr}
 8003246:	4d0d      	ldr	r5, [pc, #52]	; (800327c <__libc_init_array+0x38>)
 8003248:	4c0d      	ldr	r4, [pc, #52]	; (8003280 <__libc_init_array+0x3c>)
 800324a:	1b64      	subs	r4, r4, r5
 800324c:	10a4      	asrs	r4, r4, #2
 800324e:	2600      	movs	r6, #0
 8003250:	42a6      	cmp	r6, r4
 8003252:	d109      	bne.n	8003268 <__libc_init_array+0x24>
 8003254:	4d0b      	ldr	r5, [pc, #44]	; (8003284 <__libc_init_array+0x40>)
 8003256:	4c0c      	ldr	r4, [pc, #48]	; (8003288 <__libc_init_array+0x44>)
 8003258:	f001 f86c 	bl	8004334 <_init>
 800325c:	1b64      	subs	r4, r4, r5
 800325e:	10a4      	asrs	r4, r4, #2
 8003260:	2600      	movs	r6, #0
 8003262:	42a6      	cmp	r6, r4
 8003264:	d105      	bne.n	8003272 <__libc_init_array+0x2e>
 8003266:	bd70      	pop	{r4, r5, r6, pc}
 8003268:	f855 3b04 	ldr.w	r3, [r5], #4
 800326c:	4798      	blx	r3
 800326e:	3601      	adds	r6, #1
 8003270:	e7ee      	b.n	8003250 <__libc_init_array+0xc>
 8003272:	f855 3b04 	ldr.w	r3, [r5], #4
 8003276:	4798      	blx	r3
 8003278:	3601      	adds	r6, #1
 800327a:	e7f2      	b.n	8003262 <__libc_init_array+0x1e>
 800327c:	08004568 	.word	0x08004568
 8003280:	08004568 	.word	0x08004568
 8003284:	08004568 	.word	0x08004568
 8003288:	0800456c 	.word	0x0800456c

0800328c <memset>:
 800328c:	4402      	add	r2, r0
 800328e:	4603      	mov	r3, r0
 8003290:	4293      	cmp	r3, r2
 8003292:	d100      	bne.n	8003296 <memset+0xa>
 8003294:	4770      	bx	lr
 8003296:	f803 1b01 	strb.w	r1, [r3], #1
 800329a:	e7f9      	b.n	8003290 <memset+0x4>
 800329c:	0000      	movs	r0, r0
	...

080032a0 <sin>:
 80032a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80032a2:	ec53 2b10 	vmov	r2, r3, d0
 80032a6:	4828      	ldr	r0, [pc, #160]	; (8003348 <sin+0xa8>)
 80032a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80032ac:	4281      	cmp	r1, r0
 80032ae:	dc07      	bgt.n	80032c0 <sin+0x20>
 80032b0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003340 <sin+0xa0>
 80032b4:	2000      	movs	r0, #0
 80032b6:	b005      	add	sp, #20
 80032b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80032bc:	f000 be6c 	b.w	8003f98 <__kernel_sin>
 80032c0:	4822      	ldr	r0, [pc, #136]	; (800334c <sin+0xac>)
 80032c2:	4281      	cmp	r1, r0
 80032c4:	dd09      	ble.n	80032da <sin+0x3a>
 80032c6:	ee10 0a10 	vmov	r0, s0
 80032ca:	4619      	mov	r1, r3
 80032cc:	f7fc ff84 	bl	80001d8 <__aeabi_dsub>
 80032d0:	ec41 0b10 	vmov	d0, r0, r1
 80032d4:	b005      	add	sp, #20
 80032d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80032da:	4668      	mov	r0, sp
 80032dc:	f000 f838 	bl	8003350 <__ieee754_rem_pio2>
 80032e0:	f000 0003 	and.w	r0, r0, #3
 80032e4:	2801      	cmp	r0, #1
 80032e6:	d00c      	beq.n	8003302 <sin+0x62>
 80032e8:	2802      	cmp	r0, #2
 80032ea:	d011      	beq.n	8003310 <sin+0x70>
 80032ec:	b9f0      	cbnz	r0, 800332c <sin+0x8c>
 80032ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80032f2:	ed9d 0b00 	vldr	d0, [sp]
 80032f6:	2001      	movs	r0, #1
 80032f8:	f000 fe4e 	bl	8003f98 <__kernel_sin>
 80032fc:	ec51 0b10 	vmov	r0, r1, d0
 8003300:	e7e6      	b.n	80032d0 <sin+0x30>
 8003302:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003306:	ed9d 0b00 	vldr	d0, [sp]
 800330a:	f000 fa2d 	bl	8003768 <__kernel_cos>
 800330e:	e7f5      	b.n	80032fc <sin+0x5c>
 8003310:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003314:	ed9d 0b00 	vldr	d0, [sp]
 8003318:	2001      	movs	r0, #1
 800331a:	f000 fe3d 	bl	8003f98 <__kernel_sin>
 800331e:	ec53 2b10 	vmov	r2, r3, d0
 8003322:	ee10 0a10 	vmov	r0, s0
 8003326:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800332a:	e7d1      	b.n	80032d0 <sin+0x30>
 800332c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003330:	ed9d 0b00 	vldr	d0, [sp]
 8003334:	f000 fa18 	bl	8003768 <__kernel_cos>
 8003338:	e7f1      	b.n	800331e <sin+0x7e>
 800333a:	bf00      	nop
 800333c:	f3af 8000 	nop.w
	...
 8003348:	3fe921fb 	.word	0x3fe921fb
 800334c:	7fefffff 	.word	0x7fefffff

08003350 <__ieee754_rem_pio2>:
 8003350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003354:	ed2d 8b02 	vpush	{d8}
 8003358:	ec55 4b10 	vmov	r4, r5, d0
 800335c:	4bca      	ldr	r3, [pc, #808]	; (8003688 <__ieee754_rem_pio2+0x338>)
 800335e:	b08b      	sub	sp, #44	; 0x2c
 8003360:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003364:	4598      	cmp	r8, r3
 8003366:	4682      	mov	sl, r0
 8003368:	9502      	str	r5, [sp, #8]
 800336a:	dc08      	bgt.n	800337e <__ieee754_rem_pio2+0x2e>
 800336c:	2200      	movs	r2, #0
 800336e:	2300      	movs	r3, #0
 8003370:	ed80 0b00 	vstr	d0, [r0]
 8003374:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003378:	f04f 0b00 	mov.w	fp, #0
 800337c:	e028      	b.n	80033d0 <__ieee754_rem_pio2+0x80>
 800337e:	4bc3      	ldr	r3, [pc, #780]	; (800368c <__ieee754_rem_pio2+0x33c>)
 8003380:	4598      	cmp	r8, r3
 8003382:	dc78      	bgt.n	8003476 <__ieee754_rem_pio2+0x126>
 8003384:	9b02      	ldr	r3, [sp, #8]
 8003386:	4ec2      	ldr	r6, [pc, #776]	; (8003690 <__ieee754_rem_pio2+0x340>)
 8003388:	2b00      	cmp	r3, #0
 800338a:	ee10 0a10 	vmov	r0, s0
 800338e:	a3b0      	add	r3, pc, #704	; (adr r3, 8003650 <__ieee754_rem_pio2+0x300>)
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	4629      	mov	r1, r5
 8003396:	dd39      	ble.n	800340c <__ieee754_rem_pio2+0xbc>
 8003398:	f7fc ff1e 	bl	80001d8 <__aeabi_dsub>
 800339c:	45b0      	cmp	r8, r6
 800339e:	4604      	mov	r4, r0
 80033a0:	460d      	mov	r5, r1
 80033a2:	d01b      	beq.n	80033dc <__ieee754_rem_pio2+0x8c>
 80033a4:	a3ac      	add	r3, pc, #688	; (adr r3, 8003658 <__ieee754_rem_pio2+0x308>)
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f7fc ff15 	bl	80001d8 <__aeabi_dsub>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	e9ca 2300 	strd	r2, r3, [sl]
 80033b6:	4620      	mov	r0, r4
 80033b8:	4629      	mov	r1, r5
 80033ba:	f7fc ff0d 	bl	80001d8 <__aeabi_dsub>
 80033be:	a3a6      	add	r3, pc, #664	; (adr r3, 8003658 <__ieee754_rem_pio2+0x308>)
 80033c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c4:	f7fc ff08 	bl	80001d8 <__aeabi_dsub>
 80033c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80033cc:	f04f 0b01 	mov.w	fp, #1
 80033d0:	4658      	mov	r0, fp
 80033d2:	b00b      	add	sp, #44	; 0x2c
 80033d4:	ecbd 8b02 	vpop	{d8}
 80033d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033dc:	a3a0      	add	r3, pc, #640	; (adr r3, 8003660 <__ieee754_rem_pio2+0x310>)
 80033de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e2:	f7fc fef9 	bl	80001d8 <__aeabi_dsub>
 80033e6:	a3a0      	add	r3, pc, #640	; (adr r3, 8003668 <__ieee754_rem_pio2+0x318>)
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	4604      	mov	r4, r0
 80033ee:	460d      	mov	r5, r1
 80033f0:	f7fc fef2 	bl	80001d8 <__aeabi_dsub>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	e9ca 2300 	strd	r2, r3, [sl]
 80033fc:	4620      	mov	r0, r4
 80033fe:	4629      	mov	r1, r5
 8003400:	f7fc feea 	bl	80001d8 <__aeabi_dsub>
 8003404:	a398      	add	r3, pc, #608	; (adr r3, 8003668 <__ieee754_rem_pio2+0x318>)
 8003406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340a:	e7db      	b.n	80033c4 <__ieee754_rem_pio2+0x74>
 800340c:	f7fc fee6 	bl	80001dc <__adddf3>
 8003410:	45b0      	cmp	r8, r6
 8003412:	4604      	mov	r4, r0
 8003414:	460d      	mov	r5, r1
 8003416:	d016      	beq.n	8003446 <__ieee754_rem_pio2+0xf6>
 8003418:	a38f      	add	r3, pc, #572	; (adr r3, 8003658 <__ieee754_rem_pio2+0x308>)
 800341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341e:	f7fc fedd 	bl	80001dc <__adddf3>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	e9ca 2300 	strd	r2, r3, [sl]
 800342a:	4620      	mov	r0, r4
 800342c:	4629      	mov	r1, r5
 800342e:	f7fc fed3 	bl	80001d8 <__aeabi_dsub>
 8003432:	a389      	add	r3, pc, #548	; (adr r3, 8003658 <__ieee754_rem_pio2+0x308>)
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	f7fc fed0 	bl	80001dc <__adddf3>
 800343c:	f04f 3bff 	mov.w	fp, #4294967295
 8003440:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003444:	e7c4      	b.n	80033d0 <__ieee754_rem_pio2+0x80>
 8003446:	a386      	add	r3, pc, #536	; (adr r3, 8003660 <__ieee754_rem_pio2+0x310>)
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	f7fc fec6 	bl	80001dc <__adddf3>
 8003450:	a385      	add	r3, pc, #532	; (adr r3, 8003668 <__ieee754_rem_pio2+0x318>)
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	4604      	mov	r4, r0
 8003458:	460d      	mov	r5, r1
 800345a:	f7fc febf 	bl	80001dc <__adddf3>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	e9ca 2300 	strd	r2, r3, [sl]
 8003466:	4620      	mov	r0, r4
 8003468:	4629      	mov	r1, r5
 800346a:	f7fc feb5 	bl	80001d8 <__aeabi_dsub>
 800346e:	a37e      	add	r3, pc, #504	; (adr r3, 8003668 <__ieee754_rem_pio2+0x318>)
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	e7e0      	b.n	8003438 <__ieee754_rem_pio2+0xe8>
 8003476:	4b87      	ldr	r3, [pc, #540]	; (8003694 <__ieee754_rem_pio2+0x344>)
 8003478:	4598      	cmp	r8, r3
 800347a:	f300 80d9 	bgt.w	8003630 <__ieee754_rem_pio2+0x2e0>
 800347e:	f000 fe49 	bl	8004114 <fabs>
 8003482:	ec55 4b10 	vmov	r4, r5, d0
 8003486:	ee10 0a10 	vmov	r0, s0
 800348a:	a379      	add	r3, pc, #484	; (adr r3, 8003670 <__ieee754_rem_pio2+0x320>)
 800348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003490:	4629      	mov	r1, r5
 8003492:	f7fd f859 	bl	8000548 <__aeabi_dmul>
 8003496:	4b80      	ldr	r3, [pc, #512]	; (8003698 <__ieee754_rem_pio2+0x348>)
 8003498:	2200      	movs	r2, #0
 800349a:	f7fc fe9f 	bl	80001dc <__adddf3>
 800349e:	f7fd faed 	bl	8000a7c <__aeabi_d2iz>
 80034a2:	4683      	mov	fp, r0
 80034a4:	f7fc ffe6 	bl	8000474 <__aeabi_i2d>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	ec43 2b18 	vmov	d8, r2, r3
 80034b0:	a367      	add	r3, pc, #412	; (adr r3, 8003650 <__ieee754_rem_pio2+0x300>)
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f7fd f847 	bl	8000548 <__aeabi_dmul>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4620      	mov	r0, r4
 80034c0:	4629      	mov	r1, r5
 80034c2:	f7fc fe89 	bl	80001d8 <__aeabi_dsub>
 80034c6:	a364      	add	r3, pc, #400	; (adr r3, 8003658 <__ieee754_rem_pio2+0x308>)
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	4606      	mov	r6, r0
 80034ce:	460f      	mov	r7, r1
 80034d0:	ec51 0b18 	vmov	r0, r1, d8
 80034d4:	f7fd f838 	bl	8000548 <__aeabi_dmul>
 80034d8:	f1bb 0f1f 	cmp.w	fp, #31
 80034dc:	4604      	mov	r4, r0
 80034de:	460d      	mov	r5, r1
 80034e0:	dc0d      	bgt.n	80034fe <__ieee754_rem_pio2+0x1ae>
 80034e2:	4b6e      	ldr	r3, [pc, #440]	; (800369c <__ieee754_rem_pio2+0x34c>)
 80034e4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80034e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ec:	4543      	cmp	r3, r8
 80034ee:	d006      	beq.n	80034fe <__ieee754_rem_pio2+0x1ae>
 80034f0:	4622      	mov	r2, r4
 80034f2:	462b      	mov	r3, r5
 80034f4:	4630      	mov	r0, r6
 80034f6:	4639      	mov	r1, r7
 80034f8:	f7fc fe6e 	bl	80001d8 <__aeabi_dsub>
 80034fc:	e00f      	b.n	800351e <__ieee754_rem_pio2+0x1ce>
 80034fe:	462b      	mov	r3, r5
 8003500:	4622      	mov	r2, r4
 8003502:	4630      	mov	r0, r6
 8003504:	4639      	mov	r1, r7
 8003506:	f7fc fe67 	bl	80001d8 <__aeabi_dsub>
 800350a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800350e:	9303      	str	r3, [sp, #12]
 8003510:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003514:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8003518:	f1b8 0f10 	cmp.w	r8, #16
 800351c:	dc02      	bgt.n	8003524 <__ieee754_rem_pio2+0x1d4>
 800351e:	e9ca 0100 	strd	r0, r1, [sl]
 8003522:	e039      	b.n	8003598 <__ieee754_rem_pio2+0x248>
 8003524:	a34e      	add	r3, pc, #312	; (adr r3, 8003660 <__ieee754_rem_pio2+0x310>)
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	ec51 0b18 	vmov	r0, r1, d8
 800352e:	f7fd f80b 	bl	8000548 <__aeabi_dmul>
 8003532:	4604      	mov	r4, r0
 8003534:	460d      	mov	r5, r1
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4630      	mov	r0, r6
 800353c:	4639      	mov	r1, r7
 800353e:	f7fc fe4b 	bl	80001d8 <__aeabi_dsub>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4680      	mov	r8, r0
 8003548:	4689      	mov	r9, r1
 800354a:	4630      	mov	r0, r6
 800354c:	4639      	mov	r1, r7
 800354e:	f7fc fe43 	bl	80001d8 <__aeabi_dsub>
 8003552:	4622      	mov	r2, r4
 8003554:	462b      	mov	r3, r5
 8003556:	f7fc fe3f 	bl	80001d8 <__aeabi_dsub>
 800355a:	a343      	add	r3, pc, #268	; (adr r3, 8003668 <__ieee754_rem_pio2+0x318>)
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	4604      	mov	r4, r0
 8003562:	460d      	mov	r5, r1
 8003564:	ec51 0b18 	vmov	r0, r1, d8
 8003568:	f7fc ffee 	bl	8000548 <__aeabi_dmul>
 800356c:	4622      	mov	r2, r4
 800356e:	462b      	mov	r3, r5
 8003570:	f7fc fe32 	bl	80001d8 <__aeabi_dsub>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4604      	mov	r4, r0
 800357a:	460d      	mov	r5, r1
 800357c:	4640      	mov	r0, r8
 800357e:	4649      	mov	r1, r9
 8003580:	f7fc fe2a 	bl	80001d8 <__aeabi_dsub>
 8003584:	9a03      	ldr	r2, [sp, #12]
 8003586:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b31      	cmp	r3, #49	; 0x31
 800358e:	dc24      	bgt.n	80035da <__ieee754_rem_pio2+0x28a>
 8003590:	e9ca 0100 	strd	r0, r1, [sl]
 8003594:	4646      	mov	r6, r8
 8003596:	464f      	mov	r7, r9
 8003598:	e9da 8900 	ldrd	r8, r9, [sl]
 800359c:	4630      	mov	r0, r6
 800359e:	4642      	mov	r2, r8
 80035a0:	464b      	mov	r3, r9
 80035a2:	4639      	mov	r1, r7
 80035a4:	f7fc fe18 	bl	80001d8 <__aeabi_dsub>
 80035a8:	462b      	mov	r3, r5
 80035aa:	4622      	mov	r2, r4
 80035ac:	f7fc fe14 	bl	80001d8 <__aeabi_dsub>
 80035b0:	9b02      	ldr	r3, [sp, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80035b8:	f6bf af0a 	bge.w	80033d0 <__ieee754_rem_pio2+0x80>
 80035bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80035c0:	f8ca 3004 	str.w	r3, [sl, #4]
 80035c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80035c8:	f8ca 8000 	str.w	r8, [sl]
 80035cc:	f8ca 0008 	str.w	r0, [sl, #8]
 80035d0:	f8ca 300c 	str.w	r3, [sl, #12]
 80035d4:	f1cb 0b00 	rsb	fp, fp, #0
 80035d8:	e6fa      	b.n	80033d0 <__ieee754_rem_pio2+0x80>
 80035da:	a327      	add	r3, pc, #156	; (adr r3, 8003678 <__ieee754_rem_pio2+0x328>)
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	ec51 0b18 	vmov	r0, r1, d8
 80035e4:	f7fc ffb0 	bl	8000548 <__aeabi_dmul>
 80035e8:	4604      	mov	r4, r0
 80035ea:	460d      	mov	r5, r1
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4640      	mov	r0, r8
 80035f2:	4649      	mov	r1, r9
 80035f4:	f7fc fdf0 	bl	80001d8 <__aeabi_dsub>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4606      	mov	r6, r0
 80035fe:	460f      	mov	r7, r1
 8003600:	4640      	mov	r0, r8
 8003602:	4649      	mov	r1, r9
 8003604:	f7fc fde8 	bl	80001d8 <__aeabi_dsub>
 8003608:	4622      	mov	r2, r4
 800360a:	462b      	mov	r3, r5
 800360c:	f7fc fde4 	bl	80001d8 <__aeabi_dsub>
 8003610:	a31b      	add	r3, pc, #108	; (adr r3, 8003680 <__ieee754_rem_pio2+0x330>)
 8003612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003616:	4604      	mov	r4, r0
 8003618:	460d      	mov	r5, r1
 800361a:	ec51 0b18 	vmov	r0, r1, d8
 800361e:	f7fc ff93 	bl	8000548 <__aeabi_dmul>
 8003622:	4622      	mov	r2, r4
 8003624:	462b      	mov	r3, r5
 8003626:	f7fc fdd7 	bl	80001d8 <__aeabi_dsub>
 800362a:	4604      	mov	r4, r0
 800362c:	460d      	mov	r5, r1
 800362e:	e75f      	b.n	80034f0 <__ieee754_rem_pio2+0x1a0>
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <__ieee754_rem_pio2+0x350>)
 8003632:	4598      	cmp	r8, r3
 8003634:	dd36      	ble.n	80036a4 <__ieee754_rem_pio2+0x354>
 8003636:	ee10 2a10 	vmov	r2, s0
 800363a:	462b      	mov	r3, r5
 800363c:	4620      	mov	r0, r4
 800363e:	4629      	mov	r1, r5
 8003640:	f7fc fdca 	bl	80001d8 <__aeabi_dsub>
 8003644:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003648:	e9ca 0100 	strd	r0, r1, [sl]
 800364c:	e694      	b.n	8003378 <__ieee754_rem_pio2+0x28>
 800364e:	bf00      	nop
 8003650:	54400000 	.word	0x54400000
 8003654:	3ff921fb 	.word	0x3ff921fb
 8003658:	1a626331 	.word	0x1a626331
 800365c:	3dd0b461 	.word	0x3dd0b461
 8003660:	1a600000 	.word	0x1a600000
 8003664:	3dd0b461 	.word	0x3dd0b461
 8003668:	2e037073 	.word	0x2e037073
 800366c:	3ba3198a 	.word	0x3ba3198a
 8003670:	6dc9c883 	.word	0x6dc9c883
 8003674:	3fe45f30 	.word	0x3fe45f30
 8003678:	2e000000 	.word	0x2e000000
 800367c:	3ba3198a 	.word	0x3ba3198a
 8003680:	252049c1 	.word	0x252049c1
 8003684:	397b839a 	.word	0x397b839a
 8003688:	3fe921fb 	.word	0x3fe921fb
 800368c:	4002d97b 	.word	0x4002d97b
 8003690:	3ff921fb 	.word	0x3ff921fb
 8003694:	413921fb 	.word	0x413921fb
 8003698:	3fe00000 	.word	0x3fe00000
 800369c:	08004390 	.word	0x08004390
 80036a0:	7fefffff 	.word	0x7fefffff
 80036a4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80036a8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80036ac:	ee10 0a10 	vmov	r0, s0
 80036b0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80036b4:	ee10 6a10 	vmov	r6, s0
 80036b8:	460f      	mov	r7, r1
 80036ba:	f7fd f9df 	bl	8000a7c <__aeabi_d2iz>
 80036be:	f7fc fed9 	bl	8000474 <__aeabi_i2d>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4630      	mov	r0, r6
 80036c8:	4639      	mov	r1, r7
 80036ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80036ce:	f7fc fd83 	bl	80001d8 <__aeabi_dsub>
 80036d2:	4b23      	ldr	r3, [pc, #140]	; (8003760 <__ieee754_rem_pio2+0x410>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	f7fc ff37 	bl	8000548 <__aeabi_dmul>
 80036da:	460f      	mov	r7, r1
 80036dc:	4606      	mov	r6, r0
 80036de:	f7fd f9cd 	bl	8000a7c <__aeabi_d2iz>
 80036e2:	f7fc fec7 	bl	8000474 <__aeabi_i2d>
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	4630      	mov	r0, r6
 80036ec:	4639      	mov	r1, r7
 80036ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80036f2:	f7fc fd71 	bl	80001d8 <__aeabi_dsub>
 80036f6:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <__ieee754_rem_pio2+0x410>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	f7fc ff25 	bl	8000548 <__aeabi_dmul>
 80036fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003702:	ad04      	add	r5, sp, #16
 8003704:	f04f 0803 	mov.w	r8, #3
 8003708:	46a9      	mov	r9, r5
 800370a:	2600      	movs	r6, #0
 800370c:	2700      	movs	r7, #0
 800370e:	4632      	mov	r2, r6
 8003710:	463b      	mov	r3, r7
 8003712:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003716:	46c3      	mov	fp, r8
 8003718:	3d08      	subs	r5, #8
 800371a:	f108 38ff 	add.w	r8, r8, #4294967295
 800371e:	f7fd f97b 	bl	8000a18 <__aeabi_dcmpeq>
 8003722:	2800      	cmp	r0, #0
 8003724:	d1f3      	bne.n	800370e <__ieee754_rem_pio2+0x3be>
 8003726:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <__ieee754_rem_pio2+0x414>)
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	2302      	movs	r3, #2
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	4622      	mov	r2, r4
 8003730:	465b      	mov	r3, fp
 8003732:	4651      	mov	r1, sl
 8003734:	4648      	mov	r0, r9
 8003736:	f000 f8df 	bl	80038f8 <__kernel_rem_pio2>
 800373a:	9b02      	ldr	r3, [sp, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	4683      	mov	fp, r0
 8003740:	f6bf ae46 	bge.w	80033d0 <__ieee754_rem_pio2+0x80>
 8003744:	e9da 2100 	ldrd	r2, r1, [sl]
 8003748:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800374c:	e9ca 2300 	strd	r2, r3, [sl]
 8003750:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8003754:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003758:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800375c:	e73a      	b.n	80035d4 <__ieee754_rem_pio2+0x284>
 800375e:	bf00      	nop
 8003760:	41700000 	.word	0x41700000
 8003764:	08004410 	.word	0x08004410

08003768 <__kernel_cos>:
 8003768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800376c:	ec57 6b10 	vmov	r6, r7, d0
 8003770:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003774:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003778:	ed8d 1b00 	vstr	d1, [sp]
 800377c:	da07      	bge.n	800378e <__kernel_cos+0x26>
 800377e:	ee10 0a10 	vmov	r0, s0
 8003782:	4639      	mov	r1, r7
 8003784:	f7fd f97a 	bl	8000a7c <__aeabi_d2iz>
 8003788:	2800      	cmp	r0, #0
 800378a:	f000 8088 	beq.w	800389e <__kernel_cos+0x136>
 800378e:	4632      	mov	r2, r6
 8003790:	463b      	mov	r3, r7
 8003792:	4630      	mov	r0, r6
 8003794:	4639      	mov	r1, r7
 8003796:	f7fc fed7 	bl	8000548 <__aeabi_dmul>
 800379a:	4b51      	ldr	r3, [pc, #324]	; (80038e0 <__kernel_cos+0x178>)
 800379c:	2200      	movs	r2, #0
 800379e:	4604      	mov	r4, r0
 80037a0:	460d      	mov	r5, r1
 80037a2:	f7fc fed1 	bl	8000548 <__aeabi_dmul>
 80037a6:	a340      	add	r3, pc, #256	; (adr r3, 80038a8 <__kernel_cos+0x140>)
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	4682      	mov	sl, r0
 80037ae:	468b      	mov	fp, r1
 80037b0:	4620      	mov	r0, r4
 80037b2:	4629      	mov	r1, r5
 80037b4:	f7fc fec8 	bl	8000548 <__aeabi_dmul>
 80037b8:	a33d      	add	r3, pc, #244	; (adr r3, 80038b0 <__kernel_cos+0x148>)
 80037ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037be:	f7fc fd0d 	bl	80001dc <__adddf3>
 80037c2:	4622      	mov	r2, r4
 80037c4:	462b      	mov	r3, r5
 80037c6:	f7fc febf 	bl	8000548 <__aeabi_dmul>
 80037ca:	a33b      	add	r3, pc, #236	; (adr r3, 80038b8 <__kernel_cos+0x150>)
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f7fc fd02 	bl	80001d8 <__aeabi_dsub>
 80037d4:	4622      	mov	r2, r4
 80037d6:	462b      	mov	r3, r5
 80037d8:	f7fc feb6 	bl	8000548 <__aeabi_dmul>
 80037dc:	a338      	add	r3, pc, #224	; (adr r3, 80038c0 <__kernel_cos+0x158>)
 80037de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e2:	f7fc fcfb 	bl	80001dc <__adddf3>
 80037e6:	4622      	mov	r2, r4
 80037e8:	462b      	mov	r3, r5
 80037ea:	f7fc fead 	bl	8000548 <__aeabi_dmul>
 80037ee:	a336      	add	r3, pc, #216	; (adr r3, 80038c8 <__kernel_cos+0x160>)
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f7fc fcf0 	bl	80001d8 <__aeabi_dsub>
 80037f8:	4622      	mov	r2, r4
 80037fa:	462b      	mov	r3, r5
 80037fc:	f7fc fea4 	bl	8000548 <__aeabi_dmul>
 8003800:	a333      	add	r3, pc, #204	; (adr r3, 80038d0 <__kernel_cos+0x168>)
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	f7fc fce9 	bl	80001dc <__adddf3>
 800380a:	4622      	mov	r2, r4
 800380c:	462b      	mov	r3, r5
 800380e:	f7fc fe9b 	bl	8000548 <__aeabi_dmul>
 8003812:	4622      	mov	r2, r4
 8003814:	462b      	mov	r3, r5
 8003816:	f7fc fe97 	bl	8000548 <__aeabi_dmul>
 800381a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800381e:	4604      	mov	r4, r0
 8003820:	460d      	mov	r5, r1
 8003822:	4630      	mov	r0, r6
 8003824:	4639      	mov	r1, r7
 8003826:	f7fc fe8f 	bl	8000548 <__aeabi_dmul>
 800382a:	460b      	mov	r3, r1
 800382c:	4602      	mov	r2, r0
 800382e:	4629      	mov	r1, r5
 8003830:	4620      	mov	r0, r4
 8003832:	f7fc fcd1 	bl	80001d8 <__aeabi_dsub>
 8003836:	4b2b      	ldr	r3, [pc, #172]	; (80038e4 <__kernel_cos+0x17c>)
 8003838:	4598      	cmp	r8, r3
 800383a:	4606      	mov	r6, r0
 800383c:	460f      	mov	r7, r1
 800383e:	dc10      	bgt.n	8003862 <__kernel_cos+0xfa>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4650      	mov	r0, sl
 8003846:	4659      	mov	r1, fp
 8003848:	f7fc fcc6 	bl	80001d8 <__aeabi_dsub>
 800384c:	460b      	mov	r3, r1
 800384e:	4926      	ldr	r1, [pc, #152]	; (80038e8 <__kernel_cos+0x180>)
 8003850:	4602      	mov	r2, r0
 8003852:	2000      	movs	r0, #0
 8003854:	f7fc fcc0 	bl	80001d8 <__aeabi_dsub>
 8003858:	ec41 0b10 	vmov	d0, r0, r1
 800385c:	b003      	add	sp, #12
 800385e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003862:	4b22      	ldr	r3, [pc, #136]	; (80038ec <__kernel_cos+0x184>)
 8003864:	4920      	ldr	r1, [pc, #128]	; (80038e8 <__kernel_cos+0x180>)
 8003866:	4598      	cmp	r8, r3
 8003868:	bfcc      	ite	gt
 800386a:	4d21      	ldrgt	r5, [pc, #132]	; (80038f0 <__kernel_cos+0x188>)
 800386c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8003870:	2400      	movs	r4, #0
 8003872:	4622      	mov	r2, r4
 8003874:	462b      	mov	r3, r5
 8003876:	2000      	movs	r0, #0
 8003878:	f7fc fcae 	bl	80001d8 <__aeabi_dsub>
 800387c:	4622      	mov	r2, r4
 800387e:	4680      	mov	r8, r0
 8003880:	4689      	mov	r9, r1
 8003882:	462b      	mov	r3, r5
 8003884:	4650      	mov	r0, sl
 8003886:	4659      	mov	r1, fp
 8003888:	f7fc fca6 	bl	80001d8 <__aeabi_dsub>
 800388c:	4632      	mov	r2, r6
 800388e:	463b      	mov	r3, r7
 8003890:	f7fc fca2 	bl	80001d8 <__aeabi_dsub>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4640      	mov	r0, r8
 800389a:	4649      	mov	r1, r9
 800389c:	e7da      	b.n	8003854 <__kernel_cos+0xec>
 800389e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80038d8 <__kernel_cos+0x170>
 80038a2:	e7db      	b.n	800385c <__kernel_cos+0xf4>
 80038a4:	f3af 8000 	nop.w
 80038a8:	be8838d4 	.word	0xbe8838d4
 80038ac:	bda8fae9 	.word	0xbda8fae9
 80038b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80038b4:	3e21ee9e 	.word	0x3e21ee9e
 80038b8:	809c52ad 	.word	0x809c52ad
 80038bc:	3e927e4f 	.word	0x3e927e4f
 80038c0:	19cb1590 	.word	0x19cb1590
 80038c4:	3efa01a0 	.word	0x3efa01a0
 80038c8:	16c15177 	.word	0x16c15177
 80038cc:	3f56c16c 	.word	0x3f56c16c
 80038d0:	5555554c 	.word	0x5555554c
 80038d4:	3fa55555 	.word	0x3fa55555
 80038d8:	00000000 	.word	0x00000000
 80038dc:	3ff00000 	.word	0x3ff00000
 80038e0:	3fe00000 	.word	0x3fe00000
 80038e4:	3fd33332 	.word	0x3fd33332
 80038e8:	3ff00000 	.word	0x3ff00000
 80038ec:	3fe90000 	.word	0x3fe90000
 80038f0:	3fd20000 	.word	0x3fd20000
 80038f4:	00000000 	.word	0x00000000

080038f8 <__kernel_rem_pio2>:
 80038f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038fc:	ed2d 8b02 	vpush	{d8}
 8003900:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8003904:	f112 0f14 	cmn.w	r2, #20
 8003908:	9308      	str	r3, [sp, #32]
 800390a:	9101      	str	r1, [sp, #4]
 800390c:	4bc4      	ldr	r3, [pc, #784]	; (8003c20 <__kernel_rem_pio2+0x328>)
 800390e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8003910:	900b      	str	r0, [sp, #44]	; 0x2c
 8003912:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003916:	9302      	str	r3, [sp, #8]
 8003918:	9b08      	ldr	r3, [sp, #32]
 800391a:	f103 33ff 	add.w	r3, r3, #4294967295
 800391e:	bfa8      	it	ge
 8003920:	1ed4      	subge	r4, r2, #3
 8003922:	9306      	str	r3, [sp, #24]
 8003924:	bfb2      	itee	lt
 8003926:	2400      	movlt	r4, #0
 8003928:	2318      	movge	r3, #24
 800392a:	fb94 f4f3 	sdivge	r4, r4, r3
 800392e:	f06f 0317 	mvn.w	r3, #23
 8003932:	fb04 3303 	mla	r3, r4, r3, r3
 8003936:	eb03 0a02 	add.w	sl, r3, r2
 800393a:	9b02      	ldr	r3, [sp, #8]
 800393c:	9a06      	ldr	r2, [sp, #24]
 800393e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8003c10 <__kernel_rem_pio2+0x318>
 8003942:	eb03 0802 	add.w	r8, r3, r2
 8003946:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003948:	1aa7      	subs	r7, r4, r2
 800394a:	ae22      	add	r6, sp, #136	; 0x88
 800394c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003950:	2500      	movs	r5, #0
 8003952:	4545      	cmp	r5, r8
 8003954:	dd13      	ble.n	800397e <__kernel_rem_pio2+0x86>
 8003956:	9b08      	ldr	r3, [sp, #32]
 8003958:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8003c10 <__kernel_rem_pio2+0x318>
 800395c:	aa22      	add	r2, sp, #136	; 0x88
 800395e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003962:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8003966:	f04f 0800 	mov.w	r8, #0
 800396a:	9b02      	ldr	r3, [sp, #8]
 800396c:	4598      	cmp	r8, r3
 800396e:	dc2f      	bgt.n	80039d0 <__kernel_rem_pio2+0xd8>
 8003970:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003974:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8003978:	462f      	mov	r7, r5
 800397a:	2600      	movs	r6, #0
 800397c:	e01b      	b.n	80039b6 <__kernel_rem_pio2+0xbe>
 800397e:	42ef      	cmn	r7, r5
 8003980:	d407      	bmi.n	8003992 <__kernel_rem_pio2+0x9a>
 8003982:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003986:	f7fc fd75 	bl	8000474 <__aeabi_i2d>
 800398a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800398e:	3501      	adds	r5, #1
 8003990:	e7df      	b.n	8003952 <__kernel_rem_pio2+0x5a>
 8003992:	ec51 0b18 	vmov	r0, r1, d8
 8003996:	e7f8      	b.n	800398a <__kernel_rem_pio2+0x92>
 8003998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800399c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80039a0:	f7fc fdd2 	bl	8000548 <__aeabi_dmul>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80039ac:	f7fc fc16 	bl	80001dc <__adddf3>
 80039b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80039b4:	3601      	adds	r6, #1
 80039b6:	9b06      	ldr	r3, [sp, #24]
 80039b8:	429e      	cmp	r6, r3
 80039ba:	f1a7 0708 	sub.w	r7, r7, #8
 80039be:	ddeb      	ble.n	8003998 <__kernel_rem_pio2+0xa0>
 80039c0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80039c4:	f108 0801 	add.w	r8, r8, #1
 80039c8:	ecab 7b02 	vstmia	fp!, {d7}
 80039cc:	3508      	adds	r5, #8
 80039ce:	e7cc      	b.n	800396a <__kernel_rem_pio2+0x72>
 80039d0:	9b02      	ldr	r3, [sp, #8]
 80039d2:	aa0e      	add	r2, sp, #56	; 0x38
 80039d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80039d8:	930d      	str	r3, [sp, #52]	; 0x34
 80039da:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80039dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80039e0:	9c02      	ldr	r4, [sp, #8]
 80039e2:	930c      	str	r3, [sp, #48]	; 0x30
 80039e4:	00e3      	lsls	r3, r4, #3
 80039e6:	930a      	str	r3, [sp, #40]	; 0x28
 80039e8:	ab9a      	add	r3, sp, #616	; 0x268
 80039ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80039ee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80039f2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80039f6:	ab72      	add	r3, sp, #456	; 0x1c8
 80039f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80039fc:	46c3      	mov	fp, r8
 80039fe:	46a1      	mov	r9, r4
 8003a00:	f1b9 0f00 	cmp.w	r9, #0
 8003a04:	f1a5 0508 	sub.w	r5, r5, #8
 8003a08:	dc77      	bgt.n	8003afa <__kernel_rem_pio2+0x202>
 8003a0a:	ec47 6b10 	vmov	d0, r6, r7
 8003a0e:	4650      	mov	r0, sl
 8003a10:	f000 fc0a 	bl	8004228 <scalbn>
 8003a14:	ec57 6b10 	vmov	r6, r7, d0
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003a1e:	ee10 0a10 	vmov	r0, s0
 8003a22:	4639      	mov	r1, r7
 8003a24:	f7fc fd90 	bl	8000548 <__aeabi_dmul>
 8003a28:	ec41 0b10 	vmov	d0, r0, r1
 8003a2c:	f000 fb7c 	bl	8004128 <floor>
 8003a30:	4b7c      	ldr	r3, [pc, #496]	; (8003c24 <__kernel_rem_pio2+0x32c>)
 8003a32:	ec51 0b10 	vmov	r0, r1, d0
 8003a36:	2200      	movs	r2, #0
 8003a38:	f7fc fd86 	bl	8000548 <__aeabi_dmul>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4630      	mov	r0, r6
 8003a42:	4639      	mov	r1, r7
 8003a44:	f7fc fbc8 	bl	80001d8 <__aeabi_dsub>
 8003a48:	460f      	mov	r7, r1
 8003a4a:	4606      	mov	r6, r0
 8003a4c:	f7fd f816 	bl	8000a7c <__aeabi_d2iz>
 8003a50:	9004      	str	r0, [sp, #16]
 8003a52:	f7fc fd0f 	bl	8000474 <__aeabi_i2d>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	4639      	mov	r1, r7
 8003a5e:	f7fc fbbb 	bl	80001d8 <__aeabi_dsub>
 8003a62:	f1ba 0f00 	cmp.w	sl, #0
 8003a66:	4606      	mov	r6, r0
 8003a68:	460f      	mov	r7, r1
 8003a6a:	dd6d      	ble.n	8003b48 <__kernel_rem_pio2+0x250>
 8003a6c:	1e62      	subs	r2, r4, #1
 8003a6e:	ab0e      	add	r3, sp, #56	; 0x38
 8003a70:	9d04      	ldr	r5, [sp, #16]
 8003a72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003a76:	f1ca 0118 	rsb	r1, sl, #24
 8003a7a:	fa40 f301 	asr.w	r3, r0, r1
 8003a7e:	441d      	add	r5, r3
 8003a80:	408b      	lsls	r3, r1
 8003a82:	1ac0      	subs	r0, r0, r3
 8003a84:	ab0e      	add	r3, sp, #56	; 0x38
 8003a86:	9504      	str	r5, [sp, #16]
 8003a88:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003a8c:	f1ca 0317 	rsb	r3, sl, #23
 8003a90:	fa40 fb03 	asr.w	fp, r0, r3
 8003a94:	f1bb 0f00 	cmp.w	fp, #0
 8003a98:	dd65      	ble.n	8003b66 <__kernel_rem_pio2+0x26e>
 8003a9a:	9b04      	ldr	r3, [sp, #16]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	9304      	str	r3, [sp, #16]
 8003aa2:	4615      	mov	r5, r2
 8003aa4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003aa8:	4294      	cmp	r4, r2
 8003aaa:	f300 809c 	bgt.w	8003be6 <__kernel_rem_pio2+0x2ee>
 8003aae:	f1ba 0f00 	cmp.w	sl, #0
 8003ab2:	dd07      	ble.n	8003ac4 <__kernel_rem_pio2+0x1cc>
 8003ab4:	f1ba 0f01 	cmp.w	sl, #1
 8003ab8:	f000 80c0 	beq.w	8003c3c <__kernel_rem_pio2+0x344>
 8003abc:	f1ba 0f02 	cmp.w	sl, #2
 8003ac0:	f000 80c6 	beq.w	8003c50 <__kernel_rem_pio2+0x358>
 8003ac4:	f1bb 0f02 	cmp.w	fp, #2
 8003ac8:	d14d      	bne.n	8003b66 <__kernel_rem_pio2+0x26e>
 8003aca:	4632      	mov	r2, r6
 8003acc:	463b      	mov	r3, r7
 8003ace:	4956      	ldr	r1, [pc, #344]	; (8003c28 <__kernel_rem_pio2+0x330>)
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	f7fc fb81 	bl	80001d8 <__aeabi_dsub>
 8003ad6:	4606      	mov	r6, r0
 8003ad8:	460f      	mov	r7, r1
 8003ada:	2d00      	cmp	r5, #0
 8003adc:	d043      	beq.n	8003b66 <__kernel_rem_pio2+0x26e>
 8003ade:	4650      	mov	r0, sl
 8003ae0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8003c18 <__kernel_rem_pio2+0x320>
 8003ae4:	f000 fba0 	bl	8004228 <scalbn>
 8003ae8:	4630      	mov	r0, r6
 8003aea:	4639      	mov	r1, r7
 8003aec:	ec53 2b10 	vmov	r2, r3, d0
 8003af0:	f7fc fb72 	bl	80001d8 <__aeabi_dsub>
 8003af4:	4606      	mov	r6, r0
 8003af6:	460f      	mov	r7, r1
 8003af8:	e035      	b.n	8003b66 <__kernel_rem_pio2+0x26e>
 8003afa:	4b4c      	ldr	r3, [pc, #304]	; (8003c2c <__kernel_rem_pio2+0x334>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	4630      	mov	r0, r6
 8003b00:	4639      	mov	r1, r7
 8003b02:	f7fc fd21 	bl	8000548 <__aeabi_dmul>
 8003b06:	f7fc ffb9 	bl	8000a7c <__aeabi_d2iz>
 8003b0a:	f7fc fcb3 	bl	8000474 <__aeabi_i2d>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	ec43 2b18 	vmov	d8, r2, r3
 8003b16:	4b46      	ldr	r3, [pc, #280]	; (8003c30 <__kernel_rem_pio2+0x338>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f7fc fd15 	bl	8000548 <__aeabi_dmul>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4630      	mov	r0, r6
 8003b24:	4639      	mov	r1, r7
 8003b26:	f7fc fb57 	bl	80001d8 <__aeabi_dsub>
 8003b2a:	f7fc ffa7 	bl	8000a7c <__aeabi_d2iz>
 8003b2e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003b32:	f84b 0b04 	str.w	r0, [fp], #4
 8003b36:	ec51 0b18 	vmov	r0, r1, d8
 8003b3a:	f7fc fb4f 	bl	80001dc <__adddf3>
 8003b3e:	f109 39ff 	add.w	r9, r9, #4294967295
 8003b42:	4606      	mov	r6, r0
 8003b44:	460f      	mov	r7, r1
 8003b46:	e75b      	b.n	8003a00 <__kernel_rem_pio2+0x108>
 8003b48:	d106      	bne.n	8003b58 <__kernel_rem_pio2+0x260>
 8003b4a:	1e63      	subs	r3, r4, #1
 8003b4c:	aa0e      	add	r2, sp, #56	; 0x38
 8003b4e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b52:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8003b56:	e79d      	b.n	8003a94 <__kernel_rem_pio2+0x19c>
 8003b58:	4b36      	ldr	r3, [pc, #216]	; (8003c34 <__kernel_rem_pio2+0x33c>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f7fc ff7a 	bl	8000a54 <__aeabi_dcmpge>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d13d      	bne.n	8003be0 <__kernel_rem_pio2+0x2e8>
 8003b64:	4683      	mov	fp, r0
 8003b66:	2200      	movs	r2, #0
 8003b68:	2300      	movs	r3, #0
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	4639      	mov	r1, r7
 8003b6e:	f7fc ff53 	bl	8000a18 <__aeabi_dcmpeq>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	f000 80c0 	beq.w	8003cf8 <__kernel_rem_pio2+0x400>
 8003b78:	1e65      	subs	r5, r4, #1
 8003b7a:	462b      	mov	r3, r5
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	9902      	ldr	r1, [sp, #8]
 8003b80:	428b      	cmp	r3, r1
 8003b82:	da6c      	bge.n	8003c5e <__kernel_rem_pio2+0x366>
 8003b84:	2a00      	cmp	r2, #0
 8003b86:	f000 8089 	beq.w	8003c9c <__kernel_rem_pio2+0x3a4>
 8003b8a:	ab0e      	add	r3, sp, #56	; 0x38
 8003b8c:	f1aa 0a18 	sub.w	sl, sl, #24
 8003b90:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80ad 	beq.w	8003cf4 <__kernel_rem_pio2+0x3fc>
 8003b9a:	4650      	mov	r0, sl
 8003b9c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8003c18 <__kernel_rem_pio2+0x320>
 8003ba0:	f000 fb42 	bl	8004228 <scalbn>
 8003ba4:	ab9a      	add	r3, sp, #616	; 0x268
 8003ba6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003baa:	ec57 6b10 	vmov	r6, r7, d0
 8003bae:	00ec      	lsls	r4, r5, #3
 8003bb0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8003bb4:	46aa      	mov	sl, r5
 8003bb6:	f1ba 0f00 	cmp.w	sl, #0
 8003bba:	f280 80d6 	bge.w	8003d6a <__kernel_rem_pio2+0x472>
 8003bbe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8003c10 <__kernel_rem_pio2+0x318>
 8003bc2:	462e      	mov	r6, r5
 8003bc4:	2e00      	cmp	r6, #0
 8003bc6:	f2c0 8104 	blt.w	8003dd2 <__kernel_rem_pio2+0x4da>
 8003bca:	ab72      	add	r3, sp, #456	; 0x1c8
 8003bcc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003bd0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8003c38 <__kernel_rem_pio2+0x340>
 8003bd4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8003bd8:	f04f 0800 	mov.w	r8, #0
 8003bdc:	1baf      	subs	r7, r5, r6
 8003bde:	e0ea      	b.n	8003db6 <__kernel_rem_pio2+0x4be>
 8003be0:	f04f 0b02 	mov.w	fp, #2
 8003be4:	e759      	b.n	8003a9a <__kernel_rem_pio2+0x1a2>
 8003be6:	f8d8 3000 	ldr.w	r3, [r8]
 8003bea:	b955      	cbnz	r5, 8003c02 <__kernel_rem_pio2+0x30a>
 8003bec:	b123      	cbz	r3, 8003bf8 <__kernel_rem_pio2+0x300>
 8003bee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003bf2:	f8c8 3000 	str.w	r3, [r8]
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	3201      	adds	r2, #1
 8003bfa:	f108 0804 	add.w	r8, r8, #4
 8003bfe:	461d      	mov	r5, r3
 8003c00:	e752      	b.n	8003aa8 <__kernel_rem_pio2+0x1b0>
 8003c02:	1acb      	subs	r3, r1, r3
 8003c04:	f8c8 3000 	str.w	r3, [r8]
 8003c08:	462b      	mov	r3, r5
 8003c0a:	e7f5      	b.n	8003bf8 <__kernel_rem_pio2+0x300>
 8003c0c:	f3af 8000 	nop.w
	...
 8003c1c:	3ff00000 	.word	0x3ff00000
 8003c20:	08004558 	.word	0x08004558
 8003c24:	40200000 	.word	0x40200000
 8003c28:	3ff00000 	.word	0x3ff00000
 8003c2c:	3e700000 	.word	0x3e700000
 8003c30:	41700000 	.word	0x41700000
 8003c34:	3fe00000 	.word	0x3fe00000
 8003c38:	08004518 	.word	0x08004518
 8003c3c:	1e62      	subs	r2, r4, #1
 8003c3e:	ab0e      	add	r3, sp, #56	; 0x38
 8003c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c44:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003c48:	a90e      	add	r1, sp, #56	; 0x38
 8003c4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003c4e:	e739      	b.n	8003ac4 <__kernel_rem_pio2+0x1cc>
 8003c50:	1e62      	subs	r2, r4, #1
 8003c52:	ab0e      	add	r3, sp, #56	; 0x38
 8003c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003c5c:	e7f4      	b.n	8003c48 <__kernel_rem_pio2+0x350>
 8003c5e:	a90e      	add	r1, sp, #56	; 0x38
 8003c60:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	430a      	orrs	r2, r1
 8003c68:	e789      	b.n	8003b7e <__kernel_rem_pio2+0x286>
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003c70:	2900      	cmp	r1, #0
 8003c72:	d0fa      	beq.n	8003c6a <__kernel_rem_pio2+0x372>
 8003c74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c76:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8003c7a:	446a      	add	r2, sp
 8003c7c:	3a98      	subs	r2, #152	; 0x98
 8003c7e:	920a      	str	r2, [sp, #40]	; 0x28
 8003c80:	9a08      	ldr	r2, [sp, #32]
 8003c82:	18e3      	adds	r3, r4, r3
 8003c84:	18a5      	adds	r5, r4, r2
 8003c86:	aa22      	add	r2, sp, #136	; 0x88
 8003c88:	f104 0801 	add.w	r8, r4, #1
 8003c8c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8003c90:	9304      	str	r3, [sp, #16]
 8003c92:	9b04      	ldr	r3, [sp, #16]
 8003c94:	4543      	cmp	r3, r8
 8003c96:	da04      	bge.n	8003ca2 <__kernel_rem_pio2+0x3aa>
 8003c98:	461c      	mov	r4, r3
 8003c9a:	e6a3      	b.n	80039e4 <__kernel_rem_pio2+0xec>
 8003c9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e7e4      	b.n	8003c6c <__kernel_rem_pio2+0x374>
 8003ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ca4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003ca8:	f7fc fbe4 	bl	8000474 <__aeabi_i2d>
 8003cac:	e8e5 0102 	strd	r0, r1, [r5], #8
 8003cb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cb2:	46ab      	mov	fp, r5
 8003cb4:	461c      	mov	r4, r3
 8003cb6:	f04f 0900 	mov.w	r9, #0
 8003cba:	2600      	movs	r6, #0
 8003cbc:	2700      	movs	r7, #0
 8003cbe:	9b06      	ldr	r3, [sp, #24]
 8003cc0:	4599      	cmp	r9, r3
 8003cc2:	dd06      	ble.n	8003cd2 <__kernel_rem_pio2+0x3da>
 8003cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cc6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8003cca:	f108 0801 	add.w	r8, r8, #1
 8003cce:	930a      	str	r3, [sp, #40]	; 0x28
 8003cd0:	e7df      	b.n	8003c92 <__kernel_rem_pio2+0x39a>
 8003cd2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003cd6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003cda:	f7fc fc35 	bl	8000548 <__aeabi_dmul>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	4639      	mov	r1, r7
 8003ce6:	f7fc fa79 	bl	80001dc <__adddf3>
 8003cea:	f109 0901 	add.w	r9, r9, #1
 8003cee:	4606      	mov	r6, r0
 8003cf0:	460f      	mov	r7, r1
 8003cf2:	e7e4      	b.n	8003cbe <__kernel_rem_pio2+0x3c6>
 8003cf4:	3d01      	subs	r5, #1
 8003cf6:	e748      	b.n	8003b8a <__kernel_rem_pio2+0x292>
 8003cf8:	ec47 6b10 	vmov	d0, r6, r7
 8003cfc:	f1ca 0000 	rsb	r0, sl, #0
 8003d00:	f000 fa92 	bl	8004228 <scalbn>
 8003d04:	ec57 6b10 	vmov	r6, r7, d0
 8003d08:	4ba0      	ldr	r3, [pc, #640]	; (8003f8c <__kernel_rem_pio2+0x694>)
 8003d0a:	ee10 0a10 	vmov	r0, s0
 8003d0e:	2200      	movs	r2, #0
 8003d10:	4639      	mov	r1, r7
 8003d12:	f7fc fe9f 	bl	8000a54 <__aeabi_dcmpge>
 8003d16:	b1f8      	cbz	r0, 8003d58 <__kernel_rem_pio2+0x460>
 8003d18:	4b9d      	ldr	r3, [pc, #628]	; (8003f90 <__kernel_rem_pio2+0x698>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	4639      	mov	r1, r7
 8003d20:	f7fc fc12 	bl	8000548 <__aeabi_dmul>
 8003d24:	f7fc feaa 	bl	8000a7c <__aeabi_d2iz>
 8003d28:	4680      	mov	r8, r0
 8003d2a:	f7fc fba3 	bl	8000474 <__aeabi_i2d>
 8003d2e:	4b97      	ldr	r3, [pc, #604]	; (8003f8c <__kernel_rem_pio2+0x694>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	f7fc fc09 	bl	8000548 <__aeabi_dmul>
 8003d36:	460b      	mov	r3, r1
 8003d38:	4602      	mov	r2, r0
 8003d3a:	4639      	mov	r1, r7
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	f7fc fa4b 	bl	80001d8 <__aeabi_dsub>
 8003d42:	f7fc fe9b 	bl	8000a7c <__aeabi_d2iz>
 8003d46:	1c65      	adds	r5, r4, #1
 8003d48:	ab0e      	add	r3, sp, #56	; 0x38
 8003d4a:	f10a 0a18 	add.w	sl, sl, #24
 8003d4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003d52:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8003d56:	e720      	b.n	8003b9a <__kernel_rem_pio2+0x2a2>
 8003d58:	4630      	mov	r0, r6
 8003d5a:	4639      	mov	r1, r7
 8003d5c:	f7fc fe8e 	bl	8000a7c <__aeabi_d2iz>
 8003d60:	ab0e      	add	r3, sp, #56	; 0x38
 8003d62:	4625      	mov	r5, r4
 8003d64:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003d68:	e717      	b.n	8003b9a <__kernel_rem_pio2+0x2a2>
 8003d6a:	ab0e      	add	r3, sp, #56	; 0x38
 8003d6c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8003d70:	f7fc fb80 	bl	8000474 <__aeabi_i2d>
 8003d74:	4632      	mov	r2, r6
 8003d76:	463b      	mov	r3, r7
 8003d78:	f7fc fbe6 	bl	8000548 <__aeabi_dmul>
 8003d7c:	4b84      	ldr	r3, [pc, #528]	; (8003f90 <__kernel_rem_pio2+0x698>)
 8003d7e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8003d82:	2200      	movs	r2, #0
 8003d84:	4630      	mov	r0, r6
 8003d86:	4639      	mov	r1, r7
 8003d88:	f7fc fbde 	bl	8000548 <__aeabi_dmul>
 8003d8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d90:	4606      	mov	r6, r0
 8003d92:	460f      	mov	r7, r1
 8003d94:	e70f      	b.n	8003bb6 <__kernel_rem_pio2+0x2be>
 8003d96:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8003d9a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8003d9e:	f7fc fbd3 	bl	8000548 <__aeabi_dmul>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003daa:	f7fc fa17 	bl	80001dc <__adddf3>
 8003dae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003db2:	f108 0801 	add.w	r8, r8, #1
 8003db6:	9b02      	ldr	r3, [sp, #8]
 8003db8:	4598      	cmp	r8, r3
 8003dba:	dc01      	bgt.n	8003dc0 <__kernel_rem_pio2+0x4c8>
 8003dbc:	45b8      	cmp	r8, r7
 8003dbe:	ddea      	ble.n	8003d96 <__kernel_rem_pio2+0x49e>
 8003dc0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003dc4:	ab4a      	add	r3, sp, #296	; 0x128
 8003dc6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003dca:	ed87 7b00 	vstr	d7, [r7]
 8003dce:	3e01      	subs	r6, #1
 8003dd0:	e6f8      	b.n	8003bc4 <__kernel_rem_pio2+0x2cc>
 8003dd2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	dc0b      	bgt.n	8003df0 <__kernel_rem_pio2+0x4f8>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	dc35      	bgt.n	8003e48 <__kernel_rem_pio2+0x550>
 8003ddc:	d059      	beq.n	8003e92 <__kernel_rem_pio2+0x59a>
 8003dde:	9b04      	ldr	r3, [sp, #16]
 8003de0:	f003 0007 	and.w	r0, r3, #7
 8003de4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8003de8:	ecbd 8b02 	vpop	{d8}
 8003dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003df0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d1f3      	bne.n	8003dde <__kernel_rem_pio2+0x4e6>
 8003df6:	ab4a      	add	r3, sp, #296	; 0x128
 8003df8:	4423      	add	r3, r4
 8003dfa:	9306      	str	r3, [sp, #24]
 8003dfc:	461c      	mov	r4, r3
 8003dfe:	469a      	mov	sl, r3
 8003e00:	9502      	str	r5, [sp, #8]
 8003e02:	9b02      	ldr	r3, [sp, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f1aa 0a08 	sub.w	sl, sl, #8
 8003e0a:	dc6b      	bgt.n	8003ee4 <__kernel_rem_pio2+0x5ec>
 8003e0c:	46aa      	mov	sl, r5
 8003e0e:	f1ba 0f01 	cmp.w	sl, #1
 8003e12:	f1a4 0408 	sub.w	r4, r4, #8
 8003e16:	f300 8085 	bgt.w	8003f24 <__kernel_rem_pio2+0x62c>
 8003e1a:	9c06      	ldr	r4, [sp, #24]
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	3408      	adds	r4, #8
 8003e20:	2100      	movs	r1, #0
 8003e22:	2d01      	cmp	r5, #1
 8003e24:	f300 809d 	bgt.w	8003f62 <__kernel_rem_pio2+0x66a>
 8003e28:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8003e2c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8003e30:	f1bb 0f00 	cmp.w	fp, #0
 8003e34:	f040 809b 	bne.w	8003f6e <__kernel_rem_pio2+0x676>
 8003e38:	9b01      	ldr	r3, [sp, #4]
 8003e3a:	e9c3 5600 	strd	r5, r6, [r3]
 8003e3e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8003e42:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003e46:	e7ca      	b.n	8003dde <__kernel_rem_pio2+0x4e6>
 8003e48:	3408      	adds	r4, #8
 8003e4a:	ab4a      	add	r3, sp, #296	; 0x128
 8003e4c:	441c      	add	r4, r3
 8003e4e:	462e      	mov	r6, r5
 8003e50:	2000      	movs	r0, #0
 8003e52:	2100      	movs	r1, #0
 8003e54:	2e00      	cmp	r6, #0
 8003e56:	da36      	bge.n	8003ec6 <__kernel_rem_pio2+0x5ce>
 8003e58:	f1bb 0f00 	cmp.w	fp, #0
 8003e5c:	d039      	beq.n	8003ed2 <__kernel_rem_pio2+0x5da>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003e64:	9c01      	ldr	r4, [sp, #4]
 8003e66:	e9c4 2300 	strd	r2, r3, [r4]
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8003e72:	f7fc f9b1 	bl	80001d8 <__aeabi_dsub>
 8003e76:	ae4c      	add	r6, sp, #304	; 0x130
 8003e78:	2401      	movs	r4, #1
 8003e7a:	42a5      	cmp	r5, r4
 8003e7c:	da2c      	bge.n	8003ed8 <__kernel_rem_pio2+0x5e0>
 8003e7e:	f1bb 0f00 	cmp.w	fp, #0
 8003e82:	d002      	beq.n	8003e8a <__kernel_rem_pio2+0x592>
 8003e84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003e88:	4619      	mov	r1, r3
 8003e8a:	9b01      	ldr	r3, [sp, #4]
 8003e8c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003e90:	e7a5      	b.n	8003dde <__kernel_rem_pio2+0x4e6>
 8003e92:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8003e96:	eb0d 0403 	add.w	r4, sp, r3
 8003e9a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	2d00      	cmp	r5, #0
 8003ea4:	da09      	bge.n	8003eba <__kernel_rem_pio2+0x5c2>
 8003ea6:	f1bb 0f00 	cmp.w	fp, #0
 8003eaa:	d002      	beq.n	8003eb2 <__kernel_rem_pio2+0x5ba>
 8003eac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	9b01      	ldr	r3, [sp, #4]
 8003eb4:	e9c3 0100 	strd	r0, r1, [r3]
 8003eb8:	e791      	b.n	8003dde <__kernel_rem_pio2+0x4e6>
 8003eba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003ebe:	f7fc f98d 	bl	80001dc <__adddf3>
 8003ec2:	3d01      	subs	r5, #1
 8003ec4:	e7ed      	b.n	8003ea2 <__kernel_rem_pio2+0x5aa>
 8003ec6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003eca:	f7fc f987 	bl	80001dc <__adddf3>
 8003ece:	3e01      	subs	r6, #1
 8003ed0:	e7c0      	b.n	8003e54 <__kernel_rem_pio2+0x55c>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	e7c5      	b.n	8003e64 <__kernel_rem_pio2+0x56c>
 8003ed8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8003edc:	f7fc f97e 	bl	80001dc <__adddf3>
 8003ee0:	3401      	adds	r4, #1
 8003ee2:	e7ca      	b.n	8003e7a <__kernel_rem_pio2+0x582>
 8003ee4:	e9da 8900 	ldrd	r8, r9, [sl]
 8003ee8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8003eec:	9b02      	ldr	r3, [sp, #8]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	9302      	str	r3, [sp, #8]
 8003ef2:	4632      	mov	r2, r6
 8003ef4:	463b      	mov	r3, r7
 8003ef6:	4640      	mov	r0, r8
 8003ef8:	4649      	mov	r1, r9
 8003efa:	f7fc f96f 	bl	80001dc <__adddf3>
 8003efe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4640      	mov	r0, r8
 8003f08:	4649      	mov	r1, r9
 8003f0a:	f7fc f965 	bl	80001d8 <__aeabi_dsub>
 8003f0e:	4632      	mov	r2, r6
 8003f10:	463b      	mov	r3, r7
 8003f12:	f7fc f963 	bl	80001dc <__adddf3>
 8003f16:	ed9d 7b08 	vldr	d7, [sp, #32]
 8003f1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003f1e:	ed8a 7b00 	vstr	d7, [sl]
 8003f22:	e76e      	b.n	8003e02 <__kernel_rem_pio2+0x50a>
 8003f24:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003f28:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8003f2c:	4640      	mov	r0, r8
 8003f2e:	4632      	mov	r2, r6
 8003f30:	463b      	mov	r3, r7
 8003f32:	4649      	mov	r1, r9
 8003f34:	f7fc f952 	bl	80001dc <__adddf3>
 8003f38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4640      	mov	r0, r8
 8003f42:	4649      	mov	r1, r9
 8003f44:	f7fc f948 	bl	80001d8 <__aeabi_dsub>
 8003f48:	4632      	mov	r2, r6
 8003f4a:	463b      	mov	r3, r7
 8003f4c:	f7fc f946 	bl	80001dc <__adddf3>
 8003f50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003f54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003f58:	ed84 7b00 	vstr	d7, [r4]
 8003f5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f60:	e755      	b.n	8003e0e <__kernel_rem_pio2+0x516>
 8003f62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003f66:	f7fc f939 	bl	80001dc <__adddf3>
 8003f6a:	3d01      	subs	r5, #1
 8003f6c:	e759      	b.n	8003e22 <__kernel_rem_pio2+0x52a>
 8003f6e:	9b01      	ldr	r3, [sp, #4]
 8003f70:	9a01      	ldr	r2, [sp, #4]
 8003f72:	601d      	str	r5, [r3, #0]
 8003f74:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8003f78:	605c      	str	r4, [r3, #4]
 8003f7a:	609f      	str	r7, [r3, #8]
 8003f7c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8003f80:	60d3      	str	r3, [r2, #12]
 8003f82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f86:	6110      	str	r0, [r2, #16]
 8003f88:	6153      	str	r3, [r2, #20]
 8003f8a:	e728      	b.n	8003dde <__kernel_rem_pio2+0x4e6>
 8003f8c:	41700000 	.word	0x41700000
 8003f90:	3e700000 	.word	0x3e700000
 8003f94:	00000000 	.word	0x00000000

08003f98 <__kernel_sin>:
 8003f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f9c:	ed2d 8b04 	vpush	{d8-d9}
 8003fa0:	eeb0 8a41 	vmov.f32	s16, s2
 8003fa4:	eef0 8a61 	vmov.f32	s17, s3
 8003fa8:	ec55 4b10 	vmov	r4, r5, d0
 8003fac:	b083      	sub	sp, #12
 8003fae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003fb2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003fb6:	9001      	str	r0, [sp, #4]
 8003fb8:	da06      	bge.n	8003fc8 <__kernel_sin+0x30>
 8003fba:	ee10 0a10 	vmov	r0, s0
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	f7fc fd5c 	bl	8000a7c <__aeabi_d2iz>
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d051      	beq.n	800406c <__kernel_sin+0xd4>
 8003fc8:	4622      	mov	r2, r4
 8003fca:	462b      	mov	r3, r5
 8003fcc:	4620      	mov	r0, r4
 8003fce:	4629      	mov	r1, r5
 8003fd0:	f7fc faba 	bl	8000548 <__aeabi_dmul>
 8003fd4:	4682      	mov	sl, r0
 8003fd6:	468b      	mov	fp, r1
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4620      	mov	r0, r4
 8003fde:	4629      	mov	r1, r5
 8003fe0:	f7fc fab2 	bl	8000548 <__aeabi_dmul>
 8003fe4:	a341      	add	r3, pc, #260	; (adr r3, 80040ec <__kernel_sin+0x154>)
 8003fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fea:	4680      	mov	r8, r0
 8003fec:	4689      	mov	r9, r1
 8003fee:	4650      	mov	r0, sl
 8003ff0:	4659      	mov	r1, fp
 8003ff2:	f7fc faa9 	bl	8000548 <__aeabi_dmul>
 8003ff6:	a33f      	add	r3, pc, #252	; (adr r3, 80040f4 <__kernel_sin+0x15c>)
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	f7fc f8ec 	bl	80001d8 <__aeabi_dsub>
 8004000:	4652      	mov	r2, sl
 8004002:	465b      	mov	r3, fp
 8004004:	f7fc faa0 	bl	8000548 <__aeabi_dmul>
 8004008:	a33c      	add	r3, pc, #240	; (adr r3, 80040fc <__kernel_sin+0x164>)
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	f7fc f8e5 	bl	80001dc <__adddf3>
 8004012:	4652      	mov	r2, sl
 8004014:	465b      	mov	r3, fp
 8004016:	f7fc fa97 	bl	8000548 <__aeabi_dmul>
 800401a:	a33a      	add	r3, pc, #232	; (adr r3, 8004104 <__kernel_sin+0x16c>)
 800401c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004020:	f7fc f8da 	bl	80001d8 <__aeabi_dsub>
 8004024:	4652      	mov	r2, sl
 8004026:	465b      	mov	r3, fp
 8004028:	f7fc fa8e 	bl	8000548 <__aeabi_dmul>
 800402c:	a337      	add	r3, pc, #220	; (adr r3, 800410c <__kernel_sin+0x174>)
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	f7fc f8d3 	bl	80001dc <__adddf3>
 8004036:	9b01      	ldr	r3, [sp, #4]
 8004038:	4606      	mov	r6, r0
 800403a:	460f      	mov	r7, r1
 800403c:	b9eb      	cbnz	r3, 800407a <__kernel_sin+0xe2>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4650      	mov	r0, sl
 8004044:	4659      	mov	r1, fp
 8004046:	f7fc fa7f 	bl	8000548 <__aeabi_dmul>
 800404a:	a325      	add	r3, pc, #148	; (adr r3, 80040e0 <__kernel_sin+0x148>)
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	f7fc f8c2 	bl	80001d8 <__aeabi_dsub>
 8004054:	4642      	mov	r2, r8
 8004056:	464b      	mov	r3, r9
 8004058:	f7fc fa76 	bl	8000548 <__aeabi_dmul>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4620      	mov	r0, r4
 8004062:	4629      	mov	r1, r5
 8004064:	f7fc f8ba 	bl	80001dc <__adddf3>
 8004068:	4604      	mov	r4, r0
 800406a:	460d      	mov	r5, r1
 800406c:	ec45 4b10 	vmov	d0, r4, r5
 8004070:	b003      	add	sp, #12
 8004072:	ecbd 8b04 	vpop	{d8-d9}
 8004076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800407a:	4b1b      	ldr	r3, [pc, #108]	; (80040e8 <__kernel_sin+0x150>)
 800407c:	ec51 0b18 	vmov	r0, r1, d8
 8004080:	2200      	movs	r2, #0
 8004082:	f7fc fa61 	bl	8000548 <__aeabi_dmul>
 8004086:	4632      	mov	r2, r6
 8004088:	ec41 0b19 	vmov	d9, r0, r1
 800408c:	463b      	mov	r3, r7
 800408e:	4640      	mov	r0, r8
 8004090:	4649      	mov	r1, r9
 8004092:	f7fc fa59 	bl	8000548 <__aeabi_dmul>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	ec51 0b19 	vmov	r0, r1, d9
 800409e:	f7fc f89b 	bl	80001d8 <__aeabi_dsub>
 80040a2:	4652      	mov	r2, sl
 80040a4:	465b      	mov	r3, fp
 80040a6:	f7fc fa4f 	bl	8000548 <__aeabi_dmul>
 80040aa:	ec53 2b18 	vmov	r2, r3, d8
 80040ae:	f7fc f893 	bl	80001d8 <__aeabi_dsub>
 80040b2:	a30b      	add	r3, pc, #44	; (adr r3, 80040e0 <__kernel_sin+0x148>)
 80040b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b8:	4606      	mov	r6, r0
 80040ba:	460f      	mov	r7, r1
 80040bc:	4640      	mov	r0, r8
 80040be:	4649      	mov	r1, r9
 80040c0:	f7fc fa42 	bl	8000548 <__aeabi_dmul>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4630      	mov	r0, r6
 80040ca:	4639      	mov	r1, r7
 80040cc:	f7fc f886 	bl	80001dc <__adddf3>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4620      	mov	r0, r4
 80040d6:	4629      	mov	r1, r5
 80040d8:	f7fc f87e 	bl	80001d8 <__aeabi_dsub>
 80040dc:	e7c4      	b.n	8004068 <__kernel_sin+0xd0>
 80040de:	bf00      	nop
 80040e0:	55555549 	.word	0x55555549
 80040e4:	3fc55555 	.word	0x3fc55555
 80040e8:	3fe00000 	.word	0x3fe00000
 80040ec:	5acfd57c 	.word	0x5acfd57c
 80040f0:	3de5d93a 	.word	0x3de5d93a
 80040f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80040f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80040fc:	57b1fe7d 	.word	0x57b1fe7d
 8004100:	3ec71de3 	.word	0x3ec71de3
 8004104:	19c161d5 	.word	0x19c161d5
 8004108:	3f2a01a0 	.word	0x3f2a01a0
 800410c:	1110f8a6 	.word	0x1110f8a6
 8004110:	3f811111 	.word	0x3f811111

08004114 <fabs>:
 8004114:	ec51 0b10 	vmov	r0, r1, d0
 8004118:	ee10 2a10 	vmov	r2, s0
 800411c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004120:	ec43 2b10 	vmov	d0, r2, r3
 8004124:	4770      	bx	lr
	...

08004128 <floor>:
 8004128:	ec51 0b10 	vmov	r0, r1, d0
 800412c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004130:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004134:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004138:	2e13      	cmp	r6, #19
 800413a:	ee10 5a10 	vmov	r5, s0
 800413e:	ee10 8a10 	vmov	r8, s0
 8004142:	460c      	mov	r4, r1
 8004144:	dc32      	bgt.n	80041ac <floor+0x84>
 8004146:	2e00      	cmp	r6, #0
 8004148:	da14      	bge.n	8004174 <floor+0x4c>
 800414a:	a333      	add	r3, pc, #204	; (adr r3, 8004218 <floor+0xf0>)
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f7fc f844 	bl	80001dc <__adddf3>
 8004154:	2200      	movs	r2, #0
 8004156:	2300      	movs	r3, #0
 8004158:	f7fc fc86 	bl	8000a68 <__aeabi_dcmpgt>
 800415c:	b138      	cbz	r0, 800416e <floor+0x46>
 800415e:	2c00      	cmp	r4, #0
 8004160:	da57      	bge.n	8004212 <floor+0xea>
 8004162:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004166:	431d      	orrs	r5, r3
 8004168:	d001      	beq.n	800416e <floor+0x46>
 800416a:	4c2d      	ldr	r4, [pc, #180]	; (8004220 <floor+0xf8>)
 800416c:	2500      	movs	r5, #0
 800416e:	4621      	mov	r1, r4
 8004170:	4628      	mov	r0, r5
 8004172:	e025      	b.n	80041c0 <floor+0x98>
 8004174:	4f2b      	ldr	r7, [pc, #172]	; (8004224 <floor+0xfc>)
 8004176:	4137      	asrs	r7, r6
 8004178:	ea01 0307 	and.w	r3, r1, r7
 800417c:	4303      	orrs	r3, r0
 800417e:	d01f      	beq.n	80041c0 <floor+0x98>
 8004180:	a325      	add	r3, pc, #148	; (adr r3, 8004218 <floor+0xf0>)
 8004182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004186:	f7fc f829 	bl	80001dc <__adddf3>
 800418a:	2200      	movs	r2, #0
 800418c:	2300      	movs	r3, #0
 800418e:	f7fc fc6b 	bl	8000a68 <__aeabi_dcmpgt>
 8004192:	2800      	cmp	r0, #0
 8004194:	d0eb      	beq.n	800416e <floor+0x46>
 8004196:	2c00      	cmp	r4, #0
 8004198:	bfbe      	ittt	lt
 800419a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800419e:	fa43 f606 	asrlt.w	r6, r3, r6
 80041a2:	19a4      	addlt	r4, r4, r6
 80041a4:	ea24 0407 	bic.w	r4, r4, r7
 80041a8:	2500      	movs	r5, #0
 80041aa:	e7e0      	b.n	800416e <floor+0x46>
 80041ac:	2e33      	cmp	r6, #51	; 0x33
 80041ae:	dd0b      	ble.n	80041c8 <floor+0xa0>
 80041b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80041b4:	d104      	bne.n	80041c0 <floor+0x98>
 80041b6:	ee10 2a10 	vmov	r2, s0
 80041ba:	460b      	mov	r3, r1
 80041bc:	f7fc f80e 	bl	80001dc <__adddf3>
 80041c0:	ec41 0b10 	vmov	d0, r0, r1
 80041c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80041cc:	f04f 33ff 	mov.w	r3, #4294967295
 80041d0:	fa23 f707 	lsr.w	r7, r3, r7
 80041d4:	4207      	tst	r7, r0
 80041d6:	d0f3      	beq.n	80041c0 <floor+0x98>
 80041d8:	a30f      	add	r3, pc, #60	; (adr r3, 8004218 <floor+0xf0>)
 80041da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041de:	f7fb fffd 	bl	80001dc <__adddf3>
 80041e2:	2200      	movs	r2, #0
 80041e4:	2300      	movs	r3, #0
 80041e6:	f7fc fc3f 	bl	8000a68 <__aeabi_dcmpgt>
 80041ea:	2800      	cmp	r0, #0
 80041ec:	d0bf      	beq.n	800416e <floor+0x46>
 80041ee:	2c00      	cmp	r4, #0
 80041f0:	da02      	bge.n	80041f8 <floor+0xd0>
 80041f2:	2e14      	cmp	r6, #20
 80041f4:	d103      	bne.n	80041fe <floor+0xd6>
 80041f6:	3401      	adds	r4, #1
 80041f8:	ea25 0507 	bic.w	r5, r5, r7
 80041fc:	e7b7      	b.n	800416e <floor+0x46>
 80041fe:	2301      	movs	r3, #1
 8004200:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004204:	fa03 f606 	lsl.w	r6, r3, r6
 8004208:	4435      	add	r5, r6
 800420a:	4545      	cmp	r5, r8
 800420c:	bf38      	it	cc
 800420e:	18e4      	addcc	r4, r4, r3
 8004210:	e7f2      	b.n	80041f8 <floor+0xd0>
 8004212:	2500      	movs	r5, #0
 8004214:	462c      	mov	r4, r5
 8004216:	e7aa      	b.n	800416e <floor+0x46>
 8004218:	8800759c 	.word	0x8800759c
 800421c:	7e37e43c 	.word	0x7e37e43c
 8004220:	bff00000 	.word	0xbff00000
 8004224:	000fffff 	.word	0x000fffff

08004228 <scalbn>:
 8004228:	b570      	push	{r4, r5, r6, lr}
 800422a:	ec55 4b10 	vmov	r4, r5, d0
 800422e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004232:	4606      	mov	r6, r0
 8004234:	462b      	mov	r3, r5
 8004236:	b99a      	cbnz	r2, 8004260 <scalbn+0x38>
 8004238:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800423c:	4323      	orrs	r3, r4
 800423e:	d036      	beq.n	80042ae <scalbn+0x86>
 8004240:	4b39      	ldr	r3, [pc, #228]	; (8004328 <scalbn+0x100>)
 8004242:	4629      	mov	r1, r5
 8004244:	ee10 0a10 	vmov	r0, s0
 8004248:	2200      	movs	r2, #0
 800424a:	f7fc f97d 	bl	8000548 <__aeabi_dmul>
 800424e:	4b37      	ldr	r3, [pc, #220]	; (800432c <scalbn+0x104>)
 8004250:	429e      	cmp	r6, r3
 8004252:	4604      	mov	r4, r0
 8004254:	460d      	mov	r5, r1
 8004256:	da10      	bge.n	800427a <scalbn+0x52>
 8004258:	a32b      	add	r3, pc, #172	; (adr r3, 8004308 <scalbn+0xe0>)
 800425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425e:	e03a      	b.n	80042d6 <scalbn+0xae>
 8004260:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004264:	428a      	cmp	r2, r1
 8004266:	d10c      	bne.n	8004282 <scalbn+0x5a>
 8004268:	ee10 2a10 	vmov	r2, s0
 800426c:	4620      	mov	r0, r4
 800426e:	4629      	mov	r1, r5
 8004270:	f7fb ffb4 	bl	80001dc <__adddf3>
 8004274:	4604      	mov	r4, r0
 8004276:	460d      	mov	r5, r1
 8004278:	e019      	b.n	80042ae <scalbn+0x86>
 800427a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800427e:	460b      	mov	r3, r1
 8004280:	3a36      	subs	r2, #54	; 0x36
 8004282:	4432      	add	r2, r6
 8004284:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004288:	428a      	cmp	r2, r1
 800428a:	dd08      	ble.n	800429e <scalbn+0x76>
 800428c:	2d00      	cmp	r5, #0
 800428e:	a120      	add	r1, pc, #128	; (adr r1, 8004310 <scalbn+0xe8>)
 8004290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004294:	da1c      	bge.n	80042d0 <scalbn+0xa8>
 8004296:	a120      	add	r1, pc, #128	; (adr r1, 8004318 <scalbn+0xf0>)
 8004298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800429c:	e018      	b.n	80042d0 <scalbn+0xa8>
 800429e:	2a00      	cmp	r2, #0
 80042a0:	dd08      	ble.n	80042b4 <scalbn+0x8c>
 80042a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80042a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80042aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80042ae:	ec45 4b10 	vmov	d0, r4, r5
 80042b2:	bd70      	pop	{r4, r5, r6, pc}
 80042b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80042b8:	da19      	bge.n	80042ee <scalbn+0xc6>
 80042ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80042be:	429e      	cmp	r6, r3
 80042c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80042c4:	dd0a      	ble.n	80042dc <scalbn+0xb4>
 80042c6:	a112      	add	r1, pc, #72	; (adr r1, 8004310 <scalbn+0xe8>)
 80042c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e2      	bne.n	8004296 <scalbn+0x6e>
 80042d0:	a30f      	add	r3, pc, #60	; (adr r3, 8004310 <scalbn+0xe8>)
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f7fc f937 	bl	8000548 <__aeabi_dmul>
 80042da:	e7cb      	b.n	8004274 <scalbn+0x4c>
 80042dc:	a10a      	add	r1, pc, #40	; (adr r1, 8004308 <scalbn+0xe0>)
 80042de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0b8      	beq.n	8004258 <scalbn+0x30>
 80042e6:	a10e      	add	r1, pc, #56	; (adr r1, 8004320 <scalbn+0xf8>)
 80042e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042ec:	e7b4      	b.n	8004258 <scalbn+0x30>
 80042ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80042f2:	3236      	adds	r2, #54	; 0x36
 80042f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80042f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80042fc:	4620      	mov	r0, r4
 80042fe:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <scalbn+0x108>)
 8004300:	2200      	movs	r2, #0
 8004302:	e7e8      	b.n	80042d6 <scalbn+0xae>
 8004304:	f3af 8000 	nop.w
 8004308:	c2f8f359 	.word	0xc2f8f359
 800430c:	01a56e1f 	.word	0x01a56e1f
 8004310:	8800759c 	.word	0x8800759c
 8004314:	7e37e43c 	.word	0x7e37e43c
 8004318:	8800759c 	.word	0x8800759c
 800431c:	fe37e43c 	.word	0xfe37e43c
 8004320:	c2f8f359 	.word	0xc2f8f359
 8004324:	81a56e1f 	.word	0x81a56e1f
 8004328:	43500000 	.word	0x43500000
 800432c:	ffff3cb0 	.word	0xffff3cb0
 8004330:	3c900000 	.word	0x3c900000

08004334 <_init>:
 8004334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004336:	bf00      	nop
 8004338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433a:	bc08      	pop	{r3}
 800433c:	469e      	mov	lr, r3
 800433e:	4770      	bx	lr

08004340 <_fini>:
 8004340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004342:	bf00      	nop
 8004344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004346:	bc08      	pop	{r3}
 8004348:	469e      	mov	lr, r3
 800434a:	4770      	bx	lr
