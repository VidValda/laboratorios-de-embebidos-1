
Labo 4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08003180  08003180  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08003180  08003180  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003180  08003180  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003180  08003180  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  08003194  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003194  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8da  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c82  00000000  00000000  0002d916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  0002f598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  00030158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002113e  00000000  00000000  00030c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eaf2  00000000  00000000  00051d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2c93  00000000  00000000  00060870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133503  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003140  00000000  00000000  00133554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003168 	.word	0x08003168

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003168 	.word	0x08003168

080001cc <main>:
  * @retval int
  */
uint32_t adc_val;
uint32_t buffer;

int main(void){
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	HAL_Init();
 80001d0:	f000 fad3 	bl	800077a <HAL_Init>
	MX_GPIO_Init();
 80001d4:	f000 f8e2 	bl	800039c <MX_GPIO_Init>
	MX_DMA_Init();
 80001d8:	f000 f8c2 	bl	8000360 <MX_DMA_Init>
	MX_ADC1_Init();
 80001dc:	f000 f81c 	bl	8000218 <MX_ADC1_Init>
	MX_I2C1_Init();
 80001e0:	f000 f87e 	bl	80002e0 <MX_I2C1_Init>

while (1){
	HAL_ADC_Start(&hadc1);
 80001e4:	480a      	ldr	r0, [pc, #40]	; (8000210 <main+0x44>)
 80001e6:	f000 fed1 	bl	8000f8c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80001ea:	2164      	movs	r1, #100	; 0x64
 80001ec:	4808      	ldr	r0, [pc, #32]	; (8000210 <main+0x44>)
 80001ee:	f000 ff63 	bl	80010b8 <HAL_ADC_PollForConversion>
 	adc_val = HAL_ADC_GetValue(&hadc1);
 80001f2:	4807      	ldr	r0, [pc, #28]	; (8000210 <main+0x44>)
 80001f4:	f000 ffef 	bl	80011d6 <HAL_ADC_GetValue>
 80001f8:	4603      	mov	r3, r0
 80001fa:	4a06      	ldr	r2, [pc, #24]	; (8000214 <main+0x48>)
 80001fc:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1);
 80001fe:	4804      	ldr	r0, [pc, #16]	; (8000210 <main+0x44>)
 8000200:	f000 ff27 	bl	8001052 <HAL_ADC_Stop>
	HAL_Delay(500);
 8000204:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000208:	f000 fb2c 	bl	8000864 <HAL_Delay>
	HAL_ADC_Start(&hadc1);
 800020c:	e7ea      	b.n	80001e4 <main+0x18>
 800020e:	bf00      	nop
 8000210:	20000028 	.word	0x20000028
 8000214:	20000128 	.word	0x20000128

08000218 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800021e:	463b      	mov	r3, r7
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
 800022c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800022e:	4b29      	ldr	r3, [pc, #164]	; (80002d4 <MX_ADC1_Init+0xbc>)
 8000230:	4a29      	ldr	r2, [pc, #164]	; (80002d8 <MX_ADC1_Init+0xc0>)
 8000232:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000234:	4b27      	ldr	r3, [pc, #156]	; (80002d4 <MX_ADC1_Init+0xbc>)
 8000236:	2200      	movs	r2, #0
 8000238:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800023a:	4b26      	ldr	r3, [pc, #152]	; (80002d4 <MX_ADC1_Init+0xbc>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000240:	4b24      	ldr	r3, [pc, #144]	; (80002d4 <MX_ADC1_Init+0xbc>)
 8000242:	2200      	movs	r2, #0
 8000244:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000246:	4b23      	ldr	r3, [pc, #140]	; (80002d4 <MX_ADC1_Init+0xbc>)
 8000248:	2200      	movs	r2, #0
 800024a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800024c:	4b21      	ldr	r3, [pc, #132]	; (80002d4 <MX_ADC1_Init+0xbc>)
 800024e:	2204      	movs	r2, #4
 8000250:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000252:	4b20      	ldr	r3, [pc, #128]	; (80002d4 <MX_ADC1_Init+0xbc>)
 8000254:	2200      	movs	r2, #0
 8000256:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000258:	4b1e      	ldr	r3, [pc, #120]	; (80002d4 <MX_ADC1_Init+0xbc>)
 800025a:	2201      	movs	r2, #1
 800025c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800025e:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <MX_ADC1_Init+0xbc>)
 8000260:	2201      	movs	r2, #1
 8000262:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000264:	4b1b      	ldr	r3, [pc, #108]	; (80002d4 <MX_ADC1_Init+0xbc>)
 8000266:	2200      	movs	r2, #0
 8000268:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800026c:	4b19      	ldr	r3, [pc, #100]	; (80002d4 <MX_ADC1_Init+0xbc>)
 800026e:	2200      	movs	r2, #0
 8000270:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000272:	4b18      	ldr	r3, [pc, #96]	; (80002d4 <MX_ADC1_Init+0xbc>)
 8000274:	2200      	movs	r2, #0
 8000276:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000278:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <MX_ADC1_Init+0xbc>)
 800027a:	2200      	movs	r2, #0
 800027c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000280:	4b14      	ldr	r3, [pc, #80]	; (80002d4 <MX_ADC1_Init+0xbc>)
 8000282:	2200      	movs	r2, #0
 8000284:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000286:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <MX_ADC1_Init+0xbc>)
 8000288:	2200      	movs	r2, #0
 800028a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800028e:	4811      	ldr	r0, [pc, #68]	; (80002d4 <MX_ADC1_Init+0xbc>)
 8000290:	f000 fd34 	bl	8000cfc <HAL_ADC_Init>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800029a:	f000 f8bd 	bl	8000418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800029e:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <MX_ADC1_Init+0xc4>)
 80002a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002a2:	2306      	movs	r3, #6
 80002a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002aa:	237f      	movs	r3, #127	; 0x7f
 80002ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002ae:	2304      	movs	r3, #4
 80002b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b6:	463b      	mov	r3, r7
 80002b8:	4619      	mov	r1, r3
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <MX_ADC1_Init+0xbc>)
 80002bc:	f001 f96a 	bl	8001594 <HAL_ADC_ConfigChannel>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80002c6:	f000 f8a7 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002ca:	bf00      	nop
 80002cc:	3718      	adds	r7, #24
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000028 	.word	0x20000028
 80002d8:	50040000 	.word	0x50040000
 80002dc:	2a000400 	.word	0x2a000400

080002e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e4:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <MX_I2C1_Init+0x74>)
 80002e6:	4a1c      	ldr	r2, [pc, #112]	; (8000358 <MX_I2C1_Init+0x78>)
 80002e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80002ea:	4b1a      	ldr	r3, [pc, #104]	; (8000354 <MX_I2C1_Init+0x74>)
 80002ec:	4a1b      	ldr	r2, [pc, #108]	; (800035c <MX_I2C1_Init+0x7c>)
 80002ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <MX_I2C1_Init+0x74>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f6:	4b17      	ldr	r3, [pc, #92]	; (8000354 <MX_I2C1_Init+0x74>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002fc:	4b15      	ldr	r3, [pc, #84]	; (8000354 <MX_I2C1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000302:	4b14      	ldr	r3, [pc, #80]	; (8000354 <MX_I2C1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <MX_I2C1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800030e:	4b11      	ldr	r3, [pc, #68]	; (8000354 <MX_I2C1_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <MX_I2C1_Init+0x74>)
 8000316:	2200      	movs	r2, #0
 8000318:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800031a:	480e      	ldr	r0, [pc, #56]	; (8000354 <MX_I2C1_Init+0x74>)
 800031c:	f002 faea 	bl	80028f4 <HAL_I2C_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000326:	f000 f877 	bl	8000418 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800032a:	2100      	movs	r1, #0
 800032c:	4809      	ldr	r0, [pc, #36]	; (8000354 <MX_I2C1_Init+0x74>)
 800032e:	f002 fb70 	bl	8002a12 <HAL_I2CEx_ConfigAnalogFilter>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000338:	f000 f86e 	bl	8000418 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800033c:	2100      	movs	r1, #0
 800033e:	4805      	ldr	r0, [pc, #20]	; (8000354 <MX_I2C1_Init+0x74>)
 8000340:	f002 fbb2 	bl	8002aa8 <HAL_I2CEx_ConfigDigitalFilter>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800034a:	f000 f865 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	200000d4 	.word	0x200000d4
 8000358:	40005400 	.word	0x40005400
 800035c:	00707cbb 	.word	0x00707cbb

08000360 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_DMA_Init+0x38>)
 8000368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800036a:	4a0b      	ldr	r2, [pc, #44]	; (8000398 <MX_DMA_Init+0x38>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6493      	str	r3, [r2, #72]	; 0x48
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_DMA_Init+0x38>)
 8000374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800037e:	2200      	movs	r2, #0
 8000380:	2100      	movs	r1, #0
 8000382:	200b      	movs	r0, #11
 8000384:	f001 ff95 	bl	80022b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000388:	200b      	movs	r0, #11
 800038a:	f001 ffae 	bl	80022ea <HAL_NVIC_EnableIRQ>

}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000

0800039c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b088      	sub	sp, #32
 80003a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a2:	f107 030c 	add.w	r3, r7, #12
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
 80003b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b2:	4b17      	ldr	r3, [pc, #92]	; (8000410 <MX_GPIO_Init+0x74>)
 80003b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b6:	4a16      	ldr	r2, [pc, #88]	; (8000410 <MX_GPIO_Init+0x74>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003be:	4b14      	ldr	r3, [pc, #80]	; (8000410 <MX_GPIO_Init+0x74>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	60bb      	str	r3, [r7, #8]
 80003c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_GPIO_Init+0x74>)
 80003cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ce:	4a10      	ldr	r2, [pc, #64]	; (8000410 <MX_GPIO_Init+0x74>)
 80003d0:	f043 0302 	orr.w	r3, r3, #2
 80003d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_GPIO_Init+0x74>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003da:	f003 0302 	and.w	r3, r3, #2
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	21f0      	movs	r1, #240	; 0xf0
 80003e6:	480b      	ldr	r0, [pc, #44]	; (8000414 <MX_GPIO_Init+0x78>)
 80003e8:	f002 fa6c 	bl	80028c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80003ec:	23f0      	movs	r3, #240	; 0xf0
 80003ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f0:	2301      	movs	r3, #1
 80003f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003fc:	f107 030c 	add.w	r3, r7, #12
 8000400:	4619      	mov	r1, r3
 8000402:	4804      	ldr	r0, [pc, #16]	; (8000414 <MX_GPIO_Init+0x78>)
 8000404:	f002 f8f4 	bl	80025f0 <HAL_GPIO_Init>

}
 8000408:	bf00      	nop
 800040a:	3720      	adds	r7, #32
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40021000 	.word	0x40021000
 8000414:	48000400 	.word	0x48000400

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	e7fe      	b.n	8000420 <Error_Handler+0x8>
	...

08000424 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <HAL_MspInit+0x44>)
 800042c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800042e:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <HAL_MspInit+0x44>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6613      	str	r3, [r2, #96]	; 0x60
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <HAL_MspInit+0x44>)
 8000438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <HAL_MspInit+0x44>)
 8000444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000446:	4a08      	ldr	r2, [pc, #32]	; (8000468 <HAL_MspInit+0x44>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800044c:	6593      	str	r3, [r2, #88]	; 0x58
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <HAL_MspInit+0x44>)
 8000450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000

0800046c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b0a0      	sub	sp, #128	; 0x80
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000484:	f107 0318 	add.w	r3, r7, #24
 8000488:	2254      	movs	r2, #84	; 0x54
 800048a:	2100      	movs	r1, #0
 800048c:	4618      	mov	r0, r3
 800048e:	f002 fe63 	bl	8003158 <memset>
  if(hadc->Instance==ADC1)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a4b      	ldr	r2, [pc, #300]	; (80005c4 <HAL_ADC_MspInit+0x158>)
 8000498:	4293      	cmp	r3, r2
 800049a:	f040 808f 	bne.w	80005bc <HAL_ADC_MspInit+0x150>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800049e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80004a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004a8:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80004aa:	2301      	movs	r3, #1
 80004ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80004ae:	2301      	movs	r3, #1
 80004b0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80004b2:	2310      	movs	r3, #16
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80004b6:	2307      	movs	r3, #7
 80004b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80004ba:	2302      	movs	r3, #2
 80004bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80004be:	2302      	movs	r3, #2
 80004c0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80004c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80004c6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c8:	f107 0318 	add.w	r3, r7, #24
 80004cc:	4618      	mov	r0, r3
 80004ce:	f002 fb37 	bl	8002b40 <HAL_RCCEx_PeriphCLKConfig>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80004d8:	f7ff ff9e 	bl	8000418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004dc:	4b3a      	ldr	r3, [pc, #232]	; (80005c8 <HAL_ADC_MspInit+0x15c>)
 80004de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e0:	4a39      	ldr	r2, [pc, #228]	; (80005c8 <HAL_ADC_MspInit+0x15c>)
 80004e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e8:	4b37      	ldr	r3, [pc, #220]	; (80005c8 <HAL_ADC_MspInit+0x15c>)
 80004ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004f0:	617b      	str	r3, [r7, #20]
 80004f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f4:	4b34      	ldr	r3, [pc, #208]	; (80005c8 <HAL_ADC_MspInit+0x15c>)
 80004f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f8:	4a33      	ldr	r2, [pc, #204]	; (80005c8 <HAL_ADC_MspInit+0x15c>)
 80004fa:	f043 0301 	orr.w	r3, r3, #1
 80004fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000500:	4b31      	ldr	r3, [pc, #196]	; (80005c8 <HAL_ADC_MspInit+0x15c>)
 8000502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	613b      	str	r3, [r7, #16]
 800050a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800050c:	4b2e      	ldr	r3, [pc, #184]	; (80005c8 <HAL_ADC_MspInit+0x15c>)
 800050e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000510:	4a2d      	ldr	r2, [pc, #180]	; (80005c8 <HAL_ADC_MspInit+0x15c>)
 8000512:	f043 0302 	orr.w	r3, r3, #2
 8000516:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000518:	4b2b      	ldr	r3, [pc, #172]	; (80005c8 <HAL_ADC_MspInit+0x15c>)
 800051a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051c:	f003 0302 	and.w	r3, r3, #2
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN10
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000524:	2320      	movs	r3, #32
 8000526:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000528:	230b      	movs	r3, #11
 800052a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000534:	4619      	mov	r1, r3
 8000536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053a:	f002 f859 	bl	80025f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800053e:	2301      	movs	r3, #1
 8000540:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000542:	230b      	movs	r3, #11
 8000544:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800054e:	4619      	mov	r1, r3
 8000550:	481e      	ldr	r0, [pc, #120]	; (80005cc <HAL_ADC_MspInit+0x160>)
 8000552:	f002 f84d 	bl	80025f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000556:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <HAL_ADC_MspInit+0x164>)
 8000558:	4a1e      	ldr	r2, [pc, #120]	; (80005d4 <HAL_ADC_MspInit+0x168>)
 800055a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800055c:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <HAL_ADC_MspInit+0x164>)
 800055e:	2200      	movs	r2, #0
 8000560:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000562:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <HAL_ADC_MspInit+0x164>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <HAL_ADC_MspInit+0x164>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800056e:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <HAL_ADC_MspInit+0x164>)
 8000570:	2280      	movs	r2, #128	; 0x80
 8000572:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000574:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <HAL_ADC_MspInit+0x164>)
 8000576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800057a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <HAL_ADC_MspInit+0x164>)
 800057e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000582:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <HAL_ADC_MspInit+0x164>)
 8000586:	2200      	movs	r2, #0
 8000588:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <HAL_ADC_MspInit+0x164>)
 800058c:	2200      	movs	r2, #0
 800058e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000590:	480f      	ldr	r0, [pc, #60]	; (80005d0 <HAL_ADC_MspInit+0x164>)
 8000592:	f001 fec5 	bl	8002320 <HAL_DMA_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 800059c:	f7ff ff3c 	bl	8000418 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <HAL_ADC_MspInit+0x164>)
 80005a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80005a6:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_ADC_MspInit+0x164>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	2012      	movs	r0, #18
 80005b2:	f001 fe7e 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80005b6:	2012      	movs	r0, #18
 80005b8:	f001 fe97 	bl	80022ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005bc:	bf00      	nop
 80005be:	3780      	adds	r7, #128	; 0x80
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	50040000 	.word	0x50040000
 80005c8:	40021000 	.word	0x40021000
 80005cc:	48000400 	.word	0x48000400
 80005d0:	2000008c 	.word	0x2000008c
 80005d4:	40020008 	.word	0x40020008

080005d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b09e      	sub	sp, #120	; 0x78
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2254      	movs	r2, #84	; 0x54
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 fdad 	bl	8003158 <memset>
  if(hi2c->Instance==I2C1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a1f      	ldr	r2, [pc, #124]	; (8000680 <HAL_I2C_MspInit+0xa8>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d137      	bne.n	8000678 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000608:	2340      	movs	r3, #64	; 0x40
 800060a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800060c:	2300      	movs	r3, #0
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	4618      	mov	r0, r3
 8000616:	f002 fa93 	bl	8002b40 <HAL_RCCEx_PeriphCLKConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000620:	f7ff fefa 	bl	8000418 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <HAL_I2C_MspInit+0xac>)
 8000626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000628:	4a16      	ldr	r2, [pc, #88]	; (8000684 <HAL_I2C_MspInit+0xac>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <HAL_I2C_MspInit+0xac>)
 8000632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800063c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000640:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000642:	2312      	movs	r3, #18
 8000644:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064a:	2303      	movs	r3, #3
 800064c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800064e:	2304      	movs	r3, #4
 8000650:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000656:	4619      	mov	r1, r3
 8000658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065c:	f001 ffc8 	bl	80025f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <HAL_I2C_MspInit+0xac>)
 8000662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <HAL_I2C_MspInit+0xac>)
 8000666:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800066a:	6593      	str	r3, [r2, #88]	; 0x58
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <HAL_I2C_MspInit+0xac>)
 800066e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000678:	bf00      	nop
 800067a:	3778      	adds	r7, #120	; 0x78
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40005400 	.word	0x40005400
 8000684:	40021000 	.word	0x40021000

08000688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800068c:	e7fe      	b.n	800068c <NMI_Handler+0x4>

0800068e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <HardFault_Handler+0x4>

08000694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <MemManage_Handler+0x4>

0800069a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <BusFault_Handler+0x4>

080006a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <UsageFault_Handler+0x4>

080006a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d4:	f000 f8a6 	bl	8000824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006e0:	4802      	ldr	r0, [pc, #8]	; (80006ec <DMA1_Channel1_IRQHandler+0x10>)
 80006e2:	f001 fed5 	bl	8002490 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000008c 	.word	0x2000008c

080006f0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80006f4:	4802      	ldr	r0, [pc, #8]	; (8000700 <ADC1_IRQHandler+0x10>)
 80006f6:	f000 fd7b 	bl	80011f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000028 	.word	0x20000028

08000704 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <SystemInit+0x20>)
 800070a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800070e:	4a05      	ldr	r2, [pc, #20]	; (8000724 <SystemInit+0x20>)
 8000710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000760 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800072c:	f7ff ffea 	bl	8000704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000730:	480c      	ldr	r0, [pc, #48]	; (8000764 <LoopForever+0x6>)
  ldr r1, =_edata
 8000732:	490d      	ldr	r1, [pc, #52]	; (8000768 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000734:	4a0d      	ldr	r2, [pc, #52]	; (800076c <LoopForever+0xe>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000738:	e002      	b.n	8000740 <LoopCopyDataInit>

0800073a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800073c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073e:	3304      	adds	r3, #4

08000740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000744:	d3f9      	bcc.n	800073a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000748:	4c0a      	ldr	r4, [pc, #40]	; (8000774 <LoopForever+0x16>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800074c:	e001      	b.n	8000752 <LoopFillZerobss>

0800074e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000750:	3204      	adds	r2, #4

08000752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000754:	d3fb      	bcc.n	800074e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000756:	f002 fcdb 	bl	8003110 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800075a:	f7ff fd37 	bl	80001cc <main>

0800075e <LoopForever>:

LoopForever:
    b LoopForever
 800075e:	e7fe      	b.n	800075e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000760:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000768:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800076c:	08003188 	.word	0x08003188
  ldr r2, =_sbss
 8000770:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000774:	20000130 	.word	0x20000130

08000778 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000778:	e7fe      	b.n	8000778 <CAN1_RX0_IRQHandler>

0800077a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000780:	2300      	movs	r3, #0
 8000782:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000784:	2003      	movs	r0, #3
 8000786:	f001 fd89 	bl	800229c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800078a:	200f      	movs	r0, #15
 800078c:	f000 f80e 	bl	80007ac <HAL_InitTick>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	71fb      	strb	r3, [r7, #7]
 800079a:	e001      	b.n	80007a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800079c:	f7ff fe42 	bl	8000424 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007a0:	79fb      	ldrb	r3, [r7, #7]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007b4:	2300      	movs	r3, #0
 80007b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <HAL_InitTick+0x6c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d023      	beq.n	8000808 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <HAL_InitTick+0x70>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <HAL_InitTick+0x6c>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80007d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 fd95 	bl	8002306 <HAL_SYSTICK_Config>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d10f      	bne.n	8000802 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b0f      	cmp	r3, #15
 80007e6:	d809      	bhi.n	80007fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e8:	2200      	movs	r2, #0
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	f001 fd5f 	bl	80022b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007f4:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <HAL_InitTick+0x74>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6013      	str	r3, [r2, #0]
 80007fa:	e007      	b.n	800080c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007fc:	2301      	movs	r3, #1
 80007fe:	73fb      	strb	r3, [r7, #15]
 8000800:	e004      	b.n	800080c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000802:	2301      	movs	r3, #1
 8000804:	73fb      	strb	r3, [r7, #15]
 8000806:	e001      	b.n	800080c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000808:	2301      	movs	r3, #1
 800080a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800080c:	7bfb      	ldrb	r3, [r7, #15]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000008 	.word	0x20000008
 800081c:	20000000 	.word	0x20000000
 8000820:	20000004 	.word	0x20000004

08000824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_IncTick+0x20>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_IncTick+0x24>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4413      	add	r3, r2
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <HAL_IncTick+0x24>)
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	20000008 	.word	0x20000008
 8000848:	2000012c 	.word	0x2000012c

0800084c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return uwTick;
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <HAL_GetTick+0x14>)
 8000852:	681b      	ldr	r3, [r3, #0]
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	2000012c 	.word	0x2000012c

08000864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800086c:	f7ff ffee 	bl	800084c <HAL_GetTick>
 8000870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800087c:	d005      	beq.n	800088a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <HAL_Delay+0x44>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4413      	add	r3, r2
 8000888:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800088a:	bf00      	nop
 800088c:	f7ff ffde 	bl	800084c <HAL_GetTick>
 8000890:	4602      	mov	r2, r0
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	429a      	cmp	r2, r3
 800089a:	d8f7      	bhi.n	800088c <HAL_Delay+0x28>
  {
  }
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000008 	.word	0x20000008

080008ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	431a      	orrs	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	609a      	str	r2, [r3, #8]
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80008d2:	b480      	push	{r7}
 80008d4:	b083      	sub	sp, #12
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
 80008da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	431a      	orrs	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	609a      	str	r2, [r3, #8]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000914:	b480      	push	{r7}
 8000916:	b087      	sub	sp, #28
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
 8000920:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	3360      	adds	r3, #96	; 0x60
 8000926:	461a      	mov	r2, r3
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	4413      	add	r3, r2
 800092e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <LL_ADC_SetOffset+0x44>)
 8000936:	4013      	ands	r3, r2
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	430a      	orrs	r2, r1
 8000942:	4313      	orrs	r3, r2
 8000944:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800094c:	bf00      	nop
 800094e:	371c      	adds	r7, #28
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	03fff000 	.word	0x03fff000

0800095c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	3360      	adds	r3, #96	; 0x60
 800096a:	461a      	mov	r2, r3
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	4413      	add	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800097c:	4618      	mov	r0, r3
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000988:	b480      	push	{r7}
 800098a:	b087      	sub	sp, #28
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	3360      	adds	r3, #96	; 0x60
 8000998:	461a      	mov	r2, r3
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	4413      	add	r3, r2
 80009a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	431a      	orrs	r2, r3
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80009b2:	bf00      	nop
 80009b4:	371c      	adds	r7, #28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d101      	bne.n	80009d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80009d2:	2301      	movs	r3, #1
 80009d4:	e000      	b.n	80009d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b087      	sub	sp, #28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	3330      	adds	r3, #48	; 0x30
 80009f4:	461a      	mov	r2, r3
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	f003 030c 	and.w	r3, r3, #12
 8000a00:	4413      	add	r3, r2
 8000a02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	f003 031f 	and.w	r3, r3, #31
 8000a0e:	211f      	movs	r1, #31
 8000a10:	fa01 f303 	lsl.w	r3, r1, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	401a      	ands	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	0e9b      	lsrs	r3, r3, #26
 8000a1c:	f003 011f 	and.w	r1, r3, #31
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	f003 031f 	and.w	r3, r3, #31
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a30:	bf00      	nop
 8000a32:	371c      	adds	r7, #28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d101      	bne.n	8000a54 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000a50:	2301      	movs	r3, #1
 8000a52:	e000      	b.n	8000a56 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b087      	sub	sp, #28
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	3314      	adds	r3, #20
 8000a72:	461a      	mov	r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	0e5b      	lsrs	r3, r3, #25
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	4413      	add	r3, r2
 8000a80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	0d1b      	lsrs	r3, r3, #20
 8000a8a:	f003 031f 	and.w	r3, r3, #31
 8000a8e:	2107      	movs	r1, #7
 8000a90:	fa01 f303 	lsl.w	r3, r1, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	401a      	ands	r2, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	0d1b      	lsrs	r3, r3, #20
 8000a9c:	f003 031f 	and.w	r3, r3, #31
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000aac:	bf00      	nop
 8000aae:	371c      	adds	r7, #28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f003 0318 	and.w	r3, r3, #24
 8000ada:	4908      	ldr	r1, [pc, #32]	; (8000afc <LL_ADC_SetChannelSingleDiff+0x44>)
 8000adc:	40d9      	lsrs	r1, r3
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	400b      	ands	r3, r1
 8000ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	0007ffff 	.word	0x0007ffff

08000b00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000b10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	6093      	str	r3, [r2, #8]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b38:	d101      	bne.n	8000b3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e000      	b.n	8000b40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000b5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000b88:	d101      	bne.n	8000b8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e000      	b.n	8000b90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000bac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bb0:	f043 0201 	orr.w	r2, r3, #1
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000bd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bd8:	f043 0202 	orr.w	r2, r3, #2
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d101      	bne.n	8000c04 <LL_ADC_IsEnabled+0x18>
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <LL_ADC_IsEnabled+0x1a>
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d101      	bne.n	8000c2a <LL_ADC_IsDisableOngoing+0x18>
 8000c26:	2301      	movs	r3, #1
 8000c28:	e000      	b.n	8000c2c <LL_ADC_IsDisableOngoing+0x1a>
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000c48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c4c:	f043 0204 	orr.w	r2, r3, #4
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000c70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c74:	f043 0210 	orr.w	r2, r3, #16
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	2b04      	cmp	r3, #4
 8000c9a:	d101      	bne.n	8000ca0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e000      	b.n	8000ca2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000cbe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000cc2:	f043 0220 	orr.w	r2, r3, #32
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f003 0308 	and.w	r3, r3, #8
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	d101      	bne.n	8000cee <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e12c      	b.n	8000f70 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d109      	bne.n	8000d38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff fba1 	bl	800046c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fef1 	bl	8000b24 <LL_ADC_IsDeepPowerDownEnabled>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d004      	beq.n	8000d52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fed7 	bl	8000b00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff0c 	bl	8000b74 <LL_ADC_IsInternalRegulatorEnabled>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d115      	bne.n	8000d8e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fef0 	bl	8000b4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000d6c:	4b82      	ldr	r3, [pc, #520]	; (8000f78 <HAL_ADC_Init+0x27c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	099b      	lsrs	r3, r3, #6
 8000d72:	4a82      	ldr	r2, [pc, #520]	; (8000f7c <HAL_ADC_Init+0x280>)
 8000d74:	fba2 2303 	umull	r2, r3, r2, r3
 8000d78:	099b      	lsrs	r3, r3, #6
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000d80:	e002      	b.n	8000d88 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1f9      	bne.n	8000d82 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff feee 	bl	8000b74 <LL_ADC_IsInternalRegulatorEnabled>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10d      	bne.n	8000dba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000da2:	f043 0210 	orr.w	r2, r3, #16
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	f043 0201 	orr.w	r2, r3, #1
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff62 	bl	8000c88 <LL_ADC_REG_IsConversionOngoing>
 8000dc4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dca:	f003 0310 	and.w	r3, r3, #16
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f040 80c5 	bne.w	8000f5e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f040 80c1 	bne.w	8000f5e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000de0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000de4:	f043 0202 	orr.w	r2, r3, #2
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fefb 	bl	8000bec <LL_ADC_IsEnabled>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d10b      	bne.n	8000e14 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000dfc:	4860      	ldr	r0, [pc, #384]	; (8000f80 <HAL_ADC_Init+0x284>)
 8000dfe:	f7ff fef5 	bl	8000bec <LL_ADC_IsEnabled>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d105      	bne.n	8000e14 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	485d      	ldr	r0, [pc, #372]	; (8000f84 <HAL_ADC_Init+0x288>)
 8000e10:	f7ff fd4c 	bl	80008ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7e5b      	ldrb	r3, [r3, #25]
 8000e18:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e1e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000e24:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000e2a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e32:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e34:	4313      	orrs	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d106      	bne.n	8000e50 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e46:	3b01      	subs	r3, #1
 8000e48:	045b      	lsls	r3, r3, #17
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d009      	beq.n	8000e6c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	4b45      	ldr	r3, [pc, #276]	; (8000f88 <HAL_ADC_Init+0x28c>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	6812      	ldr	r2, [r2, #0]
 8000e7a:	69b9      	ldr	r1, [r7, #24]
 8000e7c:	430b      	orrs	r3, r1
 8000e7e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff feff 	bl	8000c88 <LL_ADC_REG_IsConversionOngoing>
 8000e8a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff20 	bl	8000cd6 <LL_ADC_INJ_IsConversionOngoing>
 8000e96:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d13d      	bne.n	8000f1a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d13a      	bne.n	8000f1a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000ea8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000eb0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ec0:	f023 0302 	bic.w	r3, r3, #2
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	6812      	ldr	r2, [r2, #0]
 8000ec8:	69b9      	ldr	r1, [r7, #24]
 8000eca:	430b      	orrs	r3, r1
 8000ecc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d118      	bne.n	8000f0a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000ee2:	f023 0304 	bic.w	r3, r3, #4
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000eee:	4311      	orrs	r1, r2
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000ef4:	4311      	orrs	r1, r2
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000efa:	430a      	orrs	r2, r1
 8000efc:	431a      	orrs	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f042 0201 	orr.w	r2, r2, #1
 8000f06:	611a      	str	r2, [r3, #16]
 8000f08:	e007      	b.n	8000f1a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0201 	bic.w	r2, r2, #1
 8000f18:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d10c      	bne.n	8000f3c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	f023 010f 	bic.w	r1, r3, #15
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	1e5a      	subs	r2, r3, #1
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	631a      	str	r2, [r3, #48]	; 0x30
 8000f3a:	e007      	b.n	8000f4c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 020f 	bic.w	r2, r2, #15
 8000f4a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f50:	f023 0303 	bic.w	r3, r3, #3
 8000f54:	f043 0201 	orr.w	r2, r3, #1
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	655a      	str	r2, [r3, #84]	; 0x54
 8000f5c:	e007      	b.n	8000f6e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f62:	f043 0210 	orr.w	r2, r3, #16
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	053e2d63 	.word	0x053e2d63
 8000f80:	50040000 	.word	0x50040000
 8000f84:	50040300 	.word	0x50040300
 8000f88:	fff0c007 	.word	0xfff0c007

08000f8c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fe75 	bl	8000c88 <LL_ADC_REG_IsConversionOngoing>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d14f      	bne.n	8001044 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d101      	bne.n	8000fb2 <HAL_ADC_Start+0x26>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e04b      	b.n	800104a <HAL_ADC_Start+0xbe>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 ff86 	bl	8001ecc <ADC_Enable>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d137      	bne.n	800103a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fd2:	f023 0301 	bic.w	r3, r3, #1
 8000fd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fea:	d106      	bne.n	8000ffa <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff0:	f023 0206 	bic.w	r2, r3, #6
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	659a      	str	r2, [r3, #88]	; 0x58
 8000ff8:	e002      	b.n	8001000 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	221c      	movs	r2, #28
 8001006:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d007      	beq.n	800102e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001022:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001026:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fe00 	bl	8000c38 <LL_ADC_REG_StartConversion>
 8001038:	e006      	b.n	8001048 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001042:	e001      	b.n	8001048 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001044:	2302      	movs	r3, #2
 8001046:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001060:	2b01      	cmp	r3, #1
 8001062:	d101      	bne.n	8001068 <HAL_ADC_Stop+0x16>
 8001064:	2302      	movs	r3, #2
 8001066:	e023      	b.n	80010b0 <HAL_ADC_Stop+0x5e>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001070:	2103      	movs	r1, #3
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 fe6e 	bl	8001d54 <ADC_ConversionStop>
 8001078:	4603      	mov	r3, r0
 800107a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d111      	bne.n	80010a6 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 ffa8 	bl	8001fd8 <ADC_Disable>
 8001088:	4603      	mov	r3, r0
 800108a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d109      	bne.n	80010a6 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001096:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800109a:	f023 0301 	bic.w	r3, r3, #1
 800109e:	f043 0201 	orr.w	r2, r3, #1
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d102      	bne.n	80010d0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80010ca:	2308      	movs	r3, #8
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	e010      	b.n	80010f2 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d007      	beq.n	80010ee <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e2:	f043 0220 	orr.w	r2, r3, #32
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e06f      	b.n	80011ce <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80010ee:	2304      	movs	r3, #4
 80010f0:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80010f2:	f7ff fbab 	bl	800084c <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80010f8:	e021      	b.n	800113e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001100:	d01d      	beq.n	800113e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001102:	f7ff fba3 	bl	800084c <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d302      	bcc.n	8001118 <HAL_ADC_PollForConversion+0x60>
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d112      	bne.n	800113e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	4013      	ands	r3, r2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10b      	bne.n	800113e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112a:	f043 0204 	orr.w	r2, r3, #4
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e047      	b.n	80011ce <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	4013      	ands	r3, r2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0d6      	beq.n	80010fa <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001150:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fc2e 	bl	80009be <LL_ADC_REG_IsTriggerSourceSWStart>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d01c      	beq.n	80011a2 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7e5b      	ldrb	r3, [r3, #25]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d118      	bne.n	80011a2 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b08      	cmp	r3, #8
 800117c:	d111      	bne.n	80011a2 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800118e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d105      	bne.n	80011a2 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119a:	f043 0201 	orr.w	r2, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d104      	bne.n	80011ba <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2208      	movs	r2, #8
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e008      	b.n	80011cc <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d103      	bne.n	80011cc <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	220c      	movs	r2, #12
 80011ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d017      	beq.n	8001246 <HAL_ADC_IRQHandler+0x56>
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d012      	beq.n	8001246 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	2b00      	cmp	r3, #0
 800122a:	d105      	bne.n	8001238 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001230:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 ff54 	bl	80020e6 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2202      	movs	r2, #2
 8001244:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	d004      	beq.n	800125a <HAL_ADC_IRQHandler+0x6a>
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	2b00      	cmp	r3, #0
 8001258:	d109      	bne.n	800126e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001260:	2b00      	cmp	r3, #0
 8001262:	d05e      	beq.n	8001322 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	d059      	beq.n	8001322 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b00      	cmp	r3, #0
 8001278:	d105      	bne.n	8001286 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800127e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fb97 	bl	80009be <LL_ADC_REG_IsTriggerSourceSWStart>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d03e      	beq.n	8001314 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d135      	bne.n	8001314 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d12e      	bne.n	8001314 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fce4 	bl	8000c88 <LL_ADC_REG_IsConversionOngoing>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d11a      	bne.n	80012fc <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 020c 	bic.w	r2, r2, #12
 80012d4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d112      	bne.n	8001314 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f2:	f043 0201 	orr.w	r2, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	655a      	str	r2, [r3, #84]	; 0x54
 80012fa:	e00b      	b.n	8001314 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001300:	f043 0210 	orr.w	r2, r3, #16
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130c:	f043 0201 	orr.w	r2, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f91f 	bl	8001558 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	220c      	movs	r2, #12
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	f003 0320 	and.w	r3, r3, #32
 8001328:	2b00      	cmp	r3, #0
 800132a:	d004      	beq.n	8001336 <HAL_ADC_IRQHandler+0x146>
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f003 0320 	and.w	r3, r3, #32
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800133c:	2b00      	cmp	r3, #0
 800133e:	d072      	beq.n	8001426 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001346:	2b00      	cmp	r3, #0
 8001348:	d06d      	beq.n	8001426 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	2b00      	cmp	r3, #0
 8001354:	d105      	bne.n	8001362 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fb68 	bl	8000a3c <LL_ADC_INJ_IsTriggerSourceSWStart>
 800136c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fb23 	bl	80009be <LL_ADC_REG_IsTriggerSourceSWStart>
 8001378:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d047      	beq.n	8001418 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d007      	beq.n	80013a2 <HAL_ADC_IRQHandler+0x1b2>
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d03f      	beq.n	8001418 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d13a      	bne.n	8001418 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ac:	2b40      	cmp	r3, #64	; 0x40
 80013ae:	d133      	bne.n	8001418 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d12e      	bne.n	8001418 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fc89 	bl	8000cd6 <LL_ADC_INJ_IsConversionOngoing>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d11a      	bne.n	8001400 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80013d8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d112      	bne.n	8001418 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f6:	f043 0201 	orr.w	r2, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	655a      	str	r2, [r3, #84]	; 0x54
 80013fe:	e00b      	b.n	8001418 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001404:	f043 0210 	orr.w	r2, r3, #16
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001410:	f043 0201 	orr.w	r2, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fe3c 	bl	8002096 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2260      	movs	r2, #96	; 0x60
 8001424:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142c:	2b00      	cmp	r3, #0
 800142e:	d011      	beq.n	8001454 <HAL_ADC_IRQHandler+0x264>
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00c      	beq.n	8001454 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f890 	bl	800156c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2280      	movs	r2, #128	; 0x80
 8001452:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145a:	2b00      	cmp	r3, #0
 800145c:	d012      	beq.n	8001484 <HAL_ADC_IRQHandler+0x294>
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00d      	beq.n	8001484 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 fe22 	bl	80020be <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001482:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800148a:	2b00      	cmp	r3, #0
 800148c:	d012      	beq.n	80014b4 <HAL_ADC_IRQHandler+0x2c4>
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00d      	beq.n	80014b4 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 fe14 	bl	80020d2 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d02a      	beq.n	8001514 <HAL_ADC_IRQHandler+0x324>
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f003 0310 	and.w	r3, r3, #16
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d025      	beq.n	8001514 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
 80014d4:	e008      	b.n	80014e8 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80014e4:	2301      	movs	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d10e      	bne.n	800150c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fe:	f043 0202 	orr.w	r2, r3, #2
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f83a 	bl	8001580 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2210      	movs	r2, #16
 8001512:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151a:	2b00      	cmp	r3, #0
 800151c:	d018      	beq.n	8001550 <HAL_ADC_IRQHandler+0x360>
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001538:	f043 0208 	orr.w	r2, r3, #8
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001548:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 fdad 	bl	80020aa <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001550:	bf00      	nop
 8001552:	3720      	adds	r7, #32
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b0b6      	sub	sp, #216	; 0xd8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x22>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e3b9      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x796>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fb60 	bl	8000c88 <LL_ADC_REG_IsConversionOngoing>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 839e 	bne.w	8001d0c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b05      	cmp	r3, #5
 80015d6:	d824      	bhi.n	8001622 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	3b02      	subs	r3, #2
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d81b      	bhi.n	800161a <HAL_ADC_ConfigChannel+0x86>
 80015e2:	a201      	add	r2, pc, #4	; (adr r2, 80015e8 <HAL_ADC_ConfigChannel+0x54>)
 80015e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e8:	080015f9 	.word	0x080015f9
 80015ec:	08001601 	.word	0x08001601
 80015f0:	08001609 	.word	0x08001609
 80015f4:	08001611 	.word	0x08001611
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	220c      	movs	r2, #12
 80015fc:	605a      	str	r2, [r3, #4]
          break;
 80015fe:	e011      	b.n	8001624 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2212      	movs	r2, #18
 8001604:	605a      	str	r2, [r3, #4]
          break;
 8001606:	e00d      	b.n	8001624 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	2218      	movs	r2, #24
 800160c:	605a      	str	r2, [r3, #4]
          break;
 800160e:	e009      	b.n	8001624 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001616:	605a      	str	r2, [r3, #4]
          break;
 8001618:	e004      	b.n	8001624 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2206      	movs	r2, #6
 800161e:	605a      	str	r2, [r3, #4]
          break;
 8001620:	e000      	b.n	8001624 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001622:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	6859      	ldr	r1, [r3, #4]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	f7ff f9d7 	bl	80009e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fb24 	bl	8000c88 <LL_ADC_REG_IsConversionOngoing>
 8001640:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fb44 	bl	8000cd6 <LL_ADC_INJ_IsConversionOngoing>
 800164e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001652:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001656:	2b00      	cmp	r3, #0
 8001658:	f040 81a6 	bne.w	80019a8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800165c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001660:	2b00      	cmp	r3, #0
 8001662:	f040 81a1 	bne.w	80019a8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6818      	ldr	r0, [r3, #0]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	6819      	ldr	r1, [r3, #0]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	461a      	mov	r2, r3
 8001674:	f7ff f9f5 	bl	8000a62 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	695a      	ldr	r2, [r3, #20]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	08db      	lsrs	r3, r3, #3
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	2b04      	cmp	r3, #4
 8001698:	d00a      	beq.n	80016b0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	6919      	ldr	r1, [r3, #16]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016aa:	f7ff f933 	bl	8000914 <LL_ADC_SetOffset>
 80016ae:	e17b      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff f950 	bl	800095c <LL_ADC_GetOffsetChannel>
 80016bc:	4603      	mov	r3, r0
 80016be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10a      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x148>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff f945 	bl	800095c <LL_ADC_GetOffsetChannel>
 80016d2:	4603      	mov	r3, r0
 80016d4:	0e9b      	lsrs	r3, r3, #26
 80016d6:	f003 021f 	and.w	r2, r3, #31
 80016da:	e01e      	b.n	800171a <HAL_ADC_ConfigChannel+0x186>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff f93a 	bl	800095c <LL_ADC_GetOffsetChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016f2:	fa93 f3a3 	rbit	r3, r3
 80016f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001702:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800170a:	2320      	movs	r3, #32
 800170c:	e004      	b.n	8001718 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800170e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001712:	fab3 f383 	clz	r3, r3
 8001716:	b2db      	uxtb	r3, r3
 8001718:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001722:	2b00      	cmp	r3, #0
 8001724:	d105      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x19e>
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	0e9b      	lsrs	r3, r3, #26
 800172c:	f003 031f 	and.w	r3, r3, #31
 8001730:	e018      	b.n	8001764 <HAL_ADC_ConfigChannel+0x1d0>
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800173e:	fa93 f3a3 	rbit	r3, r3
 8001742:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800174a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800174e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001756:	2320      	movs	r3, #32
 8001758:	e004      	b.n	8001764 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800175a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800175e:	fab3 f383 	clz	r3, r3
 8001762:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001764:	429a      	cmp	r2, r3
 8001766:	d106      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff f909 	bl	8000988 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2101      	movs	r1, #1
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff f8ed 	bl	800095c <LL_ADC_GetOffsetChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10a      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x20e>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2101      	movs	r1, #1
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff f8e2 	bl	800095c <LL_ADC_GetOffsetChannel>
 8001798:	4603      	mov	r3, r0
 800179a:	0e9b      	lsrs	r3, r3, #26
 800179c:	f003 021f 	and.w	r2, r3, #31
 80017a0:	e01e      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x24c>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2101      	movs	r1, #1
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff f8d7 	bl	800095c <LL_ADC_GetOffsetChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017b8:	fa93 f3a3 	rbit	r3, r3
 80017bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80017c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80017c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80017d0:	2320      	movs	r3, #32
 80017d2:	e004      	b.n	80017de <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80017d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017d8:	fab3 f383 	clz	r3, r3
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d105      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x264>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	0e9b      	lsrs	r3, r3, #26
 80017f2:	f003 031f 	and.w	r3, r3, #31
 80017f6:	e018      	b.n	800182a <HAL_ADC_ConfigChannel+0x296>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001804:	fa93 f3a3 	rbit	r3, r3
 8001808:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800180c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001814:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800181c:	2320      	movs	r3, #32
 800181e:	e004      	b.n	800182a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001820:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001824:	fab3 f383 	clz	r3, r3
 8001828:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800182a:	429a      	cmp	r2, r3
 800182c:	d106      	bne.n	800183c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2200      	movs	r2, #0
 8001834:	2101      	movs	r1, #1
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff f8a6 	bl	8000988 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2102      	movs	r1, #2
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f88a 	bl	800095c <LL_ADC_GetOffsetChannel>
 8001848:	4603      	mov	r3, r0
 800184a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10a      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x2d4>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2102      	movs	r1, #2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff f87f 	bl	800095c <LL_ADC_GetOffsetChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	0e9b      	lsrs	r3, r3, #26
 8001862:	f003 021f 	and.w	r2, r3, #31
 8001866:	e01e      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x312>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2102      	movs	r1, #2
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff f874 	bl	800095c <LL_ADC_GetOffsetChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800187e:	fa93 f3a3 	rbit	r3, r3
 8001882:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001886:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800188a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800188e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001896:	2320      	movs	r3, #32
 8001898:	e004      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800189a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d105      	bne.n	80018be <HAL_ADC_ConfigChannel+0x32a>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	0e9b      	lsrs	r3, r3, #26
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	e016      	b.n	80018ec <HAL_ADC_ConfigChannel+0x358>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80018d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80018d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80018de:	2320      	movs	r3, #32
 80018e0:	e004      	b.n	80018ec <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80018e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018e6:	fab3 f383 	clz	r3, r3
 80018ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d106      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2200      	movs	r2, #0
 80018f6:	2102      	movs	r1, #2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff f845 	bl	8000988 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2103      	movs	r1, #3
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff f829 	bl	800095c <LL_ADC_GetOffsetChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10a      	bne.n	800192a <HAL_ADC_ConfigChannel+0x396>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2103      	movs	r1, #3
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f81e 	bl	800095c <LL_ADC_GetOffsetChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	0e9b      	lsrs	r3, r3, #26
 8001924:	f003 021f 	and.w	r2, r3, #31
 8001928:	e017      	b.n	800195a <HAL_ADC_ConfigChannel+0x3c6>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2103      	movs	r1, #3
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff f813 	bl	800095c <LL_ADC_GetOffsetChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001944:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800194c:	2320      	movs	r3, #32
 800194e:	e003      	b.n	8001958 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001962:	2b00      	cmp	r3, #0
 8001964:	d105      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x3de>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	0e9b      	lsrs	r3, r3, #26
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	e011      	b.n	8001996 <HAL_ADC_ConfigChannel+0x402>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001982:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800198a:	2320      	movs	r3, #32
 800198c:	e003      	b.n	8001996 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800198e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001990:	fab3 f383 	clz	r3, r3
 8001994:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001996:	429a      	cmp	r2, r3
 8001998:	d106      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2200      	movs	r2, #0
 80019a0:	2103      	movs	r1, #3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fff0 	bl	8000988 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f91d 	bl	8000bec <LL_ADC_IsEnabled>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 813f 	bne.w	8001c38 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6819      	ldr	r1, [r3, #0]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	461a      	mov	r2, r3
 80019c8:	f7ff f876 	bl	8000ab8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4a8e      	ldr	r2, [pc, #568]	; (8001c0c <HAL_ADC_ConfigChannel+0x678>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	f040 8130 	bne.w	8001c38 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10b      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x46c>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	0e9b      	lsrs	r3, r3, #26
 80019ee:	3301      	adds	r3, #1
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	2b09      	cmp	r3, #9
 80019f6:	bf94      	ite	ls
 80019f8:	2301      	movls	r3, #1
 80019fa:	2300      	movhi	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	e019      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x4a0>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a10:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001a18:	2320      	movs	r3, #32
 8001a1a:	e003      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	2b09      	cmp	r3, #9
 8001a2c:	bf94      	ite	ls
 8001a2e:	2301      	movls	r3, #1
 8001a30:	2300      	movhi	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d079      	beq.n	8001b2c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d107      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x4c0>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	0e9b      	lsrs	r3, r3, #26
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	069b      	lsls	r3, r3, #26
 8001a4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a52:	e015      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x4ec>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a5c:	fa93 f3a3 	rbit	r3, r3
 8001a60:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a64:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	e003      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	3301      	adds	r3, #1
 8001a7a:	069b      	lsls	r3, r3, #26
 8001a7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d109      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x50c>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0e9b      	lsrs	r3, r3, #26
 8001a92:	3301      	adds	r3, #1
 8001a94:	f003 031f 	and.w	r3, r3, #31
 8001a98:	2101      	movs	r1, #1
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	e017      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x53c>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001ab8:	2320      	movs	r3, #32
 8001aba:	e003      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	ea42 0103 	orr.w	r1, r2, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10a      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x562>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0e9b      	lsrs	r3, r3, #26
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f003 021f 	and.w	r2, r3, #31
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	051b      	lsls	r3, r3, #20
 8001af4:	e018      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x594>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001b0e:	2320      	movs	r3, #32
 8001b10:	e003      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b14:	fab3 f383 	clz	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b28:	430b      	orrs	r3, r1
 8001b2a:	e080      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d107      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x5b4>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0e9b      	lsrs	r3, r3, #26
 8001b3e:	3301      	adds	r3, #1
 8001b40:	069b      	lsls	r3, r3, #26
 8001b42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b46:	e015      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x5e0>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001b60:	2320      	movs	r3, #32
 8001b62:	e003      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	069b      	lsls	r3, r3, #26
 8001b70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d109      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x600>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0e9b      	lsrs	r3, r3, #26
 8001b86:	3301      	adds	r3, #1
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	e017      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x630>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	61fb      	str	r3, [r7, #28]
  return result;
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001bac:	2320      	movs	r3, #32
 8001bae:	e003      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	ea42 0103 	orr.w	r1, r2, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10d      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x65c>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0e9b      	lsrs	r3, r3, #26
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f003 021f 	and.w	r2, r3, #31
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	3b1e      	subs	r3, #30
 8001be8:	051b      	lsls	r3, r3, #20
 8001bea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bee:	e01d      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x698>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	613b      	str	r3, [r7, #16]
  return result;
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d103      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001c08:	2320      	movs	r3, #32
 8001c0a:	e005      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x684>
 8001c0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f003 021f 	and.w	r2, r3, #31
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	3b1e      	subs	r3, #30
 8001c26:	051b      	lsls	r3, r3, #20
 8001c28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	6892      	ldr	r2, [r2, #8]
 8001c32:	4619      	mov	r1, r3
 8001c34:	f7fe ff15 	bl	8000a62 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <HAL_ADC_ConfigChannel+0x7a0>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d06c      	beq.n	8001d1e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c44:	483c      	ldr	r0, [pc, #240]	; (8001d38 <HAL_ADC_ConfigChannel+0x7a4>)
 8001c46:	f7fe fe57 	bl	80008f8 <LL_ADC_GetCommonPathInternalCh>
 8001c4a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a3a      	ldr	r2, [pc, #232]	; (8001d3c <HAL_ADC_ConfigChannel+0x7a8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d127      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d121      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a35      	ldr	r2, [pc, #212]	; (8001d40 <HAL_ADC_ConfigChannel+0x7ac>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d157      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c76:	4619      	mov	r1, r3
 8001c78:	482f      	ldr	r0, [pc, #188]	; (8001d38 <HAL_ADC_ConfigChannel+0x7a4>)
 8001c7a:	f7fe fe2a 	bl	80008d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c7e:	4b31      	ldr	r3, [pc, #196]	; (8001d44 <HAL_ADC_ConfigChannel+0x7b0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	099b      	lsrs	r3, r3, #6
 8001c84:	4a30      	ldr	r2, [pc, #192]	; (8001d48 <HAL_ADC_ConfigChannel+0x7b4>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	099b      	lsrs	r3, r3, #6
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c98:	e002      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f9      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ca6:	e03a      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a27      	ldr	r2, [pc, #156]	; (8001d4c <HAL_ADC_ConfigChannel+0x7b8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d113      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x746>
 8001cb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10d      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1f      	ldr	r2, [pc, #124]	; (8001d40 <HAL_ADC_ConfigChannel+0x7ac>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d12a      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ccc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4819      	ldr	r0, [pc, #100]	; (8001d38 <HAL_ADC_ConfigChannel+0x7a4>)
 8001cd4:	f7fe fdfd 	bl	80008d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cd8:	e021      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <HAL_ADC_ConfigChannel+0x7bc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d11c      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d116      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <HAL_ADC_ConfigChannel+0x7ac>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d111      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d02:	4619      	mov	r1, r3
 8001d04:	480c      	ldr	r0, [pc, #48]	; (8001d38 <HAL_ADC_ConfigChannel+0x7a4>)
 8001d06:	f7fe fde4 	bl	80008d2 <LL_ADC_SetCommonPathInternalCh>
 8001d0a:	e008      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d10:	f043 0220 	orr.w	r2, r3, #32
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d26:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	37d8      	adds	r7, #216	; 0xd8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	80080000 	.word	0x80080000
 8001d38:	50040300 	.word	0x50040300
 8001d3c:	c7520000 	.word	0xc7520000
 8001d40:	50040000 	.word	0x50040000
 8001d44:	20000000 	.word	0x20000000
 8001d48:	053e2d63 	.word	0x053e2d63
 8001d4c:	cb840000 	.word	0xcb840000
 8001d50:	80000001 	.word	0x80000001

08001d54 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe ff8c 	bl	8000c88 <LL_ADC_REG_IsConversionOngoing>
 8001d70:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe ffad 	bl	8000cd6 <LL_ADC_INJ_IsConversionOngoing>
 8001d7c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d103      	bne.n	8001d8c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 8098 	beq.w	8001ebc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d02a      	beq.n	8001df0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7e5b      	ldrb	r3, [r3, #25]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d126      	bne.n	8001df0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7e1b      	ldrb	r3, [r3, #24]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d122      	bne.n	8001df0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001dae:	e014      	b.n	8001dda <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	4a45      	ldr	r2, [pc, #276]	; (8001ec8 <ADC_ConversionStop+0x174>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d90d      	bls.n	8001dd4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbc:	f043 0210 	orr.w	r2, r3, #16
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc8:	f043 0201 	orr.w	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e074      	b.n	8001ebe <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de4:	2b40      	cmp	r3, #64	; 0x40
 8001de6:	d1e3      	bne.n	8001db0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2240      	movs	r2, #64	; 0x40
 8001dee:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d014      	beq.n	8001e20 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe ff44 	bl	8000c88 <LL_ADC_REG_IsConversionOngoing>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00c      	beq.n	8001e20 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe ff01 	bl	8000c12 <LL_ADC_IsDisableOngoing>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d104      	bne.n	8001e20 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe ff20 	bl	8000c60 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d014      	beq.n	8001e50 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe ff53 	bl	8000cd6 <LL_ADC_INJ_IsConversionOngoing>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00c      	beq.n	8001e50 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fee9 	bl	8000c12 <LL_ADC_IsDisableOngoing>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d104      	bne.n	8001e50 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe ff2f 	bl	8000cae <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d005      	beq.n	8001e62 <ADC_ConversionStop+0x10e>
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d105      	bne.n	8001e68 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001e5c:	230c      	movs	r3, #12
 8001e5e:	617b      	str	r3, [r7, #20]
        break;
 8001e60:	e005      	b.n	8001e6e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001e62:	2308      	movs	r3, #8
 8001e64:	617b      	str	r3, [r7, #20]
        break;
 8001e66:	e002      	b.n	8001e6e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	617b      	str	r3, [r7, #20]
        break;
 8001e6c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001e6e:	f7fe fced 	bl	800084c <HAL_GetTick>
 8001e72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001e74:	e01b      	b.n	8001eae <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001e76:	f7fe fce9 	bl	800084c <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b05      	cmp	r3, #5
 8001e82:	d914      	bls.n	8001eae <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00d      	beq.n	8001eae <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	f043 0210 	orr.w	r2, r3, #16
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	f043 0201 	orr.w	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e007      	b.n	8001ebe <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1dc      	bne.n	8001e76 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3720      	adds	r7, #32
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	a33fffff 	.word	0xa33fffff

08001ecc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fe85 	bl	8000bec <LL_ADC_IsEnabled>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d169      	bne.n	8001fbc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <ADC_Enable+0xfc>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00d      	beq.n	8001f12 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efa:	f043 0210 	orr.w	r2, r3, #16
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	f043 0201 	orr.w	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e055      	b.n	8001fbe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fe40 	bl	8000b9c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f1c:	482b      	ldr	r0, [pc, #172]	; (8001fcc <ADC_Enable+0x100>)
 8001f1e:	f7fe fceb 	bl	80008f8 <LL_ADC_GetCommonPathInternalCh>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f2c:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <ADC_Enable+0x104>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	099b      	lsrs	r3, r3, #6
 8001f32:	4a28      	ldr	r2, [pc, #160]	; (8001fd4 <ADC_Enable+0x108>)
 8001f34:	fba2 2303 	umull	r2, r3, r2, r3
 8001f38:	099b      	lsrs	r3, r3, #6
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001f46:	e002      	b.n	8001f4e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f9      	bne.n	8001f48 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f54:	f7fe fc7a 	bl	800084c <HAL_GetTick>
 8001f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f5a:	e028      	b.n	8001fae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fe43 	bl	8000bec <LL_ADC_IsEnabled>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d104      	bne.n	8001f76 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fe13 	bl	8000b9c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f76:	f7fe fc69 	bl	800084c <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d914      	bls.n	8001fae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d00d      	beq.n	8001fae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f96:	f043 0210 	orr.w	r2, r3, #16
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa2:	f043 0201 	orr.w	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e007      	b.n	8001fbe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d1cf      	bne.n	8001f5c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	8000003f 	.word	0x8000003f
 8001fcc:	50040300 	.word	0x50040300
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	053e2d63 	.word	0x053e2d63

08001fd8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fe14 	bl	8000c12 <LL_ADC_IsDisableOngoing>
 8001fea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fdfb 	bl	8000bec <LL_ADC_IsEnabled>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d047      	beq.n	800208c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d144      	bne.n	800208c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 030d 	and.w	r3, r3, #13
 800200c:	2b01      	cmp	r3, #1
 800200e:	d10c      	bne.n	800202a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fdd5 	bl	8000bc4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2203      	movs	r2, #3
 8002020:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002022:	f7fe fc13 	bl	800084c <HAL_GetTick>
 8002026:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002028:	e029      	b.n	800207e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202e:	f043 0210 	orr.w	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	f043 0201 	orr.w	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e023      	b.n	800208e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002046:	f7fe fc01 	bl	800084c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d914      	bls.n	800207e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00d      	beq.n	800207e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	f043 0210 	orr.w	r2, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002072:	f043 0201 	orr.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e007      	b.n	800208e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1dc      	bne.n	8002046 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <__NVIC_SetPriorityGrouping+0x44>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002118:	4013      	ands	r3, r2
 800211a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800212c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212e:	4a04      	ldr	r2, [pc, #16]	; (8002140 <__NVIC_SetPriorityGrouping+0x44>)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	60d3      	str	r3, [r2, #12]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <__NVIC_GetPriorityGrouping+0x18>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	0a1b      	lsrs	r3, r3, #8
 800214e:	f003 0307 	and.w	r3, r3, #7
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	2b00      	cmp	r3, #0
 8002170:	db0b      	blt.n	800218a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	f003 021f 	and.w	r2, r3, #31
 8002178:	4907      	ldr	r1, [pc, #28]	; (8002198 <__NVIC_EnableIRQ+0x38>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	2001      	movs	r0, #1
 8002182:	fa00 f202 	lsl.w	r2, r0, r2
 8002186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000e100 	.word	0xe000e100

0800219c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	6039      	str	r1, [r7, #0]
 80021a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	db0a      	blt.n	80021c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	490c      	ldr	r1, [pc, #48]	; (80021e8 <__NVIC_SetPriority+0x4c>)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	0112      	lsls	r2, r2, #4
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	440b      	add	r3, r1
 80021c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c4:	e00a      	b.n	80021dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4908      	ldr	r1, [pc, #32]	; (80021ec <__NVIC_SetPriority+0x50>)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	3b04      	subs	r3, #4
 80021d4:	0112      	lsls	r2, r2, #4
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	440b      	add	r3, r1
 80021da:	761a      	strb	r2, [r3, #24]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000e100 	.word	0xe000e100
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f1c3 0307 	rsb	r3, r3, #7
 800220a:	2b04      	cmp	r3, #4
 800220c:	bf28      	it	cs
 800220e:	2304      	movcs	r3, #4
 8002210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3304      	adds	r3, #4
 8002216:	2b06      	cmp	r3, #6
 8002218:	d902      	bls.n	8002220 <NVIC_EncodePriority+0x30>
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3b03      	subs	r3, #3
 800221e:	e000      	b.n	8002222 <NVIC_EncodePriority+0x32>
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43da      	mvns	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	401a      	ands	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002238:	f04f 31ff 	mov.w	r1, #4294967295
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	43d9      	mvns	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	4313      	orrs	r3, r2
         );
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	; 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002268:	d301      	bcc.n	800226e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800226a:	2301      	movs	r3, #1
 800226c:	e00f      	b.n	800228e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <SysTick_Config+0x40>)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002276:	210f      	movs	r1, #15
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	f7ff ff8e 	bl	800219c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <SysTick_Config+0x40>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002286:	4b04      	ldr	r3, [pc, #16]	; (8002298 <SysTick_Config+0x40>)
 8002288:	2207      	movs	r2, #7
 800228a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	e000e010 	.word	0xe000e010

0800229c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff ff29 	bl	80020fc <__NVIC_SetPriorityGrouping>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022c4:	f7ff ff3e 	bl	8002144 <__NVIC_GetPriorityGrouping>
 80022c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	6978      	ldr	r0, [r7, #20]
 80022d0:	f7ff ff8e 	bl	80021f0 <NVIC_EncodePriority>
 80022d4:	4602      	mov	r2, r0
 80022d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022da:	4611      	mov	r1, r2
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ff5d 	bl	800219c <__NVIC_SetPriority>
}
 80022e2:	bf00      	nop
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff31 	bl	8002160 <__NVIC_EnableIRQ>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ffa2 	bl	8002258 <SysTick_Config>
 8002314:	4603      	mov	r3, r0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e098      	b.n	8002464 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	4b4d      	ldr	r3, [pc, #308]	; (8002470 <HAL_DMA_Init+0x150>)
 800233a:	429a      	cmp	r2, r3
 800233c:	d80f      	bhi.n	800235e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	4b4b      	ldr	r3, [pc, #300]	; (8002474 <HAL_DMA_Init+0x154>)
 8002346:	4413      	add	r3, r2
 8002348:	4a4b      	ldr	r2, [pc, #300]	; (8002478 <HAL_DMA_Init+0x158>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	009a      	lsls	r2, r3, #2
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a48      	ldr	r2, [pc, #288]	; (800247c <HAL_DMA_Init+0x15c>)
 800235a:	641a      	str	r2, [r3, #64]	; 0x40
 800235c:	e00e      	b.n	800237c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	4b46      	ldr	r3, [pc, #280]	; (8002480 <HAL_DMA_Init+0x160>)
 8002366:	4413      	add	r3, r2
 8002368:	4a43      	ldr	r2, [pc, #268]	; (8002478 <HAL_DMA_Init+0x158>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	009a      	lsls	r2, r3, #2
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a42      	ldr	r2, [pc, #264]	; (8002484 <HAL_DMA_Init+0x164>)
 800237a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002396:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80023a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023d6:	d039      	beq.n	800244c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	4a27      	ldr	r2, [pc, #156]	; (800247c <HAL_DMA_Init+0x15c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d11a      	bne.n	8002418 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80023e2:	4b29      	ldr	r3, [pc, #164]	; (8002488 <HAL_DMA_Init+0x168>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	f003 031c 	and.w	r3, r3, #28
 80023ee:	210f      	movs	r1, #15
 80023f0:	fa01 f303 	lsl.w	r3, r1, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	4924      	ldr	r1, [pc, #144]	; (8002488 <HAL_DMA_Init+0x168>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80023fc:	4b22      	ldr	r3, [pc, #136]	; (8002488 <HAL_DMA_Init+0x168>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	f003 031c 	and.w	r3, r3, #28
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	491d      	ldr	r1, [pc, #116]	; (8002488 <HAL_DMA_Init+0x168>)
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
 8002416:	e019      	b.n	800244c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002418:	4b1c      	ldr	r3, [pc, #112]	; (800248c <HAL_DMA_Init+0x16c>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002420:	f003 031c 	and.w	r3, r3, #28
 8002424:	210f      	movs	r1, #15
 8002426:	fa01 f303 	lsl.w	r3, r1, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	4917      	ldr	r1, [pc, #92]	; (800248c <HAL_DMA_Init+0x16c>)
 800242e:	4013      	ands	r3, r2
 8002430:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <HAL_DMA_Init+0x16c>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6859      	ldr	r1, [r3, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	f003 031c 	and.w	r3, r3, #28
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	4911      	ldr	r1, [pc, #68]	; (800248c <HAL_DMA_Init+0x16c>)
 8002448:	4313      	orrs	r3, r2
 800244a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	40020407 	.word	0x40020407
 8002474:	bffdfff8 	.word	0xbffdfff8
 8002478:	cccccccd 	.word	0xcccccccd
 800247c:	40020000 	.word	0x40020000
 8002480:	bffdfbf8 	.word	0xbffdfbf8
 8002484:	40020400 	.word	0x40020400
 8002488:	400200a8 	.word	0x400200a8
 800248c:	400204a8 	.word	0x400204a8

08002490 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ac:	f003 031c 	and.w	r3, r3, #28
 80024b0:	2204      	movs	r2, #4
 80024b2:	409a      	lsls	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d026      	beq.n	800250a <HAL_DMA_IRQHandler+0x7a>
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d021      	beq.n	800250a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d107      	bne.n	80024e4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0204 	bic.w	r2, r2, #4
 80024e2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e8:	f003 021c 	and.w	r2, r3, #28
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	2104      	movs	r1, #4
 80024f2:	fa01 f202 	lsl.w	r2, r1, r2
 80024f6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d071      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002508:	e06c      	b.n	80025e4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f003 031c 	and.w	r3, r3, #28
 8002512:	2202      	movs	r2, #2
 8002514:	409a      	lsls	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4013      	ands	r3, r2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d02e      	beq.n	800257c <HAL_DMA_IRQHandler+0xec>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d029      	beq.n	800257c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10b      	bne.n	800254e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 020a 	bic.w	r2, r2, #10
 8002544:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	f003 021c 	and.w	r2, r3, #28
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2102      	movs	r1, #2
 800255c:	fa01 f202 	lsl.w	r2, r1, r2
 8002560:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	2b00      	cmp	r3, #0
 8002570:	d038      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800257a:	e033      	b.n	80025e4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002580:	f003 031c 	and.w	r3, r3, #28
 8002584:	2208      	movs	r2, #8
 8002586:	409a      	lsls	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d02a      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x156>
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d025      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 020e 	bic.w	r2, r2, #14
 80025a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f003 021c 	and.w	r2, r3, #28
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	2101      	movs	r1, #1
 80025b8:	fa01 f202 	lsl.w	r2, r1, r2
 80025bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d004      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
}
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025fe:	e148      	b.n	8002892 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	2101      	movs	r1, #1
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	4013      	ands	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 813a 	beq.w	800288c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d005      	beq.n	8002630 <HAL_GPIO_Init+0x40>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d130      	bne.n	8002692 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002666:	2201      	movs	r2, #1
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	f003 0201 	and.w	r2, r3, #1
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b03      	cmp	r3, #3
 800269c:	d017      	beq.n	80026ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2203      	movs	r2, #3
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d123      	bne.n	8002722 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	08da      	lsrs	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3208      	adds	r2, #8
 80026e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	08da      	lsrs	r2, r3, #3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3208      	adds	r2, #8
 800271c:	6939      	ldr	r1, [r7, #16]
 800271e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	2203      	movs	r2, #3
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0203 	and.w	r2, r3, #3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 8094 	beq.w	800288c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002764:	4b52      	ldr	r3, [pc, #328]	; (80028b0 <HAL_GPIO_Init+0x2c0>)
 8002766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002768:	4a51      	ldr	r2, [pc, #324]	; (80028b0 <HAL_GPIO_Init+0x2c0>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6613      	str	r3, [r2, #96]	; 0x60
 8002770:	4b4f      	ldr	r3, [pc, #316]	; (80028b0 <HAL_GPIO_Init+0x2c0>)
 8002772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800277c:	4a4d      	ldr	r2, [pc, #308]	; (80028b4 <HAL_GPIO_Init+0x2c4>)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	089b      	lsrs	r3, r3, #2
 8002782:	3302      	adds	r3, #2
 8002784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	220f      	movs	r2, #15
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027a6:	d00d      	beq.n	80027c4 <HAL_GPIO_Init+0x1d4>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a43      	ldr	r2, [pc, #268]	; (80028b8 <HAL_GPIO_Init+0x2c8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d007      	beq.n	80027c0 <HAL_GPIO_Init+0x1d0>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a42      	ldr	r2, [pc, #264]	; (80028bc <HAL_GPIO_Init+0x2cc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d101      	bne.n	80027bc <HAL_GPIO_Init+0x1cc>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e004      	b.n	80027c6 <HAL_GPIO_Init+0x1d6>
 80027bc:	2307      	movs	r3, #7
 80027be:	e002      	b.n	80027c6 <HAL_GPIO_Init+0x1d6>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <HAL_GPIO_Init+0x1d6>
 80027c4:	2300      	movs	r3, #0
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	f002 0203 	and.w	r2, r2, #3
 80027cc:	0092      	lsls	r2, r2, #2
 80027ce:	4093      	lsls	r3, r2
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027d6:	4937      	ldr	r1, [pc, #220]	; (80028b4 <HAL_GPIO_Init+0x2c4>)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	3302      	adds	r3, #2
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027e4:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <HAL_GPIO_Init+0x2d0>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002808:	4a2d      	ldr	r2, [pc, #180]	; (80028c0 <HAL_GPIO_Init+0x2d0>)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800280e:	4b2c      	ldr	r3, [pc, #176]	; (80028c0 <HAL_GPIO_Init+0x2d0>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002832:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <HAL_GPIO_Init+0x2d0>)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002838:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_GPIO_Init+0x2d0>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800285c:	4a18      	ldr	r2, [pc, #96]	; (80028c0 <HAL_GPIO_Init+0x2d0>)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002862:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <HAL_GPIO_Init+0x2d0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002886:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <HAL_GPIO_Init+0x2d0>)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3301      	adds	r3, #1
 8002890:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	f47f aeaf 	bne.w	8002600 <HAL_GPIO_Init+0x10>
  }
}
 80028a2:	bf00      	nop
 80028a4:	bf00      	nop
 80028a6:	371c      	adds	r7, #28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40010000 	.word	0x40010000
 80028b8:	48000400 	.word	0x48000400
 80028bc:	48000800 	.word	0x48000800
 80028c0:	40010400 	.word	0x40010400

080028c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
 80028d0:	4613      	mov	r3, r2
 80028d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d4:	787b      	ldrb	r3, [r7, #1]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028e0:	e002      	b.n	80028e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e081      	b.n	8002a0a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fd fe5c 	bl	80005d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2224      	movs	r2, #36	; 0x24
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002944:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002954:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d107      	bne.n	800296e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	e006      	b.n	800297c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800297a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d104      	bne.n	800298e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800298c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800299c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69d9      	ldr	r1, [r3, #28]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1a      	ldr	r2, [r3, #32]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d138      	bne.n	8002a9a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e032      	b.n	8002a9c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2224      	movs	r2, #36	; 0x24
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a64:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6819      	ldr	r1, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0201 	orr.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e000      	b.n	8002a9c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a9a:	2302      	movs	r3, #2
  }
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	d139      	bne.n	8002b32 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e033      	b.n	8002b34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2224      	movs	r2, #36	; 0x24
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0201 	bic.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002afa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0201 	orr.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
  }
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b48:	2300      	movs	r3, #0
 8002b4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d031      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b64:	d01a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002b66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b6a:	d814      	bhi.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d009      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b74:	d10f      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002b76:	4b5d      	ldr	r3, [pc, #372]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	4a5c      	ldr	r2, [pc, #368]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b80:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b82:	e00c      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3304      	adds	r3, #4
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f9ce 	bl	8002f2c <RCCEx_PLLSAI1_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b94:	e003      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	74fb      	strb	r3, [r7, #19]
      break;
 8002b9a:	e000      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002b9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10b      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ba4:	4b51      	ldr	r3, [pc, #324]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb2:	494e      	ldr	r1, [pc, #312]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bba:	e001      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 809e 	beq.w	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bd2:	4b46      	ldr	r3, [pc, #280]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002be2:	2300      	movs	r3, #0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00d      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be8:	4b40      	ldr	r3, [pc, #256]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	4a3f      	ldr	r2, [pc, #252]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	6593      	str	r3, [r2, #88]	; 0x58
 8002bf4:	4b3d      	ldr	r3, [pc, #244]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c00:	2301      	movs	r3, #1
 8002c02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c04:	4b3a      	ldr	r3, [pc, #232]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a39      	ldr	r2, [pc, #228]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c10:	f7fd fe1c 	bl	800084c <HAL_GetTick>
 8002c14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c16:	e009      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c18:	f7fd fe18 	bl	800084c <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d902      	bls.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	74fb      	strb	r3, [r7, #19]
        break;
 8002c2a:	e005      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c2c:	4b30      	ldr	r3, [pc, #192]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0ef      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002c38:	7cfb      	ldrb	r3, [r7, #19]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d15a      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c3e:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01e      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d019      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c66:	4b21      	ldr	r3, [pc, #132]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6c:	4a1f      	ldr	r2, [pc, #124]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7c:	4a1b      	ldr	r2, [pc, #108]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c86:	4a19      	ldr	r2, [pc, #100]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d016      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fd fdd8 	bl	800084c <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7fd fdd4 	bl	800084c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d902      	bls.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	74fb      	strb	r3, [r7, #19]
            break;
 8002cb6:	e006      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0ec      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002cc6:	7cfb      	ldrb	r3, [r7, #19]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ccc:	4b07      	ldr	r3, [pc, #28]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cda:	4904      	ldr	r1, [pc, #16]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ce2:	e009      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ce4:	7cfb      	ldrb	r3, [r7, #19]
 8002ce6:	74bb      	strb	r3, [r7, #18]
 8002ce8:	e006      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf8:	7c7b      	ldrb	r3, [r7, #17]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d105      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfe:	4b8a      	ldr	r3, [pc, #552]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d02:	4a89      	ldr	r2, [pc, #548]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d16:	4b84      	ldr	r3, [pc, #528]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1c:	f023 0203 	bic.w	r2, r3, #3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	4980      	ldr	r1, [pc, #512]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d38:	4b7b      	ldr	r3, [pc, #492]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3e:	f023 020c 	bic.w	r2, r3, #12
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	4978      	ldr	r1, [pc, #480]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d5a:	4b73      	ldr	r3, [pc, #460]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	496f      	ldr	r1, [pc, #444]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d7c:	4b6a      	ldr	r3, [pc, #424]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8a:	4967      	ldr	r1, [pc, #412]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d9e:	4b62      	ldr	r3, [pc, #392]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dac:	495e      	ldr	r1, [pc, #376]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dc0:	4b59      	ldr	r3, [pc, #356]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	4956      	ldr	r1, [pc, #344]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002de2:	4b51      	ldr	r3, [pc, #324]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	494d      	ldr	r1, [pc, #308]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d028      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e04:	4b48      	ldr	r3, [pc, #288]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4945      	ldr	r1, [pc, #276]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e22:	d106      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e24:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4a3f      	ldr	r2, [pc, #252]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e2e:	60d3      	str	r3, [r2, #12]
 8002e30:	e011      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e3a:	d10c      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	2101      	movs	r1, #1
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f872 	bl	8002f2c <RCCEx_PLLSAI1_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e4c:	7cfb      	ldrb	r3, [r7, #19]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002e52:	7cfb      	ldrb	r3, [r7, #19]
 8002e54:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d028      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e62:	4b31      	ldr	r3, [pc, #196]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e70:	492d      	ldr	r1, [pc, #180]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e80:	d106      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	4a28      	ldr	r2, [pc, #160]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e8c:	60d3      	str	r3, [r2, #12]
 8002e8e:	e011      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f843 	bl	8002f2c <RCCEx_PLLSAI1_Config>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eaa:	7cfb      	ldrb	r3, [r7, #19]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d01c      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ec0:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ece:	4916      	ldr	r1, [pc, #88]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ede:	d10c      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f820 	bl	8002f2c <RCCEx_PLLSAI1_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002ef6:	7cfb      	ldrb	r3, [r7, #19]
 8002ef8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f06:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f14:	4904      	ldr	r1, [pc, #16]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000

08002f2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f3a:	4b74      	ldr	r3, [pc, #464]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d018      	beq.n	8002f78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f46:	4b71      	ldr	r3, [pc, #452]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 0203 	and.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d10d      	bne.n	8002f72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
       ||
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d009      	beq.n	8002f72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f5e:	4b6b      	ldr	r3, [pc, #428]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d047      	beq.n	8003002 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
 8002f76:	e044      	b.n	8003002 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d018      	beq.n	8002fb2 <RCCEx_PLLSAI1_Config+0x86>
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d825      	bhi.n	8002fd0 <RCCEx_PLLSAI1_Config+0xa4>
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d002      	beq.n	8002f8e <RCCEx_PLLSAI1_Config+0x62>
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d009      	beq.n	8002fa0 <RCCEx_PLLSAI1_Config+0x74>
 8002f8c:	e020      	b.n	8002fd0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f8e:	4b5f      	ldr	r3, [pc, #380]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d11d      	bne.n	8002fd6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f9e:	e01a      	b.n	8002fd6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fa0:	4b5a      	ldr	r3, [pc, #360]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d116      	bne.n	8002fda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb0:	e013      	b.n	8002fda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fb2:	4b56      	ldr	r3, [pc, #344]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10f      	bne.n	8002fde <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fbe:	4b53      	ldr	r3, [pc, #332]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fce:	e006      	b.n	8002fde <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd4:	e004      	b.n	8002fe0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e002      	b.n	8002fe0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e000      	b.n	8002fe0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fde:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10d      	bne.n	8003002 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fe6:	4b49      	ldr	r3, [pc, #292]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6819      	ldr	r1, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	4943      	ldr	r1, [pc, #268]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d17c      	bne.n	8003102 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003008:	4b40      	ldr	r3, [pc, #256]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a3f      	ldr	r2, [pc, #252]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 800300e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003014:	f7fd fc1a 	bl	800084c <HAL_GetTick>
 8003018:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800301a:	e009      	b.n	8003030 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800301c:	f7fd fc16 	bl	800084c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d902      	bls.n	8003030 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	73fb      	strb	r3, [r7, #15]
        break;
 800302e:	e005      	b.n	800303c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003030:	4b36      	ldr	r3, [pc, #216]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1ef      	bne.n	800301c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d15f      	bne.n	8003102 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d110      	bne.n	800306a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003048:	4b30      	ldr	r3, [pc, #192]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003050:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6892      	ldr	r2, [r2, #8]
 8003058:	0211      	lsls	r1, r2, #8
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68d2      	ldr	r2, [r2, #12]
 800305e:	06d2      	lsls	r2, r2, #27
 8003060:	430a      	orrs	r2, r1
 8003062:	492a      	ldr	r1, [pc, #168]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003064:	4313      	orrs	r3, r2
 8003066:	610b      	str	r3, [r1, #16]
 8003068:	e027      	b.n	80030ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d112      	bne.n	8003096 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003070:	4b26      	ldr	r3, [pc, #152]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003078:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6892      	ldr	r2, [r2, #8]
 8003080:	0211      	lsls	r1, r2, #8
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6912      	ldr	r2, [r2, #16]
 8003086:	0852      	lsrs	r2, r2, #1
 8003088:	3a01      	subs	r2, #1
 800308a:	0552      	lsls	r2, r2, #21
 800308c:	430a      	orrs	r2, r1
 800308e:	491f      	ldr	r1, [pc, #124]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003090:	4313      	orrs	r3, r2
 8003092:	610b      	str	r3, [r1, #16]
 8003094:	e011      	b.n	80030ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003096:	4b1d      	ldr	r3, [pc, #116]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800309e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6892      	ldr	r2, [r2, #8]
 80030a6:	0211      	lsls	r1, r2, #8
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6952      	ldr	r2, [r2, #20]
 80030ac:	0852      	lsrs	r2, r2, #1
 80030ae:	3a01      	subs	r2, #1
 80030b0:	0652      	lsls	r2, r2, #25
 80030b2:	430a      	orrs	r2, r1
 80030b4:	4915      	ldr	r1, [pc, #84]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030ba:	4b14      	ldr	r3, [pc, #80]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a13      	ldr	r2, [pc, #76]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c6:	f7fd fbc1 	bl	800084c <HAL_GetTick>
 80030ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030cc:	e009      	b.n	80030e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030ce:	f7fd fbbd 	bl	800084c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d902      	bls.n	80030e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	73fb      	strb	r3, [r7, #15]
          break;
 80030e0:	e005      	b.n	80030ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030e2:	4b0a      	ldr	r3, [pc, #40]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0ef      	beq.n	80030ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d106      	bne.n	8003102 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	4903      	ldr	r1, [pc, #12]	; (800310c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003102:	7bfb      	ldrb	r3, [r7, #15]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40021000 	.word	0x40021000

08003110 <__libc_init_array>:
 8003110:	b570      	push	{r4, r5, r6, lr}
 8003112:	4d0d      	ldr	r5, [pc, #52]	; (8003148 <__libc_init_array+0x38>)
 8003114:	4c0d      	ldr	r4, [pc, #52]	; (800314c <__libc_init_array+0x3c>)
 8003116:	1b64      	subs	r4, r4, r5
 8003118:	10a4      	asrs	r4, r4, #2
 800311a:	2600      	movs	r6, #0
 800311c:	42a6      	cmp	r6, r4
 800311e:	d109      	bne.n	8003134 <__libc_init_array+0x24>
 8003120:	4d0b      	ldr	r5, [pc, #44]	; (8003150 <__libc_init_array+0x40>)
 8003122:	4c0c      	ldr	r4, [pc, #48]	; (8003154 <__libc_init_array+0x44>)
 8003124:	f000 f820 	bl	8003168 <_init>
 8003128:	1b64      	subs	r4, r4, r5
 800312a:	10a4      	asrs	r4, r4, #2
 800312c:	2600      	movs	r6, #0
 800312e:	42a6      	cmp	r6, r4
 8003130:	d105      	bne.n	800313e <__libc_init_array+0x2e>
 8003132:	bd70      	pop	{r4, r5, r6, pc}
 8003134:	f855 3b04 	ldr.w	r3, [r5], #4
 8003138:	4798      	blx	r3
 800313a:	3601      	adds	r6, #1
 800313c:	e7ee      	b.n	800311c <__libc_init_array+0xc>
 800313e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003142:	4798      	blx	r3
 8003144:	3601      	adds	r6, #1
 8003146:	e7f2      	b.n	800312e <__libc_init_array+0x1e>
 8003148:	08003180 	.word	0x08003180
 800314c:	08003180 	.word	0x08003180
 8003150:	08003180 	.word	0x08003180
 8003154:	08003184 	.word	0x08003184

08003158 <memset>:
 8003158:	4402      	add	r2, r0
 800315a:	4603      	mov	r3, r0
 800315c:	4293      	cmp	r3, r2
 800315e:	d100      	bne.n	8003162 <memset+0xa>
 8003160:	4770      	bx	lr
 8003162:	f803 1b01 	strb.w	r1, [r3], #1
 8003166:	e7f9      	b.n	800315c <memset+0x4>

08003168 <_init>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	bf00      	nop
 800316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316e:	bc08      	pop	{r3}
 8003170:	469e      	mov	lr, r3
 8003172:	4770      	bx	lr

08003174 <_fini>:
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	bf00      	nop
 8003178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317a:	bc08      	pop	{r3}
 800317c:	469e      	mov	lr, r3
 800317e:	4770      	bx	lr
